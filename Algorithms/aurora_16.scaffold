// Scaffold file synthesized by rand-bench.py
// qubits: 16 ancilla: 16 gates: 64 levels: 3 degrees: 4
#include "qalloc.h"
#include "uncompute.h"
#define LOOP 16
// Call list: 1,2,3,4;5,6,7;8,9,10,11;;12,13,14;15,16,17,18;19,20,21,22;23,24,25,26;27,28,29;30,31,32,33;34,35,36;37,38;39;40,41,42;43,44,45,46;47,48
// Function 48 with degree 0
// nq: 10, na: 12, ng: 19
void func48(qbit **q, int n) {
printf("func48\n");
fflush(stderr);
	qbit *anc[12]; // ancilla
	qbit *nb[21]; // interacting bits
	qbit *res[9];
	nb[0] = q[8];
	nb[1] = q[0];
	nb[2] = q[2];
	nb[3] = q[5];
	nb[4] = q[6];
	nb[5] = q[4];
	nb[6] = q[4];
	nb[7] = q[0];
	nb[8] = q[9];
	nb[9] = q[3];
	nb[10] = q[1];
	nb[11] = q[9];
	nb[12] = q[8];
	nb[13] = q[4];
	nb[14] = q[1];
	nb[15] = q[5];
	nb[16] = q[7];
	nb[17] = q[7];
	nb[18] = q[3];
	nb[19] = q[0];
	nb[20] = q[0];
	res[0] = q[7];
	res[1] = q[5];
	res[2] = q[4];
	res[3] = q[3];
	res[4] = q[9];
	res[5] = q[6];
	res[6] = q[0];
	res[7] = q[2];
	res[8] = q[1];
	// Leaf function
	Compute (0, 12, 47, 28, 0, 2, 0) {
		acquire(12, anc, 21, nb);
		CNOT( q[8], anc[6] );
		CNOT( anc[10], q[0] );
		Toffoli( anc[6], anc[0], anc[1] );
		CNOT( q[2], q[5] );
		CNOT( q[6], anc[4] );
		Toffoli( anc[11], q[4], anc[2] );
		Toffoli( anc[10], q[4], anc[1] );
		Toffoli( q[0], anc[9], anc[4] );
		Toffoli( anc[0], q[9], q[3] );
		Toffoli( anc[3], anc[2], anc[0] );
		Toffoli( q[1], q[9], anc[0] );
		CNOT( q[8], anc[7] );
		Toffoli( q[4], q[1], q[5] );
		CNOT( q[7], anc[1] );
		CNOT( anc[9], q[7] );
		Toffoli( anc[5], q[3], anc[7] );
		Toffoli( anc[8], anc[4], q[0] );
		Toffoli( anc[2], anc[4], anc[8] );
		Toffoli( q[0], anc[2], anc[11] );
	}
	Store {
		CNOT( q[8], res[0] );
		CNOT( q[3], res[1] );
		CNOT( anc[2], res[2] );
		CNOT( anc[8], res[3] );
		CNOT( anc[10], res[4] );
		CNOT( anc[6], res[5] );
		CNOT( anc[10], res[6] );
		CNOT( q[1], res[7] );
		CNOT( q[7], res[8] );
	}
	Uncompute(res, 0, anc, 12, 47, 28){
		Toffoli( q[0], anc[2], anc[11] );
		Toffoli( anc[2], anc[4], anc[8] );
		Toffoli( anc[8], anc[4], q[0] );
		Toffoli( anc[5], q[3], anc[7] );
		CNOT( anc[9], q[7] );
		CNOT( q[7], anc[1] );
		Toffoli( q[4], q[1], q[5] );
		CNOT( q[8], anc[7] );
		Toffoli( q[1], q[9], anc[0] );
		Toffoli( anc[3], anc[2], anc[0] );
		Toffoli( anc[0], q[9], q[3] );
		Toffoli( q[0], anc[9], anc[4] );
		Toffoli( anc[10], q[4], anc[1] );
		Toffoli( anc[11], q[4], anc[2] );
		CNOT( q[6], anc[4] );
		CNOT( q[2], q[5] );
		Toffoli( anc[6], anc[0], anc[1] );
		CNOT( anc[10], q[0] );
		CNOT( q[8], anc[6] );
	} Free(anc, 12) {}
}
// Function 48 with degree 0
// nq: 10, na: 12, ng: 19
void func48R(qbit **q, int n) {
printf("func48R\n");
fflush(stderr);
	qbit *anc[12]; // ancilla
	qbit *nb[21]; // interacting bits
	qbit *res[9];
	nb[0] = q[8];
	nb[1] = q[0];
	nb[2] = q[2];
	nb[3] = q[5];
	nb[4] = q[6];
	nb[5] = q[4];
	nb[6] = q[4];
	nb[7] = q[0];
	nb[8] = q[9];
	nb[9] = q[3];
	nb[10] = q[1];
	nb[11] = q[9];
	nb[12] = q[8];
	nb[13] = q[4];
	nb[14] = q[1];
	nb[15] = q[5];
	nb[16] = q[7];
	nb[17] = q[7];
	nb[18] = q[3];
	nb[19] = q[0];
	nb[20] = q[0];
	res[0] = q[7];
	res[1] = q[5];
	res[2] = q[4];
	res[3] = q[3];
	res[4] = q[9];
	res[5] = q[6];
	res[6] = q[0];
	res[7] = q[2];
	res[8] = q[1];
	// Leaf function
	_computeModule(0, 12, 47, 28, 0, 2, 0);
	acquire(12, anc, 21, nb);
	Recompute (res, 0, anc, 12, 47, 28){
		Toffoli( q[0], anc[2], anc[11] );
		Toffoli( anc[2], anc[4], anc[8] );
		Toffoli( anc[8], anc[4], q[0] );
		Toffoli( anc[5], q[3], anc[7] );
		CNOT( anc[9], q[7] );
		CNOT( q[7], anc[1] );
		Toffoli( q[4], q[1], q[5] );
		CNOT( q[8], anc[7] );
		Toffoli( q[1], q[9], anc[0] );
		Toffoli( anc[3], anc[2], anc[0] );
		Toffoli( anc[0], q[9], q[3] );
		Toffoli( q[0], anc[9], anc[4] );
		Toffoli( anc[10], q[4], anc[1] );
		Toffoli( anc[11], q[4], anc[2] );
		CNOT( q[6], anc[4] );
		CNOT( q[2], q[5] );
		Toffoli( anc[6], anc[0], anc[1] );
		CNOT( anc[10], q[0] );
		CNOT( q[8], anc[6] );
	}
	Restore {
		CNOT( q[8], res[0] );
		CNOT( q[3], res[1] );
		CNOT( anc[2], res[2] );
		CNOT( anc[8], res[3] );
		CNOT( anc[10], res[4] );
		CNOT( anc[6], res[5] );
		CNOT( anc[10], res[6] );
		CNOT( q[1], res[7] );
		CNOT( q[7], res[8] );
	}
	Unrecompute {
		CNOT( q[8], anc[6] );
		CNOT( anc[10], q[0] );
		Toffoli( anc[6], anc[0], anc[1] );
		CNOT( q[2], q[5] );
		CNOT( q[6], anc[4] );
		Toffoli( anc[11], q[4], anc[2] );
		Toffoli( anc[10], q[4], anc[1] );
		Toffoli( q[0], anc[9], anc[4] );
		Toffoli( anc[0], q[9], q[3] );
		Toffoli( anc[3], anc[2], anc[0] );
		Toffoli( q[1], q[9], anc[0] );
		CNOT( q[8], anc[7] );
		Toffoli( q[4], q[1], q[5] );
		CNOT( q[7], anc[1] );
		CNOT( anc[9], q[7] );
		Toffoli( anc[5], q[3], anc[7] );
		Toffoli( anc[8], anc[4], q[0] );
		Toffoli( anc[2], anc[4], anc[8] );
		Toffoli( q[0], anc[2], anc[11] );
	} Refree(anc, 12) {}
}
// Function 47 with degree 0
// nq: 14, na: 6, ng: 1
void func47(qbit **q, int n) {
printf("func47\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[2]; // interacting bits
	qbit *res[11];
	nb[0] = q[6];
	nb[1] = q[8];
	res[0] = q[12];
	res[1] = q[8];
	res[2] = q[0];
	res[3] = q[2];
	res[4] = q[11];
	res[5] = q[7];
	res[6] = q[5];
	res[7] = q[1];
	res[8] = q[4];
	res[9] = q[6];
	res[10] = q[13];
	// Leaf function
	Compute (0, 6, 13, 12, 0, 2, 0) {
		acquire(6, anc, 2, nb);
		CNOT( q[6], q[8] );
	}
	Store {
		CNOT( q[5], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( q[11], res[2] );
		CNOT( anc[2], res[3] );
		CNOT( q[7], res[4] );
		CNOT( q[13], res[5] );
		CNOT( anc[4], res[6] );
		CNOT( q[2], res[7] );
		CNOT( q[3], res[8] );
		CNOT( q[0], res[9] );
		CNOT( q[10], res[10] );
	}
	Uncompute(res, 0, anc, 6, 13, 12){
		CNOT( q[6], q[8] );
	} Free(anc, 6) {}
}
// Function 47 with degree 0
// nq: 14, na: 6, ng: 1
void func47R(qbit **q, int n) {
printf("func47R\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[2]; // interacting bits
	qbit *res[11];
	nb[0] = q[6];
	nb[1] = q[8];
	res[0] = q[12];
	res[1] = q[8];
	res[2] = q[0];
	res[3] = q[2];
	res[4] = q[11];
	res[5] = q[7];
	res[6] = q[5];
	res[7] = q[1];
	res[8] = q[4];
	res[9] = q[6];
	res[10] = q[13];
	// Leaf function
	_computeModule(0, 6, 13, 12, 0, 2, 0);
	acquire(6, anc, 2, nb);
	Recompute (res, 0, anc, 6, 13, 12){
		CNOT( q[6], q[8] );
	}
	Restore {
		CNOT( q[5], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( q[11], res[2] );
		CNOT( anc[2], res[3] );
		CNOT( q[7], res[4] );
		CNOT( q[13], res[5] );
		CNOT( anc[4], res[6] );
		CNOT( q[2], res[7] );
		CNOT( q[3], res[8] );
		CNOT( q[0], res[9] );
		CNOT( q[10], res[10] );
	}
	Unrecompute {
		CNOT( q[6], q[8] );
	} Refree(anc, 6) {}
}
// Function 46 with degree 0
// nq: 13, na: 7, ng: 6
void func46(qbit **q, int n) {
printf("func46\n");
fflush(stderr);
	qbit *anc[7]; // ancilla
	qbit *nb[11]; // interacting bits
	qbit *res[9];
	nb[0] = q[2];
	nb[1] = q[8];
	nb[2] = q[4];
	nb[3] = q[9];
	nb[4] = q[3];
	nb[5] = q[1];
	nb[6] = q[4];
	nb[7] = q[6];
	nb[8] = q[12];
	nb[9] = q[8];
	nb[10] = q[2];
	res[0] = q[7];
	res[1] = q[0];
	res[2] = q[1];
	res[3] = q[3];
	res[4] = q[5];
	res[5] = q[12];
	res[6] = q[4];
	res[7] = q[2];
	res[8] = q[10];
	// Leaf function
	Compute (0, 7, 21, 15, 0, 4, 0) {
		acquire(7, anc, 11, nb);
		Toffoli( q[2], q[8], q[4] );
		CNOT( q[9], anc[1] );
		Toffoli( anc[2], q[3], q[1] );
		Toffoli( anc[1], q[4], q[6] );
		Toffoli( anc[2], anc[4], q[12] );
		Toffoli( anc[5], q[8], q[2] );
	}
	Store {
		CNOT( q[10], res[0] );
		CNOT( anc[6], res[1] );
		CNOT( anc[4], res[2] );
		CNOT( q[8], res[3] );
		CNOT( anc[3], res[4] );
		CNOT( anc[5], res[5] );
		CNOT( q[11], res[6] );
		CNOT( q[12], res[7] );
		CNOT( q[1], res[8] );
	}
	Uncompute(res, 0, anc, 7, 21, 15){
		Toffoli( anc[5], q[8], q[2] );
		Toffoli( anc[2], anc[4], q[12] );
		Toffoli( anc[1], q[4], q[6] );
		Toffoli( anc[2], q[3], q[1] );
		CNOT( q[9], anc[1] );
		Toffoli( q[2], q[8], q[4] );
	} Free(anc, 7) {}
}
// Function 46 with degree 0
// nq: 13, na: 7, ng: 6
void func46R(qbit **q, int n) {
printf("func46R\n");
fflush(stderr);
	qbit *anc[7]; // ancilla
	qbit *nb[11]; // interacting bits
	qbit *res[9];
	nb[0] = q[2];
	nb[1] = q[8];
	nb[2] = q[4];
	nb[3] = q[9];
	nb[4] = q[3];
	nb[5] = q[1];
	nb[6] = q[4];
	nb[7] = q[6];
	nb[8] = q[12];
	nb[9] = q[8];
	nb[10] = q[2];
	res[0] = q[7];
	res[1] = q[0];
	res[2] = q[1];
	res[3] = q[3];
	res[4] = q[5];
	res[5] = q[12];
	res[6] = q[4];
	res[7] = q[2];
	res[8] = q[10];
	// Leaf function
	_computeModule(0, 7, 21, 15, 0, 4, 0);
	acquire(7, anc, 11, nb);
	Recompute (res, 0, anc, 7, 21, 15){
		Toffoli( anc[5], q[8], q[2] );
		Toffoli( anc[2], anc[4], q[12] );
		Toffoli( anc[1], q[4], q[6] );
		Toffoli( anc[2], q[3], q[1] );
		CNOT( q[9], anc[1] );
		Toffoli( q[2], q[8], q[4] );
	}
	Restore {
		CNOT( q[10], res[0] );
		CNOT( anc[6], res[1] );
		CNOT( anc[4], res[2] );
		CNOT( q[8], res[3] );
		CNOT( anc[3], res[4] );
		CNOT( anc[5], res[5] );
		CNOT( q[11], res[6] );
		CNOT( q[12], res[7] );
		CNOT( q[1], res[8] );
	}
	Unrecompute {
		Toffoli( q[2], q[8], q[4] );
		CNOT( q[9], anc[1] );
		Toffoli( anc[2], q[3], q[1] );
		Toffoli( anc[1], q[4], q[6] );
		Toffoli( anc[2], anc[4], q[12] );
		Toffoli( anc[5], q[8], q[2] );
	} Refree(anc, 7) {}
}
// Function 45 with degree 0
// nq: 7, na: 6, ng: 52
void func45(qbit **q, int n) {
printf("func45\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[67]; // interacting bits
	qbit *res[2];
	nb[0] = q[0];
	nb[1] = q[2];
	nb[2] = q[2];
	nb[3] = q[6];
	nb[4] = q[1];
	nb[5] = q[0];
	nb[6] = q[0];
	nb[7] = q[1];
	nb[8] = q[0];
	nb[9] = q[3];
	nb[10] = q[0];
	nb[11] = q[2];
	nb[12] = q[5];
	nb[13] = q[6];
	nb[14] = q[3];
	nb[15] = q[4];
	nb[16] = q[3];
	nb[17] = q[1];
	nb[18] = q[2];
	nb[19] = q[1];
	nb[20] = q[5];
	nb[21] = q[0];
	nb[22] = q[1];
	nb[23] = q[3];
	nb[24] = q[2];
	nb[25] = q[4];
	nb[26] = q[1];
	nb[27] = q[4];
	nb[28] = q[0];
	nb[29] = q[5];
	nb[30] = q[1];
	nb[31] = q[6];
	nb[32] = q[6];
	nb[33] = q[4];
	nb[34] = q[5];
	nb[35] = q[2];
	nb[36] = q[4];
	nb[37] = q[2];
	nb[38] = q[1];
	nb[39] = q[6];
	nb[40] = q[0];
	nb[41] = q[5];
	nb[42] = q[1];
	nb[43] = q[6];
	nb[44] = q[0];
	nb[45] = q[1];
	nb[46] = q[5];
	nb[47] = q[0];
	nb[48] = q[6];
	nb[49] = q[3];
	nb[50] = q[4];
	nb[51] = q[0];
	nb[52] = q[4];
	nb[53] = q[3];
	nb[54] = q[6];
	nb[55] = q[1];
	nb[56] = q[2];
	nb[57] = q[0];
	nb[58] = q[5];
	nb[59] = q[3];
	nb[60] = q[4];
	nb[61] = q[2];
	nb[62] = q[1];
	nb[63] = q[4];
	nb[64] = q[2];
	nb[65] = q[5];
	nb[66] = q[3];
	res[0] = q[4];
	res[1] = q[6];
	// Leaf function
	Compute (0, 6, 106, 54, 0, 4, 0) {
		acquire(6, anc, 67, nb);
		Toffoli( anc[2], q[0], q[2] );
		CNOT( anc[0], anc[3] );
		Toffoli( q[2], q[6], anc[1] );
		CNOT( q[1], q[0] );
		Toffoli( q[0], q[1], anc[5] );
		Toffoli( q[0], anc[2], anc[5] );
		Toffoli( anc[0], q[3], anc[5] );
		Toffoli( anc[4], q[0], q[2] );
		CNOT( q[5], q[6] );
		Toffoli( anc[0], q[3], q[4] );
		CNOT( anc[0], anc[5] );
		CNOT( anc[0], anc[4] );
		CNOT( anc[1], anc[5] );
		CNOT( q[3], q[1] );
		CNOT( anc[4], anc[3] );
		Toffoli( anc[4], anc[2], q[2] );
		CNOT( anc[2], anc[4] );
		Toffoli( q[1], anc[5], anc[1] );
		CNOT( q[5], anc[4] );
		Toffoli( q[0], q[1], q[3] );
		CNOT( anc[4], q[2] );
		Toffoli( q[4], anc[5], q[1] );
		CNOT( anc[2], anc[4] );
		CNOT( anc[4], anc[2] );
		Toffoli( anc[0], anc[4], anc[1] );
		Toffoli( q[4], q[0], anc[1] );
		Toffoli( q[5], anc[5], q[1] );
		CNOT( anc[2], q[6] );
		Toffoli( anc[3], anc[1], q[6] );
		Toffoli( q[4], anc[0], anc[1] );
		Toffoli( anc[5], q[5], anc[3] );
		Toffoli( q[2], anc[5], q[4] );
		Toffoli( anc[3], q[2], anc[1] );
		Toffoli( q[1], q[6], q[0] );
		Toffoli( q[5], anc[0], q[1] );
		Toffoli( q[6], anc[3], q[0] );
		Toffoli( anc[4], q[1], q[5] );
		CNOT( anc[4], q[0] );
		CNOT( anc[2], q[6] );
		Toffoli( q[3], anc[3], q[4] );
		Toffoli( q[0], q[4], anc[4] );
		CNOT( anc[5], anc[1] );
		Toffoli( anc[5], q[3], anc[3] );
		CNOT( anc[3], q[6] );
		Toffoli( q[1], q[2], q[0] );
		CNOT( q[5], anc[4] );
		Toffoli( q[3], q[4], anc[2] );
		CNOT( q[2], anc[4] );
		Toffoli( q[1], q[4], anc[2] );
		Toffoli( anc[5], anc[3], q[2] );
		Toffoli( q[5], anc[2], anc[3] );
		CNOT( anc[0], q[3] );
	}
	Store {
		CNOT( anc[3], res[0] );
		CNOT( q[5], res[1] );
	}
	Uncompute(res, 0, anc, 6, 106, 54){
		CNOT( anc[0], q[3] );
		Toffoli( q[5], anc[2], anc[3] );
		Toffoli( anc[5], anc[3], q[2] );
		Toffoli( q[1], q[4], anc[2] );
		CNOT( q[2], anc[4] );
		Toffoli( q[3], q[4], anc[2] );
		CNOT( q[5], anc[4] );
		Toffoli( q[1], q[2], q[0] );
		CNOT( anc[3], q[6] );
		Toffoli( anc[5], q[3], anc[3] );
		CNOT( anc[5], anc[1] );
		Toffoli( q[0], q[4], anc[4] );
		Toffoli( q[3], anc[3], q[4] );
		CNOT( anc[2], q[6] );
		CNOT( anc[4], q[0] );
		Toffoli( anc[4], q[1], q[5] );
		Toffoli( q[6], anc[3], q[0] );
		Toffoli( q[5], anc[0], q[1] );
		Toffoli( q[1], q[6], q[0] );
		Toffoli( anc[3], q[2], anc[1] );
		Toffoli( q[2], anc[5], q[4] );
		Toffoli( anc[5], q[5], anc[3] );
		Toffoli( q[4], anc[0], anc[1] );
		Toffoli( anc[3], anc[1], q[6] );
		CNOT( anc[2], q[6] );
		Toffoli( q[5], anc[5], q[1] );
		Toffoli( q[4], q[0], anc[1] );
		Toffoli( anc[0], anc[4], anc[1] );
		CNOT( anc[4], anc[2] );
		CNOT( anc[2], anc[4] );
		Toffoli( q[4], anc[5], q[1] );
		CNOT( anc[4], q[2] );
		Toffoli( q[0], q[1], q[3] );
		CNOT( q[5], anc[4] );
		Toffoli( q[1], anc[5], anc[1] );
		CNOT( anc[2], anc[4] );
		Toffoli( anc[4], anc[2], q[2] );
		CNOT( anc[4], anc[3] );
		CNOT( q[3], q[1] );
		CNOT( anc[1], anc[5] );
		CNOT( anc[0], anc[4] );
		CNOT( anc[0], anc[5] );
		Toffoli( anc[0], q[3], q[4] );
		CNOT( q[5], q[6] );
		Toffoli( anc[4], q[0], q[2] );
		Toffoli( anc[0], q[3], anc[5] );
		Toffoli( q[0], anc[2], anc[5] );
		Toffoli( q[0], q[1], anc[5] );
		CNOT( q[1], q[0] );
		Toffoli( q[2], q[6], anc[1] );
		CNOT( anc[0], anc[3] );
		Toffoli( anc[2], q[0], q[2] );
	} Free(anc, 6) {}
}
// Function 45 with degree 0
// nq: 7, na: 6, ng: 52
void func45R(qbit **q, int n) {
printf("func45R\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[67]; // interacting bits
	qbit *res[2];
	nb[0] = q[0];
	nb[1] = q[2];
	nb[2] = q[2];
	nb[3] = q[6];
	nb[4] = q[1];
	nb[5] = q[0];
	nb[6] = q[0];
	nb[7] = q[1];
	nb[8] = q[0];
	nb[9] = q[3];
	nb[10] = q[0];
	nb[11] = q[2];
	nb[12] = q[5];
	nb[13] = q[6];
	nb[14] = q[3];
	nb[15] = q[4];
	nb[16] = q[3];
	nb[17] = q[1];
	nb[18] = q[2];
	nb[19] = q[1];
	nb[20] = q[5];
	nb[21] = q[0];
	nb[22] = q[1];
	nb[23] = q[3];
	nb[24] = q[2];
	nb[25] = q[4];
	nb[26] = q[1];
	nb[27] = q[4];
	nb[28] = q[0];
	nb[29] = q[5];
	nb[30] = q[1];
	nb[31] = q[6];
	nb[32] = q[6];
	nb[33] = q[4];
	nb[34] = q[5];
	nb[35] = q[2];
	nb[36] = q[4];
	nb[37] = q[2];
	nb[38] = q[1];
	nb[39] = q[6];
	nb[40] = q[0];
	nb[41] = q[5];
	nb[42] = q[1];
	nb[43] = q[6];
	nb[44] = q[0];
	nb[45] = q[1];
	nb[46] = q[5];
	nb[47] = q[0];
	nb[48] = q[6];
	nb[49] = q[3];
	nb[50] = q[4];
	nb[51] = q[0];
	nb[52] = q[4];
	nb[53] = q[3];
	nb[54] = q[6];
	nb[55] = q[1];
	nb[56] = q[2];
	nb[57] = q[0];
	nb[58] = q[5];
	nb[59] = q[3];
	nb[60] = q[4];
	nb[61] = q[2];
	nb[62] = q[1];
	nb[63] = q[4];
	nb[64] = q[2];
	nb[65] = q[5];
	nb[66] = q[3];
	res[0] = q[4];
	res[1] = q[6];
	// Leaf function
	_computeModule(0, 6, 106, 54, 0, 4, 0);
	acquire(6, anc, 67, nb);
	Recompute (res, 0, anc, 6, 106, 54){
		CNOT( anc[0], q[3] );
		Toffoli( q[5], anc[2], anc[3] );
		Toffoli( anc[5], anc[3], q[2] );
		Toffoli( q[1], q[4], anc[2] );
		CNOT( q[2], anc[4] );
		Toffoli( q[3], q[4], anc[2] );
		CNOT( q[5], anc[4] );
		Toffoli( q[1], q[2], q[0] );
		CNOT( anc[3], q[6] );
		Toffoli( anc[5], q[3], anc[3] );
		CNOT( anc[5], anc[1] );
		Toffoli( q[0], q[4], anc[4] );
		Toffoli( q[3], anc[3], q[4] );
		CNOT( anc[2], q[6] );
		CNOT( anc[4], q[0] );
		Toffoli( anc[4], q[1], q[5] );
		Toffoli( q[6], anc[3], q[0] );
		Toffoli( q[5], anc[0], q[1] );
		Toffoli( q[1], q[6], q[0] );
		Toffoli( anc[3], q[2], anc[1] );
		Toffoli( q[2], anc[5], q[4] );
		Toffoli( anc[5], q[5], anc[3] );
		Toffoli( q[4], anc[0], anc[1] );
		Toffoli( anc[3], anc[1], q[6] );
		CNOT( anc[2], q[6] );
		Toffoli( q[5], anc[5], q[1] );
		Toffoli( q[4], q[0], anc[1] );
		Toffoli( anc[0], anc[4], anc[1] );
		CNOT( anc[4], anc[2] );
		CNOT( anc[2], anc[4] );
		Toffoli( q[4], anc[5], q[1] );
		CNOT( anc[4], q[2] );
		Toffoli( q[0], q[1], q[3] );
		CNOT( q[5], anc[4] );
		Toffoli( q[1], anc[5], anc[1] );
		CNOT( anc[2], anc[4] );
		Toffoli( anc[4], anc[2], q[2] );
		CNOT( anc[4], anc[3] );
		CNOT( q[3], q[1] );
		CNOT( anc[1], anc[5] );
		CNOT( anc[0], anc[4] );
		CNOT( anc[0], anc[5] );
		Toffoli( anc[0], q[3], q[4] );
		CNOT( q[5], q[6] );
		Toffoli( anc[4], q[0], q[2] );
		Toffoli( anc[0], q[3], anc[5] );
		Toffoli( q[0], anc[2], anc[5] );
		Toffoli( q[0], q[1], anc[5] );
		CNOT( q[1], q[0] );
		Toffoli( q[2], q[6], anc[1] );
		CNOT( anc[0], anc[3] );
		Toffoli( anc[2], q[0], q[2] );
	}
	Restore {
		CNOT( anc[3], res[0] );
		CNOT( q[5], res[1] );
	}
	Unrecompute {
		Toffoli( anc[2], q[0], q[2] );
		CNOT( anc[0], anc[3] );
		Toffoli( q[2], q[6], anc[1] );
		CNOT( q[1], q[0] );
		Toffoli( q[0], q[1], anc[5] );
		Toffoli( q[0], anc[2], anc[5] );
		Toffoli( anc[0], q[3], anc[5] );
		Toffoli( anc[4], q[0], q[2] );
		CNOT( q[5], q[6] );
		Toffoli( anc[0], q[3], q[4] );
		CNOT( anc[0], anc[5] );
		CNOT( anc[0], anc[4] );
		CNOT( anc[1], anc[5] );
		CNOT( q[3], q[1] );
		CNOT( anc[4], anc[3] );
		Toffoli( anc[4], anc[2], q[2] );
		CNOT( anc[2], anc[4] );
		Toffoli( q[1], anc[5], anc[1] );
		CNOT( q[5], anc[4] );
		Toffoli( q[0], q[1], q[3] );
		CNOT( anc[4], q[2] );
		Toffoli( q[4], anc[5], q[1] );
		CNOT( anc[2], anc[4] );
		CNOT( anc[4], anc[2] );
		Toffoli( anc[0], anc[4], anc[1] );
		Toffoli( q[4], q[0], anc[1] );
		Toffoli( q[5], anc[5], q[1] );
		CNOT( anc[2], q[6] );
		Toffoli( anc[3], anc[1], q[6] );
		Toffoli( q[4], anc[0], anc[1] );
		Toffoli( anc[5], q[5], anc[3] );
		Toffoli( q[2], anc[5], q[4] );
		Toffoli( anc[3], q[2], anc[1] );
		Toffoli( q[1], q[6], q[0] );
		Toffoli( q[5], anc[0], q[1] );
		Toffoli( q[6], anc[3], q[0] );
		Toffoli( anc[4], q[1], q[5] );
		CNOT( anc[4], q[0] );
		CNOT( anc[2], q[6] );
		Toffoli( q[3], anc[3], q[4] );
		Toffoli( q[0], q[4], anc[4] );
		CNOT( anc[5], anc[1] );
		Toffoli( anc[5], q[3], anc[3] );
		CNOT( anc[3], q[6] );
		Toffoli( q[1], q[2], q[0] );
		CNOT( q[5], anc[4] );
		Toffoli( q[3], q[4], anc[2] );
		CNOT( q[2], anc[4] );
		Toffoli( q[1], q[4], anc[2] );
		Toffoli( anc[5], anc[3], q[2] );
		Toffoli( q[5], anc[2], anc[3] );
		CNOT( anc[0], q[3] );
	} Refree(anc, 6) {}
}
// Function 44 with degree 0
// nq: 3, na: 7, ng: 34
void func44(qbit **q, int n) {
printf("func44\n");
fflush(stderr);
	qbit *anc[7]; // ancilla
	qbit *nb[31]; // interacting bits
	qbit *res[2];
	nb[0] = q[2];
	nb[1] = q[1];
	nb[2] = q[2];
	nb[3] = q[1];
	nb[4] = q[1];
	nb[5] = q[2];
	nb[6] = q[0];
	nb[7] = q[0];
	nb[8] = q[0];
	nb[9] = q[0];
	nb[10] = q[2];
	nb[11] = q[1];
	nb[12] = q[0];
	nb[13] = q[2];
	nb[14] = q[1];
	nb[15] = q[2];
	nb[16] = q[0];
	nb[17] = q[2];
	nb[18] = q[1];
	nb[19] = q[0];
	nb[20] = q[2];
	nb[21] = q[0];
	nb[22] = q[2];
	nb[23] = q[1];
	nb[24] = q[2];
	nb[25] = q[1];
	nb[26] = q[2];
	nb[27] = q[2];
	nb[28] = q[0];
	nb[29] = q[2];
	nb[30] = q[0];
	res[0] = q[2];
	res[1] = q[1];
	// Leaf function
	Compute (0, 7, 70, 36, 0, 4, 0) {
		acquire(7, anc, 31, nb);
		Toffoli( q[2], q[1], anc[4] );
		Toffoli( anc[3], anc[0], anc[5] );
		Toffoli( q[2], q[1], anc[6] );
		Toffoli( q[1], q[2], anc[5] );
		Toffoli( anc[1], q[0], anc[2] );
		Toffoli( anc[6], anc[2], q[0] );
		CNOT( q[0], anc[6] );
		Toffoli( anc[1], anc[0], anc[2] );
		CNOT( anc[6], anc[1] );
		Toffoli( q[0], anc[3], q[2] );
		Toffoli( anc[3], anc[2], q[1] );
		Toffoli( anc[3], q[0], q[2] );
		Toffoli( anc[6], anc[3], anc[2] );
		Toffoli( anc[2], anc[4], q[1] );
		Toffoli( q[2], q[0], anc[0] );
		CNOT( anc[2], q[2] );
		Toffoli( q[1], anc[1], q[0] );
		Toffoli( anc[2], q[2], q[0] );
		CNOT( anc[2], q[2] );
		CNOT( q[1], anc[2] );
		CNOT( q[2], anc[5] );
		Toffoli( q[1], anc[6], anc[1] );
		CNOT( anc[4], q[2] );
		Toffoli( anc[2], anc[5], anc[4] );
		CNOT( anc[3], q[2] );
		Toffoli( anc[3], anc[6], anc[0] );
		CNOT( anc[5], anc[4] );
		CNOT( anc[5], anc[4] );
		CNOT( q[0], anc[0] );
		Toffoli( anc[0], anc[3], anc[1] );
		CNOT( q[2], anc[2] );
		CNOT( anc[3], anc[4] );
		Toffoli( anc[5], anc[3], anc[2] );
		CNOT( anc[6], q[0] );
	}
	Store {
		CNOT( anc[4], res[0] );
		CNOT( anc[6], res[1] );
	}
	Uncompute(res, 0, anc, 7, 70, 36){
		CNOT( anc[6], q[0] );
		Toffoli( anc[5], anc[3], anc[2] );
		CNOT( anc[3], anc[4] );
		CNOT( q[2], anc[2] );
		Toffoli( anc[0], anc[3], anc[1] );
		CNOT( q[0], anc[0] );
		CNOT( anc[5], anc[4] );
		CNOT( anc[5], anc[4] );
		Toffoli( anc[3], anc[6], anc[0] );
		CNOT( anc[3], q[2] );
		Toffoli( anc[2], anc[5], anc[4] );
		CNOT( anc[4], q[2] );
		Toffoli( q[1], anc[6], anc[1] );
		CNOT( q[2], anc[5] );
		CNOT( q[1], anc[2] );
		CNOT( anc[2], q[2] );
		Toffoli( anc[2], q[2], q[0] );
		Toffoli( q[1], anc[1], q[0] );
		CNOT( anc[2], q[2] );
		Toffoli( q[2], q[0], anc[0] );
		Toffoli( anc[2], anc[4], q[1] );
		Toffoli( anc[6], anc[3], anc[2] );
		Toffoli( anc[3], q[0], q[2] );
		Toffoli( anc[3], anc[2], q[1] );
		Toffoli( q[0], anc[3], q[2] );
		CNOT( anc[6], anc[1] );
		Toffoli( anc[1], anc[0], anc[2] );
		CNOT( q[0], anc[6] );
		Toffoli( anc[6], anc[2], q[0] );
		Toffoli( anc[1], q[0], anc[2] );
		Toffoli( q[1], q[2], anc[5] );
		Toffoli( q[2], q[1], anc[6] );
		Toffoli( anc[3], anc[0], anc[5] );
		Toffoli( q[2], q[1], anc[4] );
	} Free(anc, 7) {}
}
// Function 44 with degree 0
// nq: 3, na: 7, ng: 34
void func44R(qbit **q, int n) {
printf("func44R\n");
fflush(stderr);
	qbit *anc[7]; // ancilla
	qbit *nb[31]; // interacting bits
	qbit *res[2];
	nb[0] = q[2];
	nb[1] = q[1];
	nb[2] = q[2];
	nb[3] = q[1];
	nb[4] = q[1];
	nb[5] = q[2];
	nb[6] = q[0];
	nb[7] = q[0];
	nb[8] = q[0];
	nb[9] = q[0];
	nb[10] = q[2];
	nb[11] = q[1];
	nb[12] = q[0];
	nb[13] = q[2];
	nb[14] = q[1];
	nb[15] = q[2];
	nb[16] = q[0];
	nb[17] = q[2];
	nb[18] = q[1];
	nb[19] = q[0];
	nb[20] = q[2];
	nb[21] = q[0];
	nb[22] = q[2];
	nb[23] = q[1];
	nb[24] = q[2];
	nb[25] = q[1];
	nb[26] = q[2];
	nb[27] = q[2];
	nb[28] = q[0];
	nb[29] = q[2];
	nb[30] = q[0];
	res[0] = q[2];
	res[1] = q[1];
	// Leaf function
	_computeModule(0, 7, 70, 36, 0, 4, 0);
	acquire(7, anc, 31, nb);
	Recompute (res, 0, anc, 7, 70, 36){
		CNOT( anc[6], q[0] );
		Toffoli( anc[5], anc[3], anc[2] );
		CNOT( anc[3], anc[4] );
		CNOT( q[2], anc[2] );
		Toffoli( anc[0], anc[3], anc[1] );
		CNOT( q[0], anc[0] );
		CNOT( anc[5], anc[4] );
		CNOT( anc[5], anc[4] );
		Toffoli( anc[3], anc[6], anc[0] );
		CNOT( anc[3], q[2] );
		Toffoli( anc[2], anc[5], anc[4] );
		CNOT( anc[4], q[2] );
		Toffoli( q[1], anc[6], anc[1] );
		CNOT( q[2], anc[5] );
		CNOT( q[1], anc[2] );
		CNOT( anc[2], q[2] );
		Toffoli( anc[2], q[2], q[0] );
		Toffoli( q[1], anc[1], q[0] );
		CNOT( anc[2], q[2] );
		Toffoli( q[2], q[0], anc[0] );
		Toffoli( anc[2], anc[4], q[1] );
		Toffoli( anc[6], anc[3], anc[2] );
		Toffoli( anc[3], q[0], q[2] );
		Toffoli( anc[3], anc[2], q[1] );
		Toffoli( q[0], anc[3], q[2] );
		CNOT( anc[6], anc[1] );
		Toffoli( anc[1], anc[0], anc[2] );
		CNOT( q[0], anc[6] );
		Toffoli( anc[6], anc[2], q[0] );
		Toffoli( anc[1], q[0], anc[2] );
		Toffoli( q[1], q[2], anc[5] );
		Toffoli( q[2], q[1], anc[6] );
		Toffoli( anc[3], anc[0], anc[5] );
		Toffoli( q[2], q[1], anc[4] );
	}
	Restore {
		CNOT( anc[4], res[0] );
		CNOT( anc[6], res[1] );
	}
	Unrecompute {
		Toffoli( q[2], q[1], anc[4] );
		Toffoli( anc[3], anc[0], anc[5] );
		Toffoli( q[2], q[1], anc[6] );
		Toffoli( q[1], q[2], anc[5] );
		Toffoli( anc[1], q[0], anc[2] );
		Toffoli( anc[6], anc[2], q[0] );
		CNOT( q[0], anc[6] );
		Toffoli( anc[1], anc[0], anc[2] );
		CNOT( anc[6], anc[1] );
		Toffoli( q[0], anc[3], q[2] );
		Toffoli( anc[3], anc[2], q[1] );
		Toffoli( anc[3], q[0], q[2] );
		Toffoli( anc[6], anc[3], anc[2] );
		Toffoli( anc[2], anc[4], q[1] );
		Toffoli( q[2], q[0], anc[0] );
		CNOT( anc[2], q[2] );
		Toffoli( q[1], anc[1], q[0] );
		Toffoli( anc[2], q[2], q[0] );
		CNOT( anc[2], q[2] );
		CNOT( q[1], anc[2] );
		CNOT( q[2], anc[5] );
		Toffoli( q[1], anc[6], anc[1] );
		CNOT( anc[4], q[2] );
		Toffoli( anc[2], anc[5], anc[4] );
		CNOT( anc[3], q[2] );
		Toffoli( anc[3], anc[6], anc[0] );
		CNOT( anc[5], anc[4] );
		CNOT( anc[5], anc[4] );
		CNOT( q[0], anc[0] );
		Toffoli( anc[0], anc[3], anc[1] );
		CNOT( q[2], anc[2] );
		CNOT( anc[3], anc[4] );
		Toffoli( anc[5], anc[3], anc[2] );
		CNOT( anc[6], q[0] );
	} Refree(anc, 7) {}
}
// Function 43 with degree 0
// nq: 10, na: 10, ng: 5
void func43(qbit **q, int n) {
printf("func43\n");
fflush(stderr);
	qbit *anc[10]; // ancilla
	qbit *nb[5]; // interacting bits
	qbit *res[9];
	nb[0] = q[7];
	nb[1] = q[3];
	nb[2] = q[5];
	nb[3] = q[9];
	nb[4] = q[7];
	res[0] = q[5];
	res[1] = q[2];
	res[2] = q[8];
	res[3] = q[3];
	res[4] = q[6];
	res[5] = q[0];
	res[6] = q[1];
	res[7] = q[7];
	res[8] = q[4];
	// Leaf function
	Compute (0, 10, 19, 14, 0, 4, 0) {
		acquire(10, anc, 5, nb);
		Toffoli( q[7], q[3], anc[0] );
		CNOT( q[5], q[9] );
		CNOT( anc[1], anc[4] );
		CNOT( anc[0], q[7] );
		CNOT( anc[9], anc[0] );
	}
	Store {
		CNOT( q[9], res[0] );
		CNOT( anc[7], res[1] );
		CNOT( anc[3], res[2] );
		CNOT( q[0], res[3] );
		CNOT( anc[4], res[4] );
		CNOT( anc[2], res[5] );
		CNOT( anc[6], res[6] );
		CNOT( q[8], res[7] );
		CNOT( q[1], res[8] );
	}
	Uncompute(res, 0, anc, 10, 19, 14){
		CNOT( anc[9], anc[0] );
		CNOT( anc[0], q[7] );
		CNOT( anc[1], anc[4] );
		CNOT( q[5], q[9] );
		Toffoli( q[7], q[3], anc[0] );
	} Free(anc, 10) {}
}
// Function 43 with degree 0
// nq: 10, na: 10, ng: 5
void func43R(qbit **q, int n) {
printf("func43R\n");
fflush(stderr);
	qbit *anc[10]; // ancilla
	qbit *nb[5]; // interacting bits
	qbit *res[9];
	nb[0] = q[7];
	nb[1] = q[3];
	nb[2] = q[5];
	nb[3] = q[9];
	nb[4] = q[7];
	res[0] = q[5];
	res[1] = q[2];
	res[2] = q[8];
	res[3] = q[3];
	res[4] = q[6];
	res[5] = q[0];
	res[6] = q[1];
	res[7] = q[7];
	res[8] = q[4];
	// Leaf function
	_computeModule(0, 10, 19, 14, 0, 4, 0);
	acquire(10, anc, 5, nb);
	Recompute (res, 0, anc, 10, 19, 14){
		CNOT( anc[9], anc[0] );
		CNOT( anc[0], q[7] );
		CNOT( anc[1], anc[4] );
		CNOT( q[5], q[9] );
		Toffoli( q[7], q[3], anc[0] );
	}
	Restore {
		CNOT( q[9], res[0] );
		CNOT( anc[7], res[1] );
		CNOT( anc[3], res[2] );
		CNOT( q[0], res[3] );
		CNOT( anc[4], res[4] );
		CNOT( anc[2], res[5] );
		CNOT( anc[6], res[6] );
		CNOT( q[8], res[7] );
		CNOT( q[1], res[8] );
	}
	Unrecompute {
		Toffoli( q[7], q[3], anc[0] );
		CNOT( q[5], q[9] );
		CNOT( anc[1], anc[4] );
		CNOT( anc[0], q[7] );
		CNOT( anc[9], anc[0] );
	} Refree(anc, 10) {}
}
// Function 42 with degree 0
// nq: 13, na: 12, ng: 14
void func42(qbit **q, int n) {
printf("func42\n");
fflush(stderr);
	qbit *anc[12]; // ancilla
	qbit *nb[17]; // interacting bits
	qbit *res[10];
	nb[0] = q[10];
	nb[1] = q[9];
	nb[2] = q[12];
	nb[3] = q[11];
	nb[4] = q[1];
	nb[5] = q[0];
	nb[6] = q[7];
	nb[7] = q[9];
	nb[8] = q[10];
	nb[9] = q[6];
	nb[10] = q[4];
	nb[11] = q[3];
	nb[12] = q[10];
	nb[13] = q[8];
	nb[14] = q[2];
	nb[15] = q[4];
	nb[16] = q[1];
	res[0] = q[2];
	res[1] = q[12];
	res[2] = q[1];
	res[3] = q[8];
	res[4] = q[7];
	res[5] = q[9];
	res[6] = q[10];
	res[7] = q[3];
	res[8] = q[11];
	res[9] = q[0];
	// Leaf function
	Compute (0, 12, 38, 24, 0, 3, 0) {
		acquire(12, anc, 17, nb);
		CNOT( q[10], anc[5] );
		CNOT( q[9], q[12] );
		Toffoli( q[11], q[1], anc[0] );
		Toffoli( anc[5], anc[3], q[0] );
		CNOT( anc[6], anc[10] );
		Toffoli( anc[2], q[7], anc[0] );
		Toffoli( q[9], anc[0], anc[6] );
		CNOT( q[10], anc[4] );
		Toffoli( anc[9], anc[8], anc[5] );
		CNOT( q[6], q[4] );
		Toffoli( anc[1], anc[4], anc[8] );
		CNOT( q[3], q[10] );
		CNOT( q[8], q[2] );
		Toffoli( q[4], q[1], anc[10] );
	}
	Store {
		CNOT( anc[7], res[0] );
		CNOT( anc[5], res[1] );
		CNOT( anc[0], res[2] );
		CNOT( q[9], res[3] );
		CNOT( q[11], res[4] );
		CNOT( anc[4], res[5] );
		CNOT( q[3], res[6] );
		CNOT( anc[8], res[7] );
		CNOT( q[12], res[8] );
		CNOT( q[1], res[9] );
	}
	Uncompute(res, 0, anc, 12, 38, 24){
		Toffoli( q[4], q[1], anc[10] );
		CNOT( q[8], q[2] );
		CNOT( q[3], q[10] );
		Toffoli( anc[1], anc[4], anc[8] );
		CNOT( q[6], q[4] );
		Toffoli( anc[9], anc[8], anc[5] );
		CNOT( q[10], anc[4] );
		Toffoli( q[9], anc[0], anc[6] );
		Toffoli( anc[2], q[7], anc[0] );
		CNOT( anc[6], anc[10] );
		Toffoli( anc[5], anc[3], q[0] );
		Toffoli( q[11], q[1], anc[0] );
		CNOT( q[9], q[12] );
		CNOT( q[10], anc[5] );
	} Free(anc, 12) {}
}
// Function 42 with degree 0
// nq: 13, na: 12, ng: 14
void func42R(qbit **q, int n) {
printf("func42R\n");
fflush(stderr);
	qbit *anc[12]; // ancilla
	qbit *nb[17]; // interacting bits
	qbit *res[10];
	nb[0] = q[10];
	nb[1] = q[9];
	nb[2] = q[12];
	nb[3] = q[11];
	nb[4] = q[1];
	nb[5] = q[0];
	nb[6] = q[7];
	nb[7] = q[9];
	nb[8] = q[10];
	nb[9] = q[6];
	nb[10] = q[4];
	nb[11] = q[3];
	nb[12] = q[10];
	nb[13] = q[8];
	nb[14] = q[2];
	nb[15] = q[4];
	nb[16] = q[1];
	res[0] = q[2];
	res[1] = q[12];
	res[2] = q[1];
	res[3] = q[8];
	res[4] = q[7];
	res[5] = q[9];
	res[6] = q[10];
	res[7] = q[3];
	res[8] = q[11];
	res[9] = q[0];
	// Leaf function
	_computeModule(0, 12, 38, 24, 0, 3, 0);
	acquire(12, anc, 17, nb);
	Recompute (res, 0, anc, 12, 38, 24){
		Toffoli( q[4], q[1], anc[10] );
		CNOT( q[8], q[2] );
		CNOT( q[3], q[10] );
		Toffoli( anc[1], anc[4], anc[8] );
		CNOT( q[6], q[4] );
		Toffoli( anc[9], anc[8], anc[5] );
		CNOT( q[10], anc[4] );
		Toffoli( q[9], anc[0], anc[6] );
		Toffoli( anc[2], q[7], anc[0] );
		CNOT( anc[6], anc[10] );
		Toffoli( anc[5], anc[3], q[0] );
		Toffoli( q[11], q[1], anc[0] );
		CNOT( q[9], q[12] );
		CNOT( q[10], anc[5] );
	}
	Restore {
		CNOT( anc[7], res[0] );
		CNOT( anc[5], res[1] );
		CNOT( anc[0], res[2] );
		CNOT( q[9], res[3] );
		CNOT( q[11], res[4] );
		CNOT( anc[4], res[5] );
		CNOT( q[3], res[6] );
		CNOT( anc[8], res[7] );
		CNOT( q[12], res[8] );
		CNOT( q[1], res[9] );
	}
	Unrecompute {
		CNOT( q[10], anc[5] );
		CNOT( q[9], q[12] );
		Toffoli( q[11], q[1], anc[0] );
		Toffoli( anc[5], anc[3], q[0] );
		CNOT( anc[6], anc[10] );
		Toffoli( anc[2], q[7], anc[0] );
		Toffoli( q[9], anc[0], anc[6] );
		CNOT( q[10], anc[4] );
		Toffoli( anc[9], anc[8], anc[5] );
		CNOT( q[6], q[4] );
		Toffoli( anc[1], anc[4], anc[8] );
		CNOT( q[3], q[10] );
		CNOT( q[8], q[2] );
		Toffoli( q[4], q[1], anc[10] );
	} Refree(anc, 12) {}
}
// Function 41 with degree 0
// nq: 11, na: 15, ng: 24
void func41(qbit **q, int n) {
printf("func41\n");
fflush(stderr);
	qbit *anc[15]; // ancilla
	qbit *nb[27]; // interacting bits
	qbit *res[2];
	nb[0] = q[9];
	nb[1] = q[6];
	nb[2] = q[0];
	nb[3] = q[5];
	nb[4] = q[2];
	nb[5] = q[0];
	nb[6] = q[3];
	nb[7] = q[5];
	nb[8] = q[10];
	nb[9] = q[8];
	nb[10] = q[4];
	nb[11] = q[2];
	nb[12] = q[2];
	nb[13] = q[1];
	nb[14] = q[0];
	nb[15] = q[10];
	nb[16] = q[9];
	nb[17] = q[4];
	nb[18] = q[0];
	nb[19] = q[10];
	nb[20] = q[4];
	nb[21] = q[10];
	nb[22] = q[0];
	nb[23] = q[3];
	nb[24] = q[10];
	nb[25] = q[7];
	nb[26] = q[7];
	res[0] = q[6];
	res[1] = q[0];
	// Leaf function
	Compute (0, 15, 50, 26, 0, 3, 0) {
		acquire(15, anc, 27, nb);
		CNOT( q[9], q[6] );
		CNOT( anc[8], q[0] );
		Toffoli( anc[6], anc[11], anc[1] );
		Toffoli( q[5], anc[5], q[2] );
		CNOT( anc[2], q[0] );
		CNOT( anc[4], q[3] );
		Toffoli( q[5], anc[5], q[10] );
		Toffoli( anc[5], q[8], anc[11] );
		CNOT( q[4], q[2] );
		Toffoli( q[2], anc[1], q[1] );
		Toffoli( q[0], q[10], anc[11] );
		Toffoli( anc[14], anc[11], anc[12] );
		Toffoli( q[9], anc[14], anc[4] );
		CNOT( anc[6], anc[8] );
		CNOT( anc[4], q[4] );
		Toffoli( anc[3], anc[4], q[0] );
		Toffoli( anc[10], q[10], anc[2] );
		CNOT( anc[4], anc[8] );
		Toffoli( anc[13], anc[4], anc[7] );
		CNOT( q[4], q[10] );
		Toffoli( q[0], q[3], anc[13] );
		CNOT( q[10], q[7] );
		CNOT( anc[0], anc[10] );
		CNOT( anc[10], q[7] );
	}
	Store {
		CNOT( q[5], res[0] );
		CNOT( anc[2], res[1] );
	}
	Uncompute(res, 0, anc, 15, 50, 26){
		CNOT( anc[10], q[7] );
		CNOT( anc[0], anc[10] );
		CNOT( q[10], q[7] );
		Toffoli( q[0], q[3], anc[13] );
		CNOT( q[4], q[10] );
		Toffoli( anc[13], anc[4], anc[7] );
		CNOT( anc[4], anc[8] );
		Toffoli( anc[10], q[10], anc[2] );
		Toffoli( anc[3], anc[4], q[0] );
		CNOT( anc[4], q[4] );
		CNOT( anc[6], anc[8] );
		Toffoli( q[9], anc[14], anc[4] );
		Toffoli( anc[14], anc[11], anc[12] );
		Toffoli( q[0], q[10], anc[11] );
		Toffoli( q[2], anc[1], q[1] );
		CNOT( q[4], q[2] );
		Toffoli( anc[5], q[8], anc[11] );
		Toffoli( q[5], anc[5], q[10] );
		CNOT( anc[4], q[3] );
		CNOT( anc[2], q[0] );
		Toffoli( q[5], anc[5], q[2] );
		Toffoli( anc[6], anc[11], anc[1] );
		CNOT( anc[8], q[0] );
		CNOT( q[9], q[6] );
	} Free(anc, 15) {}
}
// Function 41 with degree 0
// nq: 11, na: 15, ng: 24
void func41R(qbit **q, int n) {
printf("func41R\n");
fflush(stderr);
	qbit *anc[15]; // ancilla
	qbit *nb[27]; // interacting bits
	qbit *res[2];
	nb[0] = q[9];
	nb[1] = q[6];
	nb[2] = q[0];
	nb[3] = q[5];
	nb[4] = q[2];
	nb[5] = q[0];
	nb[6] = q[3];
	nb[7] = q[5];
	nb[8] = q[10];
	nb[9] = q[8];
	nb[10] = q[4];
	nb[11] = q[2];
	nb[12] = q[2];
	nb[13] = q[1];
	nb[14] = q[0];
	nb[15] = q[10];
	nb[16] = q[9];
	nb[17] = q[4];
	nb[18] = q[0];
	nb[19] = q[10];
	nb[20] = q[4];
	nb[21] = q[10];
	nb[22] = q[0];
	nb[23] = q[3];
	nb[24] = q[10];
	nb[25] = q[7];
	nb[26] = q[7];
	res[0] = q[6];
	res[1] = q[0];
	// Leaf function
	_computeModule(0, 15, 50, 26, 0, 3, 0);
	acquire(15, anc, 27, nb);
	Recompute (res, 0, anc, 15, 50, 26){
		CNOT( anc[10], q[7] );
		CNOT( anc[0], anc[10] );
		CNOT( q[10], q[7] );
		Toffoli( q[0], q[3], anc[13] );
		CNOT( q[4], q[10] );
		Toffoli( anc[13], anc[4], anc[7] );
		CNOT( anc[4], anc[8] );
		Toffoli( anc[10], q[10], anc[2] );
		Toffoli( anc[3], anc[4], q[0] );
		CNOT( anc[4], q[4] );
		CNOT( anc[6], anc[8] );
		Toffoli( q[9], anc[14], anc[4] );
		Toffoli( anc[14], anc[11], anc[12] );
		Toffoli( q[0], q[10], anc[11] );
		Toffoli( q[2], anc[1], q[1] );
		CNOT( q[4], q[2] );
		Toffoli( anc[5], q[8], anc[11] );
		Toffoli( q[5], anc[5], q[10] );
		CNOT( anc[4], q[3] );
		CNOT( anc[2], q[0] );
		Toffoli( q[5], anc[5], q[2] );
		Toffoli( anc[6], anc[11], anc[1] );
		CNOT( anc[8], q[0] );
		CNOT( q[9], q[6] );
	}
	Restore {
		CNOT( q[5], res[0] );
		CNOT( anc[2], res[1] );
	}
	Unrecompute {
		CNOT( q[9], q[6] );
		CNOT( anc[8], q[0] );
		Toffoli( anc[6], anc[11], anc[1] );
		Toffoli( q[5], anc[5], q[2] );
		CNOT( anc[2], q[0] );
		CNOT( anc[4], q[3] );
		Toffoli( q[5], anc[5], q[10] );
		Toffoli( anc[5], q[8], anc[11] );
		CNOT( q[4], q[2] );
		Toffoli( q[2], anc[1], q[1] );
		Toffoli( q[0], q[10], anc[11] );
		Toffoli( anc[14], anc[11], anc[12] );
		Toffoli( q[9], anc[14], anc[4] );
		CNOT( anc[6], anc[8] );
		CNOT( anc[4], q[4] );
		Toffoli( anc[3], anc[4], q[0] );
		Toffoli( anc[10], q[10], anc[2] );
		CNOT( anc[4], anc[8] );
		Toffoli( anc[13], anc[4], anc[7] );
		CNOT( q[4], q[10] );
		Toffoli( q[0], q[3], anc[13] );
		CNOT( q[10], q[7] );
		CNOT( anc[0], anc[10] );
		CNOT( anc[10], q[7] );
	} Refree(anc, 15) {}
}
// Function 40 with degree 0
// nq: 11, na: 16, ng: 40
void func40(qbit **q, int n) {
printf("func40\n");
fflush(stderr);
	qbit *anc[16]; // ancilla
	qbit *nb[40]; // interacting bits
	qbit *res[11];
	nb[0] = q[9];
	nb[1] = q[8];
	nb[2] = q[2];
	nb[3] = q[3];
	nb[4] = q[4];
	nb[5] = q[1];
	nb[6] = q[8];
	nb[7] = q[1];
	nb[8] = q[10];
	nb[9] = q[6];
	nb[10] = q[9];
	nb[11] = q[2];
	nb[12] = q[8];
	nb[13] = q[9];
	nb[14] = q[7];
	nb[15] = q[10];
	nb[16] = q[5];
	nb[17] = q[7];
	nb[18] = q[10];
	nb[19] = q[7];
	nb[20] = q[2];
	nb[21] = q[3];
	nb[22] = q[1];
	nb[23] = q[6];
	nb[24] = q[10];
	nb[25] = q[8];
	nb[26] = q[9];
	nb[27] = q[5];
	nb[28] = q[0];
	nb[29] = q[2];
	nb[30] = q[6];
	nb[31] = q[4];
	nb[32] = q[1];
	nb[33] = q[10];
	nb[34] = q[6];
	nb[35] = q[9];
	nb[36] = q[1];
	nb[37] = q[1];
	nb[38] = q[5];
	nb[39] = q[4];
	res[0] = q[0];
	res[1] = q[4];
	res[2] = q[6];
	res[3] = q[10];
	res[4] = q[3];
	res[5] = q[9];
	res[6] = q[7];
	res[7] = q[8];
	res[8] = q[2];
	res[9] = q[5];
	res[10] = q[1];
	// Leaf function
	Compute (0, 16, 91, 51, 0, 3, 0) {
		acquire(16, anc, 40, nb);
		Toffoli( q[9], anc[8], anc[11] );
		Toffoli( anc[7], anc[11], anc[1] );
		Toffoli( anc[9], anc[4], anc[11] );
		Toffoli( anc[8], q[8], anc[10] );
		Toffoli( anc[6], anc[12], q[2] );
		CNOT( anc[7], anc[5] );
		Toffoli( q[3], q[4], q[1] );
		CNOT( q[8], anc[5] );
		CNOT( anc[14], q[1] );
		CNOT( anc[12], anc[7] );
		Toffoli( q[10], q[6], anc[6] );
		Toffoli( anc[15], anc[4], q[9] );
		CNOT( anc[5], anc[8] );
		CNOT( q[2], anc[4] );
		CNOT( anc[0], anc[13] );
		CNOT( q[8], anc[9] );
		Toffoli( anc[0], q[9], anc[1] );
		Toffoli( anc[0], q[7], anc[11] );
		Toffoli( anc[0], q[10], q[5] );
		Toffoli( anc[12], anc[2], anc[9] );
		CNOT( anc[0], anc[3] );
		Toffoli( q[7], anc[0], q[10] );
		Toffoli( anc[15], anc[2], anc[1] );
		Toffoli( anc[15], anc[0], anc[4] );
		Toffoli( anc[0], anc[4], q[7] );
		Toffoli( anc[12], q[2], anc[15] );
		Toffoli( anc[8], anc[14], q[3] );
		CNOT( q[1], anc[6] );
		Toffoli( q[6], q[10], q[8] );
		CNOT( anc[5], q[9] );
		CNOT( q[5], anc[5] );
		CNOT( q[0], q[2] );
		CNOT( q[6], anc[15] );
		Toffoli( anc[9], anc[4], q[4] );
		Toffoli( anc[11], q[1], q[10] );
		Toffoli( anc[3], anc[1], q[6] );
		CNOT( anc[10], anc[0] );
		Toffoli( q[9], anc[11], anc[8] );
		Toffoli( anc[4], q[1], anc[8] );
		Toffoli( q[1], q[5], q[4] );
	}
	Store {
		CNOT( q[8], res[0] );
		CNOT( anc[12], res[1] );
		CNOT( q[7], res[2] );
		CNOT( q[2], res[3] );
		CNOT( q[6], res[4] );
		CNOT( anc[2], res[5] );
		CNOT( anc[11], res[6] );
		CNOT( q[5], res[7] );
		CNOT( q[0], res[8] );
		CNOT( q[9], res[9] );
		CNOT( anc[5], res[10] );
	}
	Uncompute(res, 0, anc, 16, 91, 51){
		Toffoli( q[1], q[5], q[4] );
		Toffoli( anc[4], q[1], anc[8] );
		Toffoli( q[9], anc[11], anc[8] );
		CNOT( anc[10], anc[0] );
		Toffoli( anc[3], anc[1], q[6] );
		Toffoli( anc[11], q[1], q[10] );
		Toffoli( anc[9], anc[4], q[4] );
		CNOT( q[6], anc[15] );
		CNOT( q[0], q[2] );
		CNOT( q[5], anc[5] );
		CNOT( anc[5], q[9] );
		Toffoli( q[6], q[10], q[8] );
		CNOT( q[1], anc[6] );
		Toffoli( anc[8], anc[14], q[3] );
		Toffoli( anc[12], q[2], anc[15] );
		Toffoli( anc[0], anc[4], q[7] );
		Toffoli( anc[15], anc[0], anc[4] );
		Toffoli( anc[15], anc[2], anc[1] );
		Toffoli( q[7], anc[0], q[10] );
		CNOT( anc[0], anc[3] );
		Toffoli( anc[12], anc[2], anc[9] );
		Toffoli( anc[0], q[10], q[5] );
		Toffoli( anc[0], q[7], anc[11] );
		Toffoli( anc[0], q[9], anc[1] );
		CNOT( q[8], anc[9] );
		CNOT( anc[0], anc[13] );
		CNOT( q[2], anc[4] );
		CNOT( anc[5], anc[8] );
		Toffoli( anc[15], anc[4], q[9] );
		Toffoli( q[10], q[6], anc[6] );
		CNOT( anc[12], anc[7] );
		CNOT( anc[14], q[1] );
		CNOT( q[8], anc[5] );
		Toffoli( q[3], q[4], q[1] );
		CNOT( anc[7], anc[5] );
		Toffoli( anc[6], anc[12], q[2] );
		Toffoli( anc[8], q[8], anc[10] );
		Toffoli( anc[9], anc[4], anc[11] );
		Toffoli( anc[7], anc[11], anc[1] );
		Toffoli( q[9], anc[8], anc[11] );
	} Free(anc, 16) {}
}
// Function 40 with degree 0
// nq: 11, na: 16, ng: 40
void func40R(qbit **q, int n) {
printf("func40R\n");
fflush(stderr);
	qbit *anc[16]; // ancilla
	qbit *nb[40]; // interacting bits
	qbit *res[11];
	nb[0] = q[9];
	nb[1] = q[8];
	nb[2] = q[2];
	nb[3] = q[3];
	nb[4] = q[4];
	nb[5] = q[1];
	nb[6] = q[8];
	nb[7] = q[1];
	nb[8] = q[10];
	nb[9] = q[6];
	nb[10] = q[9];
	nb[11] = q[2];
	nb[12] = q[8];
	nb[13] = q[9];
	nb[14] = q[7];
	nb[15] = q[10];
	nb[16] = q[5];
	nb[17] = q[7];
	nb[18] = q[10];
	nb[19] = q[7];
	nb[20] = q[2];
	nb[21] = q[3];
	nb[22] = q[1];
	nb[23] = q[6];
	nb[24] = q[10];
	nb[25] = q[8];
	nb[26] = q[9];
	nb[27] = q[5];
	nb[28] = q[0];
	nb[29] = q[2];
	nb[30] = q[6];
	nb[31] = q[4];
	nb[32] = q[1];
	nb[33] = q[10];
	nb[34] = q[6];
	nb[35] = q[9];
	nb[36] = q[1];
	nb[37] = q[1];
	nb[38] = q[5];
	nb[39] = q[4];
	res[0] = q[0];
	res[1] = q[4];
	res[2] = q[6];
	res[3] = q[10];
	res[4] = q[3];
	res[5] = q[9];
	res[6] = q[7];
	res[7] = q[8];
	res[8] = q[2];
	res[9] = q[5];
	res[10] = q[1];
	// Leaf function
	_computeModule(0, 16, 91, 51, 0, 3, 0);
	acquire(16, anc, 40, nb);
	Recompute (res, 0, anc, 16, 91, 51){
		Toffoli( q[1], q[5], q[4] );
		Toffoli( anc[4], q[1], anc[8] );
		Toffoli( q[9], anc[11], anc[8] );
		CNOT( anc[10], anc[0] );
		Toffoli( anc[3], anc[1], q[6] );
		Toffoli( anc[11], q[1], q[10] );
		Toffoli( anc[9], anc[4], q[4] );
		CNOT( q[6], anc[15] );
		CNOT( q[0], q[2] );
		CNOT( q[5], anc[5] );
		CNOT( anc[5], q[9] );
		Toffoli( q[6], q[10], q[8] );
		CNOT( q[1], anc[6] );
		Toffoli( anc[8], anc[14], q[3] );
		Toffoli( anc[12], q[2], anc[15] );
		Toffoli( anc[0], anc[4], q[7] );
		Toffoli( anc[15], anc[0], anc[4] );
		Toffoli( anc[15], anc[2], anc[1] );
		Toffoli( q[7], anc[0], q[10] );
		CNOT( anc[0], anc[3] );
		Toffoli( anc[12], anc[2], anc[9] );
		Toffoli( anc[0], q[10], q[5] );
		Toffoli( anc[0], q[7], anc[11] );
		Toffoli( anc[0], q[9], anc[1] );
		CNOT( q[8], anc[9] );
		CNOT( anc[0], anc[13] );
		CNOT( q[2], anc[4] );
		CNOT( anc[5], anc[8] );
		Toffoli( anc[15], anc[4], q[9] );
		Toffoli( q[10], q[6], anc[6] );
		CNOT( anc[12], anc[7] );
		CNOT( anc[14], q[1] );
		CNOT( q[8], anc[5] );
		Toffoli( q[3], q[4], q[1] );
		CNOT( anc[7], anc[5] );
		Toffoli( anc[6], anc[12], q[2] );
		Toffoli( anc[8], q[8], anc[10] );
		Toffoli( anc[9], anc[4], anc[11] );
		Toffoli( anc[7], anc[11], anc[1] );
		Toffoli( q[9], anc[8], anc[11] );
	}
	Restore {
		CNOT( q[8], res[0] );
		CNOT( anc[12], res[1] );
		CNOT( q[7], res[2] );
		CNOT( q[2], res[3] );
		CNOT( q[6], res[4] );
		CNOT( anc[2], res[5] );
		CNOT( anc[11], res[6] );
		CNOT( q[5], res[7] );
		CNOT( q[0], res[8] );
		CNOT( q[9], res[9] );
		CNOT( anc[5], res[10] );
	}
	Unrecompute {
		Toffoli( q[9], anc[8], anc[11] );
		Toffoli( anc[7], anc[11], anc[1] );
		Toffoli( anc[9], anc[4], anc[11] );
		Toffoli( anc[8], q[8], anc[10] );
		Toffoli( anc[6], anc[12], q[2] );
		CNOT( anc[7], anc[5] );
		Toffoli( q[3], q[4], q[1] );
		CNOT( q[8], anc[5] );
		CNOT( anc[14], q[1] );
		CNOT( anc[12], anc[7] );
		Toffoli( q[10], q[6], anc[6] );
		Toffoli( anc[15], anc[4], q[9] );
		CNOT( anc[5], anc[8] );
		CNOT( q[2], anc[4] );
		CNOT( anc[0], anc[13] );
		CNOT( q[8], anc[9] );
		Toffoli( anc[0], q[9], anc[1] );
		Toffoli( anc[0], q[7], anc[11] );
		Toffoli( anc[0], q[10], q[5] );
		Toffoli( anc[12], anc[2], anc[9] );
		CNOT( anc[0], anc[3] );
		Toffoli( q[7], anc[0], q[10] );
		Toffoli( anc[15], anc[2], anc[1] );
		Toffoli( anc[15], anc[0], anc[4] );
		Toffoli( anc[0], anc[4], q[7] );
		Toffoli( anc[12], q[2], anc[15] );
		Toffoli( anc[8], anc[14], q[3] );
		CNOT( q[1], anc[6] );
		Toffoli( q[6], q[10], q[8] );
		CNOT( anc[5], q[9] );
		CNOT( q[5], anc[5] );
		CNOT( q[0], q[2] );
		CNOT( q[6], anc[15] );
		Toffoli( anc[9], anc[4], q[4] );
		Toffoli( anc[11], q[1], q[10] );
		Toffoli( anc[3], anc[1], q[6] );
		CNOT( anc[10], anc[0] );
		Toffoli( q[9], anc[11], anc[8] );
		Toffoli( anc[4], q[1], anc[8] );
		Toffoli( q[1], q[5], q[4] );
	} Refree(anc, 16) {}
}
// Function 39 with degree 0
// nq: 7, na: 16, ng: 50
void func39(qbit **q, int n) {
printf("func39\n");
fflush(stderr);
	qbit *anc[16]; // ancilla
	qbit *nb[31]; // interacting bits
	qbit *res[2];
	nb[0] = q[0];
	nb[1] = q[1];
	nb[2] = q[0];
	nb[3] = q[1];
	nb[4] = q[6];
	nb[5] = q[0];
	nb[6] = q[5];
	nb[7] = q[5];
	nb[8] = q[6];
	nb[9] = q[6];
	nb[10] = q[6];
	nb[11] = q[0];
	nb[12] = q[4];
	nb[13] = q[2];
	nb[14] = q[2];
	nb[15] = q[3];
	nb[16] = q[3];
	nb[17] = q[4];
	nb[18] = q[5];
	nb[19] = q[4];
	nb[20] = q[2];
	nb[21] = q[4];
	nb[22] = q[4];
	nb[23] = q[3];
	nb[24] = q[5];
	nb[25] = q[2];
	nb[26] = q[5];
	nb[27] = q[4];
	nb[28] = q[0];
	nb[29] = q[3];
	nb[30] = q[0];
	res[0] = q[2];
	res[1] = q[1];
	// Leaf function
	Compute (0, 16, 102, 52, 0, 1, 0) {
		acquire(16, anc, 31, nb);
		Toffoli( anc[6], anc[12], q[0] );
		CNOT( anc[0], anc[9] );
		Toffoli( q[1], anc[4], q[0] );
		Toffoli( q[1], anc[7], anc[4] );
		Toffoli( anc[10], anc[5], q[6] );
		CNOT( q[0], q[5] );
		Toffoli( q[5], anc[10], anc[5] );
		CNOT( anc[6], anc[10] );
		Toffoli( anc[14], anc[4], anc[0] );
		CNOT( anc[14], anc[7] );
		CNOT( anc[10], anc[15] );
		CNOT( q[6], anc[1] );
		Toffoli( q[6], anc[5], anc[9] );
		CNOT( anc[14], anc[8] );
		Toffoli( anc[2], q[6], q[0] );
		CNOT( q[4], anc[1] );
		Toffoli( anc[13], anc[3], q[2] );
		Toffoli( anc[14], anc[8], anc[11] );
		CNOT( anc[7], q[2] );
		CNOT( anc[13], q[3] );
		CNOT( anc[13], q[3] );
		Toffoli( anc[2], anc[11], anc[4] );
		CNOT( anc[13], q[4] );
		CNOT( anc[0], q[5] );
		CNOT( anc[0], anc[15] );
		CNOT( anc[8], anc[6] );
		Toffoli( anc[2], anc[7], anc[12] );
		Toffoli( anc[2], anc[14], anc[1] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[8], anc[6], anc[12] );
		Toffoli( anc[10], anc[3], anc[9] );
		CNOT( q[4], q[2] );
		CNOT( anc[13], anc[4] );
		Toffoli( anc[2], anc[13], q[4] );
		CNOT( q[4], q[3] );
		CNOT( anc[8], anc[12] );
		Toffoli( anc[1], anc[5], q[5] );
		Toffoli( anc[4], anc[9], anc[14] );
		CNOT( q[2], anc[15] );
		Toffoli( anc[5], anc[9], anc[13] );
		Toffoli( anc[2], anc[8], anc[7] );
		CNOT( q[5], anc[8] );
		Toffoli( anc[8], anc[6], anc[12] );
		Toffoli( anc[6], anc[10], anc[0] );
		Toffoli( q[4], anc[13], anc[9] );
		CNOT( q[0], anc[11] );
		Toffoli( anc[9], anc[2], q[3] );
		CNOT( q[0], anc[2] );
		Toffoli( anc[12], anc[0], anc[14] );
		CNOT( anc[13], anc[8] );
	}
	Store {
		CNOT( anc[3], res[0] );
		CNOT( q[2], res[1] );
	}
	Uncompute(res, 0, anc, 16, 102, 52){
		CNOT( anc[13], anc[8] );
		Toffoli( anc[12], anc[0], anc[14] );
		CNOT( q[0], anc[2] );
		Toffoli( anc[9], anc[2], q[3] );
		CNOT( q[0], anc[11] );
		Toffoli( q[4], anc[13], anc[9] );
		Toffoli( anc[6], anc[10], anc[0] );
		Toffoli( anc[8], anc[6], anc[12] );
		CNOT( q[5], anc[8] );
		Toffoli( anc[2], anc[8], anc[7] );
		Toffoli( anc[5], anc[9], anc[13] );
		CNOT( q[2], anc[15] );
		Toffoli( anc[4], anc[9], anc[14] );
		Toffoli( anc[1], anc[5], q[5] );
		CNOT( anc[8], anc[12] );
		CNOT( q[4], q[3] );
		Toffoli( anc[2], anc[13], q[4] );
		CNOT( anc[13], anc[4] );
		CNOT( q[4], q[2] );
		Toffoli( anc[10], anc[3], anc[9] );
		Toffoli( anc[8], anc[6], anc[12] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[2], anc[14], anc[1] );
		Toffoli( anc[2], anc[7], anc[12] );
		CNOT( anc[8], anc[6] );
		CNOT( anc[0], anc[15] );
		CNOT( anc[0], q[5] );
		CNOT( anc[13], q[4] );
		Toffoli( anc[2], anc[11], anc[4] );
		CNOT( anc[13], q[3] );
		CNOT( anc[13], q[3] );
		CNOT( anc[7], q[2] );
		Toffoli( anc[14], anc[8], anc[11] );
		Toffoli( anc[13], anc[3], q[2] );
		CNOT( q[4], anc[1] );
		Toffoli( anc[2], q[6], q[0] );
		CNOT( anc[14], anc[8] );
		Toffoli( q[6], anc[5], anc[9] );
		CNOT( q[6], anc[1] );
		CNOT( anc[10], anc[15] );
		CNOT( anc[14], anc[7] );
		Toffoli( anc[14], anc[4], anc[0] );
		CNOT( anc[6], anc[10] );
		Toffoli( q[5], anc[10], anc[5] );
		CNOT( q[0], q[5] );
		Toffoli( anc[10], anc[5], q[6] );
		Toffoli( q[1], anc[7], anc[4] );
		Toffoli( q[1], anc[4], q[0] );
		CNOT( anc[0], anc[9] );
		Toffoli( anc[6], anc[12], q[0] );
	} Free(anc, 16) {}
}
// Function 39 with degree 0
// nq: 7, na: 16, ng: 50
void func39R(qbit **q, int n) {
printf("func39R\n");
fflush(stderr);
	qbit *anc[16]; // ancilla
	qbit *nb[31]; // interacting bits
	qbit *res[2];
	nb[0] = q[0];
	nb[1] = q[1];
	nb[2] = q[0];
	nb[3] = q[1];
	nb[4] = q[6];
	nb[5] = q[0];
	nb[6] = q[5];
	nb[7] = q[5];
	nb[8] = q[6];
	nb[9] = q[6];
	nb[10] = q[6];
	nb[11] = q[0];
	nb[12] = q[4];
	nb[13] = q[2];
	nb[14] = q[2];
	nb[15] = q[3];
	nb[16] = q[3];
	nb[17] = q[4];
	nb[18] = q[5];
	nb[19] = q[4];
	nb[20] = q[2];
	nb[21] = q[4];
	nb[22] = q[4];
	nb[23] = q[3];
	nb[24] = q[5];
	nb[25] = q[2];
	nb[26] = q[5];
	nb[27] = q[4];
	nb[28] = q[0];
	nb[29] = q[3];
	nb[30] = q[0];
	res[0] = q[2];
	res[1] = q[1];
	// Leaf function
	_computeModule(0, 16, 102, 52, 0, 1, 0);
	acquire(16, anc, 31, nb);
	Recompute (res, 0, anc, 16, 102, 52){
		CNOT( anc[13], anc[8] );
		Toffoli( anc[12], anc[0], anc[14] );
		CNOT( q[0], anc[2] );
		Toffoli( anc[9], anc[2], q[3] );
		CNOT( q[0], anc[11] );
		Toffoli( q[4], anc[13], anc[9] );
		Toffoli( anc[6], anc[10], anc[0] );
		Toffoli( anc[8], anc[6], anc[12] );
		CNOT( q[5], anc[8] );
		Toffoli( anc[2], anc[8], anc[7] );
		Toffoli( anc[5], anc[9], anc[13] );
		CNOT( q[2], anc[15] );
		Toffoli( anc[4], anc[9], anc[14] );
		Toffoli( anc[1], anc[5], q[5] );
		CNOT( anc[8], anc[12] );
		CNOT( q[4], q[3] );
		Toffoli( anc[2], anc[13], q[4] );
		CNOT( anc[13], anc[4] );
		CNOT( q[4], q[2] );
		Toffoli( anc[10], anc[3], anc[9] );
		Toffoli( anc[8], anc[6], anc[12] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[2], anc[14], anc[1] );
		Toffoli( anc[2], anc[7], anc[12] );
		CNOT( anc[8], anc[6] );
		CNOT( anc[0], anc[15] );
		CNOT( anc[0], q[5] );
		CNOT( anc[13], q[4] );
		Toffoli( anc[2], anc[11], anc[4] );
		CNOT( anc[13], q[3] );
		CNOT( anc[13], q[3] );
		CNOT( anc[7], q[2] );
		Toffoli( anc[14], anc[8], anc[11] );
		Toffoli( anc[13], anc[3], q[2] );
		CNOT( q[4], anc[1] );
		Toffoli( anc[2], q[6], q[0] );
		CNOT( anc[14], anc[8] );
		Toffoli( q[6], anc[5], anc[9] );
		CNOT( q[6], anc[1] );
		CNOT( anc[10], anc[15] );
		CNOT( anc[14], anc[7] );
		Toffoli( anc[14], anc[4], anc[0] );
		CNOT( anc[6], anc[10] );
		Toffoli( q[5], anc[10], anc[5] );
		CNOT( q[0], q[5] );
		Toffoli( anc[10], anc[5], q[6] );
		Toffoli( q[1], anc[7], anc[4] );
		Toffoli( q[1], anc[4], q[0] );
		CNOT( anc[0], anc[9] );
		Toffoli( anc[6], anc[12], q[0] );
	}
	Restore {
		CNOT( anc[3], res[0] );
		CNOT( q[2], res[1] );
	}
	Unrecompute {
		Toffoli( anc[6], anc[12], q[0] );
		CNOT( anc[0], anc[9] );
		Toffoli( q[1], anc[4], q[0] );
		Toffoli( q[1], anc[7], anc[4] );
		Toffoli( anc[10], anc[5], q[6] );
		CNOT( q[0], q[5] );
		Toffoli( q[5], anc[10], anc[5] );
		CNOT( anc[6], anc[10] );
		Toffoli( anc[14], anc[4], anc[0] );
		CNOT( anc[14], anc[7] );
		CNOT( anc[10], anc[15] );
		CNOT( q[6], anc[1] );
		Toffoli( q[6], anc[5], anc[9] );
		CNOT( anc[14], anc[8] );
		Toffoli( anc[2], q[6], q[0] );
		CNOT( q[4], anc[1] );
		Toffoli( anc[13], anc[3], q[2] );
		Toffoli( anc[14], anc[8], anc[11] );
		CNOT( anc[7], q[2] );
		CNOT( anc[13], q[3] );
		CNOT( anc[13], q[3] );
		Toffoli( anc[2], anc[11], anc[4] );
		CNOT( anc[13], q[4] );
		CNOT( anc[0], q[5] );
		CNOT( anc[0], anc[15] );
		CNOT( anc[8], anc[6] );
		Toffoli( anc[2], anc[7], anc[12] );
		Toffoli( anc[2], anc[14], anc[1] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[8], anc[6], anc[12] );
		Toffoli( anc[10], anc[3], anc[9] );
		CNOT( q[4], q[2] );
		CNOT( anc[13], anc[4] );
		Toffoli( anc[2], anc[13], q[4] );
		CNOT( q[4], q[3] );
		CNOT( anc[8], anc[12] );
		Toffoli( anc[1], anc[5], q[5] );
		Toffoli( anc[4], anc[9], anc[14] );
		CNOT( q[2], anc[15] );
		Toffoli( anc[5], anc[9], anc[13] );
		Toffoli( anc[2], anc[8], anc[7] );
		CNOT( q[5], anc[8] );
		Toffoli( anc[8], anc[6], anc[12] );
		Toffoli( anc[6], anc[10], anc[0] );
		Toffoli( q[4], anc[13], anc[9] );
		CNOT( q[0], anc[11] );
		Toffoli( anc[9], anc[2], q[3] );
		CNOT( q[0], anc[2] );
		Toffoli( anc[12], anc[0], anc[14] );
		CNOT( anc[13], anc[8] );
	} Refree(anc, 16) {}
}
// Function 38 with degree 0
// nq: 4, na: 1, ng: 40
void func38(qbit **q, int n) {
printf("func38\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[78]; // interacting bits
	qbit *res[2];
	nb[0] = q[1];
	nb[1] = q[3];
	nb[2] = q[2];
	nb[3] = q[3];
	nb[4] = q[2];
	nb[5] = q[3];
	nb[6] = q[3];
	nb[7] = q[1];
	nb[8] = q[2];
	nb[9] = q[0];
	nb[10] = q[2];
	nb[11] = q[3];
	nb[12] = q[2];
	nb[13] = q[3];
	nb[14] = q[1];
	nb[15] = q[1];
	nb[16] = q[0];
	nb[17] = q[0];
	nb[18] = q[1];
	nb[19] = q[1];
	nb[20] = q[3];
	nb[21] = q[0];
	nb[22] = q[0];
	nb[23] = q[2];
	nb[24] = q[3];
	nb[25] = q[2];
	nb[26] = q[3];
	nb[27] = q[1];
	nb[28] = q[1];
	nb[29] = q[2];
	nb[30] = q[2];
	nb[31] = q[1];
	nb[32] = q[3];
	nb[33] = q[0];
	nb[34] = q[2];
	nb[35] = q[3];
	nb[36] = q[1];
	nb[37] = q[0];
	nb[38] = q[3];
	nb[39] = q[0];
	nb[40] = q[3];
	nb[41] = q[1];
	nb[42] = q[3];
	nb[43] = q[1];
	nb[44] = q[1];
	nb[45] = q[2];
	nb[46] = q[0];
	nb[47] = q[3];
	nb[48] = q[1];
	nb[49] = q[3];
	nb[50] = q[1];
	nb[51] = q[0];
	nb[52] = q[0];
	nb[53] = q[1];
	nb[54] = q[0];
	nb[55] = q[3];
	nb[56] = q[0];
	nb[57] = q[2];
	nb[58] = q[2];
	nb[59] = q[3];
	nb[60] = q[0];
	nb[61] = q[2];
	nb[62] = q[1];
	nb[63] = q[0];
	nb[64] = q[2];
	nb[65] = q[1];
	nb[66] = q[3];
	nb[67] = q[0];
	nb[68] = q[1];
	nb[69] = q[2];
	nb[70] = q[0];
	nb[71] = q[0];
	nb[72] = q[2];
	nb[73] = q[1];
	nb[74] = q[3];
	nb[75] = q[0];
	nb[76] = q[1];
	nb[77] = q[3];
	res[0] = q[3];
	res[1] = q[0];
	// Leaf function
	Compute (0, 1, 82, 42, 0, 2, 0) {
		acquire(1, anc, 78, nb);
		Toffoli( q[1], anc[0], q[3] );
		Toffoli( q[2], q[3], anc[0] );
		CNOT( q[2], q[3] );
		CNOT( anc[0], q[3] );
		CNOT( q[1], q[2] );
		Toffoli( q[0], q[2], anc[0] );
		CNOT( q[3], anc[0] );
		Toffoli( q[2], q[3], q[1] );
		Toffoli( q[1], q[0], anc[0] );
		CNOT( q[0], q[1] );
		Toffoli( q[1], q[3], q[0] );
		Toffoli( q[0], q[2], q[3] );
		CNOT( q[2], anc[0] );
		Toffoli( q[3], q[1], anc[0] );
		Toffoli( q[1], anc[0], q[2] );
		CNOT( q[2], q[1] );
		CNOT( anc[0], q[3] );
		CNOT( anc[0], q[0] );
		Toffoli( anc[0], q[2], q[3] );
		Toffoli( q[1], anc[0], q[0] );
		CNOT( q[3], anc[0] );
		Toffoli( q[0], q[3], q[1] );
		Toffoli( anc[0], q[3], q[1] );
		Toffoli( q[1], q[2], q[0] );
		Toffoli( q[3], q[1], anc[0] );
		Toffoli( q[3], anc[0], q[1] );
		CNOT( anc[0], q[0] );
		CNOT( anc[0], q[0] );
		CNOT( q[1], anc[0] );
		Toffoli( anc[0], q[0], q[3] );
		Toffoli( q[0], q[2], anc[0] );
		CNOT( q[2], anc[0] );
		Toffoli( q[3], q[0], q[2] );
		Toffoli( q[1], q[0], anc[0] );
		Toffoli( q[2], q[1], q[3] );
		CNOT( q[0], q[1] );
		CNOT( q[2], q[0] );
		Toffoli( q[0], q[2], q[1] );
		Toffoli( anc[0], q[3], q[0] );
		Toffoli( q[1], q[3], anc[0] );
	}
	Store {
		CNOT( q[2], res[0] );
		CNOT( anc[0], res[1] );
	}
	Uncompute(res, 0, anc, 1, 82, 42){
		Toffoli( q[1], q[3], anc[0] );
		Toffoli( anc[0], q[3], q[0] );
		Toffoli( q[0], q[2], q[1] );
		CNOT( q[2], q[0] );
		CNOT( q[0], q[1] );
		Toffoli( q[2], q[1], q[3] );
		Toffoli( q[1], q[0], anc[0] );
		Toffoli( q[3], q[0], q[2] );
		CNOT( q[2], anc[0] );
		Toffoli( q[0], q[2], anc[0] );
		Toffoli( anc[0], q[0], q[3] );
		CNOT( q[1], anc[0] );
		CNOT( anc[0], q[0] );
		CNOT( anc[0], q[0] );
		Toffoli( q[3], anc[0], q[1] );
		Toffoli( q[3], q[1], anc[0] );
		Toffoli( q[1], q[2], q[0] );
		Toffoli( anc[0], q[3], q[1] );
		Toffoli( q[0], q[3], q[1] );
		CNOT( q[3], anc[0] );
		Toffoli( q[1], anc[0], q[0] );
		Toffoli( anc[0], q[2], q[3] );
		CNOT( anc[0], q[0] );
		CNOT( anc[0], q[3] );
		CNOT( q[2], q[1] );
		Toffoli( q[1], anc[0], q[2] );
		Toffoli( q[3], q[1], anc[0] );
		CNOT( q[2], anc[0] );
		Toffoli( q[0], q[2], q[3] );
		Toffoli( q[1], q[3], q[0] );
		CNOT( q[0], q[1] );
		Toffoli( q[1], q[0], anc[0] );
		Toffoli( q[2], q[3], q[1] );
		CNOT( q[3], anc[0] );
		Toffoli( q[0], q[2], anc[0] );
		CNOT( q[1], q[2] );
		CNOT( anc[0], q[3] );
		CNOT( q[2], q[3] );
		Toffoli( q[2], q[3], anc[0] );
		Toffoli( q[1], anc[0], q[3] );
	} Free(anc, 1) {}
}
// Function 38 with degree 0
// nq: 4, na: 1, ng: 40
void func38R(qbit **q, int n) {
printf("func38R\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[78]; // interacting bits
	qbit *res[2];
	nb[0] = q[1];
	nb[1] = q[3];
	nb[2] = q[2];
	nb[3] = q[3];
	nb[4] = q[2];
	nb[5] = q[3];
	nb[6] = q[3];
	nb[7] = q[1];
	nb[8] = q[2];
	nb[9] = q[0];
	nb[10] = q[2];
	nb[11] = q[3];
	nb[12] = q[2];
	nb[13] = q[3];
	nb[14] = q[1];
	nb[15] = q[1];
	nb[16] = q[0];
	nb[17] = q[0];
	nb[18] = q[1];
	nb[19] = q[1];
	nb[20] = q[3];
	nb[21] = q[0];
	nb[22] = q[0];
	nb[23] = q[2];
	nb[24] = q[3];
	nb[25] = q[2];
	nb[26] = q[3];
	nb[27] = q[1];
	nb[28] = q[1];
	nb[29] = q[2];
	nb[30] = q[2];
	nb[31] = q[1];
	nb[32] = q[3];
	nb[33] = q[0];
	nb[34] = q[2];
	nb[35] = q[3];
	nb[36] = q[1];
	nb[37] = q[0];
	nb[38] = q[3];
	nb[39] = q[0];
	nb[40] = q[3];
	nb[41] = q[1];
	nb[42] = q[3];
	nb[43] = q[1];
	nb[44] = q[1];
	nb[45] = q[2];
	nb[46] = q[0];
	nb[47] = q[3];
	nb[48] = q[1];
	nb[49] = q[3];
	nb[50] = q[1];
	nb[51] = q[0];
	nb[52] = q[0];
	nb[53] = q[1];
	nb[54] = q[0];
	nb[55] = q[3];
	nb[56] = q[0];
	nb[57] = q[2];
	nb[58] = q[2];
	nb[59] = q[3];
	nb[60] = q[0];
	nb[61] = q[2];
	nb[62] = q[1];
	nb[63] = q[0];
	nb[64] = q[2];
	nb[65] = q[1];
	nb[66] = q[3];
	nb[67] = q[0];
	nb[68] = q[1];
	nb[69] = q[2];
	nb[70] = q[0];
	nb[71] = q[0];
	nb[72] = q[2];
	nb[73] = q[1];
	nb[74] = q[3];
	nb[75] = q[0];
	nb[76] = q[1];
	nb[77] = q[3];
	res[0] = q[3];
	res[1] = q[0];
	// Leaf function
	_computeModule(0, 1, 82, 42, 0, 2, 0);
	acquire(1, anc, 78, nb);
	Recompute (res, 0, anc, 1, 82, 42){
		Toffoli( q[1], q[3], anc[0] );
		Toffoli( anc[0], q[3], q[0] );
		Toffoli( q[0], q[2], q[1] );
		CNOT( q[2], q[0] );
		CNOT( q[0], q[1] );
		Toffoli( q[2], q[1], q[3] );
		Toffoli( q[1], q[0], anc[0] );
		Toffoli( q[3], q[0], q[2] );
		CNOT( q[2], anc[0] );
		Toffoli( q[0], q[2], anc[0] );
		Toffoli( anc[0], q[0], q[3] );
		CNOT( q[1], anc[0] );
		CNOT( anc[0], q[0] );
		CNOT( anc[0], q[0] );
		Toffoli( q[3], anc[0], q[1] );
		Toffoli( q[3], q[1], anc[0] );
		Toffoli( q[1], q[2], q[0] );
		Toffoli( anc[0], q[3], q[1] );
		Toffoli( q[0], q[3], q[1] );
		CNOT( q[3], anc[0] );
		Toffoli( q[1], anc[0], q[0] );
		Toffoli( anc[0], q[2], q[3] );
		CNOT( anc[0], q[0] );
		CNOT( anc[0], q[3] );
		CNOT( q[2], q[1] );
		Toffoli( q[1], anc[0], q[2] );
		Toffoli( q[3], q[1], anc[0] );
		CNOT( q[2], anc[0] );
		Toffoli( q[0], q[2], q[3] );
		Toffoli( q[1], q[3], q[0] );
		CNOT( q[0], q[1] );
		Toffoli( q[1], q[0], anc[0] );
		Toffoli( q[2], q[3], q[1] );
		CNOT( q[3], anc[0] );
		Toffoli( q[0], q[2], anc[0] );
		CNOT( q[1], q[2] );
		CNOT( anc[0], q[3] );
		CNOT( q[2], q[3] );
		Toffoli( q[2], q[3], anc[0] );
		Toffoli( q[1], anc[0], q[3] );
	}
	Restore {
		CNOT( q[2], res[0] );
		CNOT( anc[0], res[1] );
	}
	Unrecompute {
		Toffoli( q[1], anc[0], q[3] );
		Toffoli( q[2], q[3], anc[0] );
		CNOT( q[2], q[3] );
		CNOT( anc[0], q[3] );
		CNOT( q[1], q[2] );
		Toffoli( q[0], q[2], anc[0] );
		CNOT( q[3], anc[0] );
		Toffoli( q[2], q[3], q[1] );
		Toffoli( q[1], q[0], anc[0] );
		CNOT( q[0], q[1] );
		Toffoli( q[1], q[3], q[0] );
		Toffoli( q[0], q[2], q[3] );
		CNOT( q[2], anc[0] );
		Toffoli( q[3], q[1], anc[0] );
		Toffoli( q[1], anc[0], q[2] );
		CNOT( q[2], q[1] );
		CNOT( anc[0], q[3] );
		CNOT( anc[0], q[0] );
		Toffoli( anc[0], q[2], q[3] );
		Toffoli( q[1], anc[0], q[0] );
		CNOT( q[3], anc[0] );
		Toffoli( q[0], q[3], q[1] );
		Toffoli( anc[0], q[3], q[1] );
		Toffoli( q[1], q[2], q[0] );
		Toffoli( q[3], q[1], anc[0] );
		Toffoli( q[3], anc[0], q[1] );
		CNOT( anc[0], q[0] );
		CNOT( anc[0], q[0] );
		CNOT( q[1], anc[0] );
		Toffoli( anc[0], q[0], q[3] );
		Toffoli( q[0], q[2], anc[0] );
		CNOT( q[2], anc[0] );
		Toffoli( q[3], q[0], q[2] );
		Toffoli( q[1], q[0], anc[0] );
		Toffoli( q[2], q[1], q[3] );
		CNOT( q[0], q[1] );
		CNOT( q[2], q[0] );
		Toffoli( q[0], q[2], q[1] );
		Toffoli( anc[0], q[3], q[0] );
		Toffoli( q[1], q[3], anc[0] );
	} Refree(anc, 1) {}
}
// Function 37 with degree 0
// nq: 6, na: 11, ng: 35
void func37(qbit **q, int n) {
printf("func37\n");
fflush(stderr);
	qbit *anc[11]; // ancilla
	qbit *nb[25]; // interacting bits
	qbit *res[4];
	nb[0] = q[1];
	nb[1] = q[4];
	nb[2] = q[5];
	nb[3] = q[0];
	nb[4] = q[2];
	nb[5] = q[1];
	nb[6] = q[5];
	nb[7] = q[3];
	nb[8] = q[0];
	nb[9] = q[2];
	nb[10] = q[4];
	nb[11] = q[0];
	nb[12] = q[3];
	nb[13] = q[4];
	nb[14] = q[5];
	nb[15] = q[4];
	nb[16] = q[5];
	nb[17] = q[5];
	nb[18] = q[4];
	nb[19] = q[1];
	nb[20] = q[1];
	nb[21] = q[0];
	nb[22] = q[3];
	nb[23] = q[2];
	nb[24] = q[1];
	res[0] = q[4];
	res[1] = q[2];
	res[2] = q[3];
	res[3] = q[5];
	// Leaf function
	Compute (0, 11, 74, 39, 0, 2, 0) {
		acquire(11, anc, 25, nb);
		CNOT( anc[7], anc[1] );
		Toffoli( anc[6], anc[0], anc[5] );
		CNOT( q[1], anc[10] );
		CNOT( q[4], anc[0] );
		Toffoli( q[5], anc[2], anc[1] );
		CNOT( anc[10], anc[4] );
		Toffoli( anc[8], anc[3], anc[6] );
		CNOT( anc[10], anc[0] );
		Toffoli( q[0], anc[0], anc[2] );
		CNOT( q[2], anc[2] );
		Toffoli( anc[10], q[1], anc[3] );
		CNOT( anc[6], anc[9] );
		CNOT( anc[6], anc[0] );
		Toffoli( anc[2], anc[0], anc[9] );
		CNOT( q[5], q[3] );
		CNOT( anc[9], anc[3] );
		CNOT( q[0], anc[6] );
		CNOT( q[2], anc[3] );
		CNOT( anc[8], q[4] );
		Toffoli( anc[10], anc[0], anc[1] );
		Toffoli( anc[8], q[0], anc[1] );
		CNOT( anc[1], anc[9] );
		Toffoli( anc[3], q[3], anc[0] );
		CNOT( anc[5], q[4] );
		Toffoli( anc[5], q[5], anc[7] );
		CNOT( anc[3], q[4] );
		CNOT( q[5], anc[1] );
		CNOT( q[5], anc[5] );
		CNOT( anc[2], anc[10] );
		CNOT( q[4], q[1] );
		Toffoli( q[1], anc[10], q[0] );
		Toffoli( anc[1], anc[0], anc[2] );
		Toffoli( anc[9], q[3], anc[10] );
		CNOT( anc[10], q[2] );
		CNOT( q[1], anc[10] );
	}
	Store {
		CNOT( anc[0], res[0] );
		CNOT( anc[2], res[1] );
		CNOT( anc[5], res[2] );
		CNOT( q[4], res[3] );
	}
	Uncompute(res, 0, anc, 11, 74, 39){
		CNOT( q[1], anc[10] );
		CNOT( anc[10], q[2] );
		Toffoli( anc[9], q[3], anc[10] );
		Toffoli( anc[1], anc[0], anc[2] );
		Toffoli( q[1], anc[10], q[0] );
		CNOT( q[4], q[1] );
		CNOT( anc[2], anc[10] );
		CNOT( q[5], anc[5] );
		CNOT( q[5], anc[1] );
		CNOT( anc[3], q[4] );
		Toffoli( anc[5], q[5], anc[7] );
		CNOT( anc[5], q[4] );
		Toffoli( anc[3], q[3], anc[0] );
		CNOT( anc[1], anc[9] );
		Toffoli( anc[8], q[0], anc[1] );
		Toffoli( anc[10], anc[0], anc[1] );
		CNOT( anc[8], q[4] );
		CNOT( q[2], anc[3] );
		CNOT( q[0], anc[6] );
		CNOT( anc[9], anc[3] );
		CNOT( q[5], q[3] );
		Toffoli( anc[2], anc[0], anc[9] );
		CNOT( anc[6], anc[0] );
		CNOT( anc[6], anc[9] );
		Toffoli( anc[10], q[1], anc[3] );
		CNOT( q[2], anc[2] );
		Toffoli( q[0], anc[0], anc[2] );
		CNOT( anc[10], anc[0] );
		Toffoli( anc[8], anc[3], anc[6] );
		CNOT( anc[10], anc[4] );
		Toffoli( q[5], anc[2], anc[1] );
		CNOT( q[4], anc[0] );
		CNOT( q[1], anc[10] );
		Toffoli( anc[6], anc[0], anc[5] );
		CNOT( anc[7], anc[1] );
	} Free(anc, 11) {}
}
// Function 37 with degree 0
// nq: 6, na: 11, ng: 35
void func37R(qbit **q, int n) {
printf("func37R\n");
fflush(stderr);
	qbit *anc[11]; // ancilla
	qbit *nb[25]; // interacting bits
	qbit *res[4];
	nb[0] = q[1];
	nb[1] = q[4];
	nb[2] = q[5];
	nb[3] = q[0];
	nb[4] = q[2];
	nb[5] = q[1];
	nb[6] = q[5];
	nb[7] = q[3];
	nb[8] = q[0];
	nb[9] = q[2];
	nb[10] = q[4];
	nb[11] = q[0];
	nb[12] = q[3];
	nb[13] = q[4];
	nb[14] = q[5];
	nb[15] = q[4];
	nb[16] = q[5];
	nb[17] = q[5];
	nb[18] = q[4];
	nb[19] = q[1];
	nb[20] = q[1];
	nb[21] = q[0];
	nb[22] = q[3];
	nb[23] = q[2];
	nb[24] = q[1];
	res[0] = q[4];
	res[1] = q[2];
	res[2] = q[3];
	res[3] = q[5];
	// Leaf function
	_computeModule(0, 11, 74, 39, 0, 2, 0);
	acquire(11, anc, 25, nb);
	Recompute (res, 0, anc, 11, 74, 39){
		CNOT( q[1], anc[10] );
		CNOT( anc[10], q[2] );
		Toffoli( anc[9], q[3], anc[10] );
		Toffoli( anc[1], anc[0], anc[2] );
		Toffoli( q[1], anc[10], q[0] );
		CNOT( q[4], q[1] );
		CNOT( anc[2], anc[10] );
		CNOT( q[5], anc[5] );
		CNOT( q[5], anc[1] );
		CNOT( anc[3], q[4] );
		Toffoli( anc[5], q[5], anc[7] );
		CNOT( anc[5], q[4] );
		Toffoli( anc[3], q[3], anc[0] );
		CNOT( anc[1], anc[9] );
		Toffoli( anc[8], q[0], anc[1] );
		Toffoli( anc[10], anc[0], anc[1] );
		CNOT( anc[8], q[4] );
		CNOT( q[2], anc[3] );
		CNOT( q[0], anc[6] );
		CNOT( anc[9], anc[3] );
		CNOT( q[5], q[3] );
		Toffoli( anc[2], anc[0], anc[9] );
		CNOT( anc[6], anc[0] );
		CNOT( anc[6], anc[9] );
		Toffoli( anc[10], q[1], anc[3] );
		CNOT( q[2], anc[2] );
		Toffoli( q[0], anc[0], anc[2] );
		CNOT( anc[10], anc[0] );
		Toffoli( anc[8], anc[3], anc[6] );
		CNOT( anc[10], anc[4] );
		Toffoli( q[5], anc[2], anc[1] );
		CNOT( q[4], anc[0] );
		CNOT( q[1], anc[10] );
		Toffoli( anc[6], anc[0], anc[5] );
		CNOT( anc[7], anc[1] );
	}
	Restore {
		CNOT( anc[0], res[0] );
		CNOT( anc[2], res[1] );
		CNOT( anc[5], res[2] );
		CNOT( q[4], res[3] );
	}
	Unrecompute {
		CNOT( anc[7], anc[1] );
		Toffoli( anc[6], anc[0], anc[5] );
		CNOT( q[1], anc[10] );
		CNOT( q[4], anc[0] );
		Toffoli( q[5], anc[2], anc[1] );
		CNOT( anc[10], anc[4] );
		Toffoli( anc[8], anc[3], anc[6] );
		CNOT( anc[10], anc[0] );
		Toffoli( q[0], anc[0], anc[2] );
		CNOT( q[2], anc[2] );
		Toffoli( anc[10], q[1], anc[3] );
		CNOT( anc[6], anc[9] );
		CNOT( anc[6], anc[0] );
		Toffoli( anc[2], anc[0], anc[9] );
		CNOT( q[5], q[3] );
		CNOT( anc[9], anc[3] );
		CNOT( q[0], anc[6] );
		CNOT( q[2], anc[3] );
		CNOT( anc[8], q[4] );
		Toffoli( anc[10], anc[0], anc[1] );
		Toffoli( anc[8], q[0], anc[1] );
		CNOT( anc[1], anc[9] );
		Toffoli( anc[3], q[3], anc[0] );
		CNOT( anc[5], q[4] );
		Toffoli( anc[5], q[5], anc[7] );
		CNOT( anc[3], q[4] );
		CNOT( q[5], anc[1] );
		CNOT( q[5], anc[5] );
		CNOT( anc[2], anc[10] );
		CNOT( q[4], q[1] );
		Toffoli( q[1], anc[10], q[0] );
		Toffoli( anc[1], anc[0], anc[2] );
		Toffoli( anc[9], q[3], anc[10] );
		CNOT( anc[10], q[2] );
		CNOT( q[1], anc[10] );
	} Refree(anc, 11) {}
}
// Function 36 with degree 0
// nq: 8, na: 2, ng: 31
void func36(qbit **q, int n) {
printf("func36\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[67]; // interacting bits
	qbit *res[2];
	nb[0] = q[0];
	nb[1] = q[3];
	nb[2] = q[2];
	nb[3] = q[6];
	nb[4] = q[5];
	nb[5] = q[2];
	nb[6] = q[7];
	nb[7] = q[4];
	nb[8] = q[6];
	nb[9] = q[2];
	nb[10] = q[1];
	nb[11] = q[1];
	nb[12] = q[2];
	nb[13] = q[6];
	nb[14] = q[3];
	nb[15] = q[6];
	nb[16] = q[1];
	nb[17] = q[3];
	nb[18] = q[6];
	nb[19] = q[5];
	nb[20] = q[3];
	nb[21] = q[4];
	nb[22] = q[6];
	nb[23] = q[0];
	nb[24] = q[1];
	nb[25] = q[7];
	nb[26] = q[7];
	nb[27] = q[1];
	nb[28] = q[3];
	nb[29] = q[5];
	nb[30] = q[7];
	nb[31] = q[3];
	nb[32] = q[7];
	nb[33] = q[4];
	nb[34] = q[6];
	nb[35] = q[7];
	nb[36] = q[6];
	nb[37] = q[0];
	nb[38] = q[6];
	nb[39] = q[5];
	nb[40] = q[2];
	nb[41] = q[0];
	nb[42] = q[1];
	nb[43] = q[3];
	nb[44] = q[0];
	nb[45] = q[7];
	nb[46] = q[1];
	nb[47] = q[6];
	nb[48] = q[1];
	nb[49] = q[5];
	nb[50] = q[4];
	nb[51] = q[1];
	nb[52] = q[3];
	nb[53] = q[3];
	nb[54] = q[6];
	nb[55] = q[2];
	nb[56] = q[6];
	nb[57] = q[0];
	nb[58] = q[0];
	nb[59] = q[6];
	nb[60] = q[4];
	nb[61] = q[2];
	nb[62] = q[4];
	nb[63] = q[3];
	nb[64] = q[7];
	nb[65] = q[5];
	nb[66] = q[2];
	res[0] = q[1];
	res[1] = q[7];
	// Leaf function
	Compute (0, 2, 64, 33, 0, 3, 0) {
		acquire(2, anc, 67, nb);
		Toffoli( q[0], anc[1], q[3] );
		CNOT( q[2], anc[1] );
		Toffoli( q[6], q[5], anc[0] );
		Toffoli( q[2], q[7], q[4] );
		CNOT( q[6], q[2] );
		CNOT( anc[0], q[1] );
		Toffoli( anc[1], anc[0], q[1] );
		Toffoli( q[2], q[6], q[3] );
		Toffoli( q[6], q[1], q[3] );
		CNOT( anc[1], anc[0] );
		Toffoli( anc[1], q[6], q[5] );
		Toffoli( q[3], q[4], q[6] );
		CNOT( q[0], anc[1] );
		CNOT( q[1], q[7] );
		Toffoli( q[7], q[1], q[3] );
		Toffoli( q[5], q[7], q[3] );
		CNOT( q[7], q[4] );
		CNOT( q[6], anc[0] );
		Toffoli( q[7], q[6], q[0] );
		Toffoli( q[6], q[5], q[2] );
		Toffoli( q[0], q[1], q[3] );
		Toffoli( q[0], anc[0], q[7] );
		CNOT( q[1], q[6] );
		Toffoli( q[1], anc[0], q[5] );
		Toffoli( q[4], q[1], q[3] );
		Toffoli( q[3], q[6], q[2] );
		CNOT( q[6], q[0] );
		Toffoli( q[0], q[6], q[4] );
		Toffoli( q[2], q[4], anc[0] );
		CNOT( q[3], q[7] );
		CNOT( q[5], q[2] );
	}
	Store {
		CNOT( q[0], res[0] );
		CNOT( anc[0], res[1] );
	}
	Uncompute(res, 0, anc, 2, 64, 33){
		CNOT( q[5], q[2] );
		CNOT( q[3], q[7] );
		Toffoli( q[2], q[4], anc[0] );
		Toffoli( q[0], q[6], q[4] );
		CNOT( q[6], q[0] );
		Toffoli( q[3], q[6], q[2] );
		Toffoli( q[4], q[1], q[3] );
		Toffoli( q[1], anc[0], q[5] );
		CNOT( q[1], q[6] );
		Toffoli( q[0], anc[0], q[7] );
		Toffoli( q[0], q[1], q[3] );
		Toffoli( q[6], q[5], q[2] );
		Toffoli( q[7], q[6], q[0] );
		CNOT( q[6], anc[0] );
		CNOT( q[7], q[4] );
		Toffoli( q[5], q[7], q[3] );
		Toffoli( q[7], q[1], q[3] );
		CNOT( q[1], q[7] );
		CNOT( q[0], anc[1] );
		Toffoli( q[3], q[4], q[6] );
		Toffoli( anc[1], q[6], q[5] );
		CNOT( anc[1], anc[0] );
		Toffoli( q[6], q[1], q[3] );
		Toffoli( q[2], q[6], q[3] );
		Toffoli( anc[1], anc[0], q[1] );
		CNOT( anc[0], q[1] );
		CNOT( q[6], q[2] );
		Toffoli( q[2], q[7], q[4] );
		Toffoli( q[6], q[5], anc[0] );
		CNOT( q[2], anc[1] );
		Toffoli( q[0], anc[1], q[3] );
	} Free(anc, 2) {}
}
// Function 36 with degree 0
// nq: 8, na: 2, ng: 31
void func36R(qbit **q, int n) {
printf("func36R\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[67]; // interacting bits
	qbit *res[2];
	nb[0] = q[0];
	nb[1] = q[3];
	nb[2] = q[2];
	nb[3] = q[6];
	nb[4] = q[5];
	nb[5] = q[2];
	nb[6] = q[7];
	nb[7] = q[4];
	nb[8] = q[6];
	nb[9] = q[2];
	nb[10] = q[1];
	nb[11] = q[1];
	nb[12] = q[2];
	nb[13] = q[6];
	nb[14] = q[3];
	nb[15] = q[6];
	nb[16] = q[1];
	nb[17] = q[3];
	nb[18] = q[6];
	nb[19] = q[5];
	nb[20] = q[3];
	nb[21] = q[4];
	nb[22] = q[6];
	nb[23] = q[0];
	nb[24] = q[1];
	nb[25] = q[7];
	nb[26] = q[7];
	nb[27] = q[1];
	nb[28] = q[3];
	nb[29] = q[5];
	nb[30] = q[7];
	nb[31] = q[3];
	nb[32] = q[7];
	nb[33] = q[4];
	nb[34] = q[6];
	nb[35] = q[7];
	nb[36] = q[6];
	nb[37] = q[0];
	nb[38] = q[6];
	nb[39] = q[5];
	nb[40] = q[2];
	nb[41] = q[0];
	nb[42] = q[1];
	nb[43] = q[3];
	nb[44] = q[0];
	nb[45] = q[7];
	nb[46] = q[1];
	nb[47] = q[6];
	nb[48] = q[1];
	nb[49] = q[5];
	nb[50] = q[4];
	nb[51] = q[1];
	nb[52] = q[3];
	nb[53] = q[3];
	nb[54] = q[6];
	nb[55] = q[2];
	nb[56] = q[6];
	nb[57] = q[0];
	nb[58] = q[0];
	nb[59] = q[6];
	nb[60] = q[4];
	nb[61] = q[2];
	nb[62] = q[4];
	nb[63] = q[3];
	nb[64] = q[7];
	nb[65] = q[5];
	nb[66] = q[2];
	res[0] = q[1];
	res[1] = q[7];
	// Leaf function
	_computeModule(0, 2, 64, 33, 0, 3, 0);
	acquire(2, anc, 67, nb);
	Recompute (res, 0, anc, 2, 64, 33){
		CNOT( q[5], q[2] );
		CNOT( q[3], q[7] );
		Toffoli( q[2], q[4], anc[0] );
		Toffoli( q[0], q[6], q[4] );
		CNOT( q[6], q[0] );
		Toffoli( q[3], q[6], q[2] );
		Toffoli( q[4], q[1], q[3] );
		Toffoli( q[1], anc[0], q[5] );
		CNOT( q[1], q[6] );
		Toffoli( q[0], anc[0], q[7] );
		Toffoli( q[0], q[1], q[3] );
		Toffoli( q[6], q[5], q[2] );
		Toffoli( q[7], q[6], q[0] );
		CNOT( q[6], anc[0] );
		CNOT( q[7], q[4] );
		Toffoli( q[5], q[7], q[3] );
		Toffoli( q[7], q[1], q[3] );
		CNOT( q[1], q[7] );
		CNOT( q[0], anc[1] );
		Toffoli( q[3], q[4], q[6] );
		Toffoli( anc[1], q[6], q[5] );
		CNOT( anc[1], anc[0] );
		Toffoli( q[6], q[1], q[3] );
		Toffoli( q[2], q[6], q[3] );
		Toffoli( anc[1], anc[0], q[1] );
		CNOT( anc[0], q[1] );
		CNOT( q[6], q[2] );
		Toffoli( q[2], q[7], q[4] );
		Toffoli( q[6], q[5], anc[0] );
		CNOT( q[2], anc[1] );
		Toffoli( q[0], anc[1], q[3] );
	}
	Restore {
		CNOT( q[0], res[0] );
		CNOT( anc[0], res[1] );
	}
	Unrecompute {
		Toffoli( q[0], anc[1], q[3] );
		CNOT( q[2], anc[1] );
		Toffoli( q[6], q[5], anc[0] );
		Toffoli( q[2], q[7], q[4] );
		CNOT( q[6], q[2] );
		CNOT( anc[0], q[1] );
		Toffoli( anc[1], anc[0], q[1] );
		Toffoli( q[2], q[6], q[3] );
		Toffoli( q[6], q[1], q[3] );
		CNOT( anc[1], anc[0] );
		Toffoli( anc[1], q[6], q[5] );
		Toffoli( q[3], q[4], q[6] );
		CNOT( q[0], anc[1] );
		CNOT( q[1], q[7] );
		Toffoli( q[7], q[1], q[3] );
		Toffoli( q[5], q[7], q[3] );
		CNOT( q[7], q[4] );
		CNOT( q[6], anc[0] );
		Toffoli( q[7], q[6], q[0] );
		Toffoli( q[6], q[5], q[2] );
		Toffoli( q[0], q[1], q[3] );
		Toffoli( q[0], anc[0], q[7] );
		CNOT( q[1], q[6] );
		Toffoli( q[1], anc[0], q[5] );
		Toffoli( q[4], q[1], q[3] );
		Toffoli( q[3], q[6], q[2] );
		CNOT( q[6], q[0] );
		Toffoli( q[0], q[6], q[4] );
		Toffoli( q[2], q[4], anc[0] );
		CNOT( q[3], q[7] );
		CNOT( q[5], q[2] );
	} Refree(anc, 2) {}
}
// Function 35 with degree 0
// nq: 10, na: 13, ng: 47
void func35(qbit **q, int n) {
printf("func35\n");
fflush(stderr);
	qbit *anc[13]; // ancilla
	qbit *nb[52]; // interacting bits
	qbit *res[8];
	nb[0] = q[0];
	nb[1] = q[8];
	nb[2] = q[0];
	nb[3] = q[1];
	nb[4] = q[6];
	nb[5] = q[5];
	nb[6] = q[8];
	nb[7] = q[7];
	nb[8] = q[6];
	nb[9] = q[4];
	nb[10] = q[5];
	nb[11] = q[6];
	nb[12] = q[5];
	nb[13] = q[3];
	nb[14] = q[2];
	nb[15] = q[9];
	nb[16] = q[9];
	nb[17] = q[2];
	nb[18] = q[5];
	nb[19] = q[0];
	nb[20] = q[2];
	nb[21] = q[3];
	nb[22] = q[9];
	nb[23] = q[3];
	nb[24] = q[6];
	nb[25] = q[6];
	nb[26] = q[3];
	nb[27] = q[6];
	nb[28] = q[1];
	nb[29] = q[1];
	nb[30] = q[0];
	nb[31] = q[2];
	nb[32] = q[0];
	nb[33] = q[7];
	nb[34] = q[8];
	nb[35] = q[2];
	nb[36] = q[8];
	nb[37] = q[5];
	nb[38] = q[2];
	nb[39] = q[9];
	nb[40] = q[8];
	nb[41] = q[8];
	nb[42] = q[1];
	nb[43] = q[9];
	nb[44] = q[6];
	nb[45] = q[9];
	nb[46] = q[0];
	nb[47] = q[8];
	nb[48] = q[5];
	nb[49] = q[7];
	nb[50] = q[0];
	nb[51] = q[7];
	res[0] = q[6];
	res[1] = q[5];
	res[2] = q[4];
	res[3] = q[3];
	res[4] = q[1];
	res[5] = q[0];
	res[6] = q[9];
	res[7] = q[2];
	// Leaf function
	Compute (0, 13, 102, 55, 0, 3, 0) {
		acquire(13, anc, 52, nb);
		CNOT( anc[3], anc[11] );
		Toffoli( anc[4], q[0], anc[11] );
		CNOT( q[8], anc[3] );
		Toffoli( q[0], anc[2], anc[3] );
		CNOT( anc[9], q[1] );
		CNOT( anc[9], q[6] );
		Toffoli( anc[9], anc[2], anc[7] );
		CNOT( q[5], q[8] );
		Toffoli( anc[2], anc[3], anc[11] );
		Toffoli( q[7], anc[0], anc[8] );
		Toffoli( q[6], anc[10], anc[7] );
		CNOT( q[4], anc[4] );
		Toffoli( q[5], anc[12], anc[3] );
		Toffoli( anc[6], q[6], anc[12] );
		Toffoli( anc[1], q[5], q[3] );
		Toffoli( q[2], q[9], anc[1] );
		Toffoli( anc[1], q[9], q[2] );
		Toffoli( q[5], anc[7], anc[6] );
		Toffoli( q[0], anc[8], q[2] );
		Toffoli( q[3], anc[12], anc[0] );
		CNOT( anc[6], q[9] );
		Toffoli( q[3], anc[12], q[6] );
		CNOT( anc[9], anc[7] );
		CNOT( q[6], anc[10] );
		CNOT( anc[6], anc[1] );
		CNOT( anc[3], anc[7] );
		Toffoli( anc[12], q[3], anc[4] );
		Toffoli( anc[1], anc[11], anc[5] );
		Toffoli( anc[8], anc[7], anc[10] );
		Toffoli( anc[4], anc[12], anc[1] );
		CNOT( q[6], q[1] );
		CNOT( q[1], q[0] );
		Toffoli( anc[7], q[2], q[0] );
		Toffoli( anc[1], q[7], anc[3] );
		Toffoli( anc[8], q[8], anc[1] );
		CNOT( q[2], q[8] );
		CNOT( anc[2], anc[12] );
		CNOT( q[5], q[2] );
		Toffoli( q[9], q[8], anc[11] );
		CNOT( q[8], q[1] );
		CNOT( anc[9], q[9] );
		Toffoli( anc[1], q[6], q[9] );
		CNOT( anc[8], q[0] );
		Toffoli( anc[3], q[8], q[5] );
		CNOT( anc[11], q[7] );
		CNOT( anc[7], q[0] );
		CNOT( q[7], anc[2] );
	}
	Store {
		CNOT( anc[4], res[0] );
		CNOT( anc[6], res[1] );
		CNOT( anc[12], res[2] );
		CNOT( q[8], res[3] );
		CNOT( anc[3], res[4] );
		CNOT( anc[1], res[5] );
		CNOT( anc[2], res[6] );
		CNOT( anc[0], res[7] );
	}
	Uncompute(res, 0, anc, 13, 102, 55){
		CNOT( q[7], anc[2] );
		CNOT( anc[7], q[0] );
		CNOT( anc[11], q[7] );
		Toffoli( anc[3], q[8], q[5] );
		CNOT( anc[8], q[0] );
		Toffoli( anc[1], q[6], q[9] );
		CNOT( anc[9], q[9] );
		CNOT( q[8], q[1] );
		Toffoli( q[9], q[8], anc[11] );
		CNOT( q[5], q[2] );
		CNOT( anc[2], anc[12] );
		CNOT( q[2], q[8] );
		Toffoli( anc[8], q[8], anc[1] );
		Toffoli( anc[1], q[7], anc[3] );
		Toffoli( anc[7], q[2], q[0] );
		CNOT( q[1], q[0] );
		CNOT( q[6], q[1] );
		Toffoli( anc[4], anc[12], anc[1] );
		Toffoli( anc[8], anc[7], anc[10] );
		Toffoli( anc[1], anc[11], anc[5] );
		Toffoli( anc[12], q[3], anc[4] );
		CNOT( anc[3], anc[7] );
		CNOT( anc[6], anc[1] );
		CNOT( q[6], anc[10] );
		CNOT( anc[9], anc[7] );
		Toffoli( q[3], anc[12], q[6] );
		CNOT( anc[6], q[9] );
		Toffoli( q[3], anc[12], anc[0] );
		Toffoli( q[0], anc[8], q[2] );
		Toffoli( q[5], anc[7], anc[6] );
		Toffoli( anc[1], q[9], q[2] );
		Toffoli( q[2], q[9], anc[1] );
		Toffoli( anc[1], q[5], q[3] );
		Toffoli( anc[6], q[6], anc[12] );
		Toffoli( q[5], anc[12], anc[3] );
		CNOT( q[4], anc[4] );
		Toffoli( q[6], anc[10], anc[7] );
		Toffoli( q[7], anc[0], anc[8] );
		Toffoli( anc[2], anc[3], anc[11] );
		CNOT( q[5], q[8] );
		Toffoli( anc[9], anc[2], anc[7] );
		CNOT( anc[9], q[6] );
		CNOT( anc[9], q[1] );
		Toffoli( q[0], anc[2], anc[3] );
		CNOT( q[8], anc[3] );
		Toffoli( anc[4], q[0], anc[11] );
		CNOT( anc[3], anc[11] );
	} Free(anc, 13) {}
}
// Function 35 with degree 0
// nq: 10, na: 13, ng: 47
void func35R(qbit **q, int n) {
printf("func35R\n");
fflush(stderr);
	qbit *anc[13]; // ancilla
	qbit *nb[52]; // interacting bits
	qbit *res[8];
	nb[0] = q[0];
	nb[1] = q[8];
	nb[2] = q[0];
	nb[3] = q[1];
	nb[4] = q[6];
	nb[5] = q[5];
	nb[6] = q[8];
	nb[7] = q[7];
	nb[8] = q[6];
	nb[9] = q[4];
	nb[10] = q[5];
	nb[11] = q[6];
	nb[12] = q[5];
	nb[13] = q[3];
	nb[14] = q[2];
	nb[15] = q[9];
	nb[16] = q[9];
	nb[17] = q[2];
	nb[18] = q[5];
	nb[19] = q[0];
	nb[20] = q[2];
	nb[21] = q[3];
	nb[22] = q[9];
	nb[23] = q[3];
	nb[24] = q[6];
	nb[25] = q[6];
	nb[26] = q[3];
	nb[27] = q[6];
	nb[28] = q[1];
	nb[29] = q[1];
	nb[30] = q[0];
	nb[31] = q[2];
	nb[32] = q[0];
	nb[33] = q[7];
	nb[34] = q[8];
	nb[35] = q[2];
	nb[36] = q[8];
	nb[37] = q[5];
	nb[38] = q[2];
	nb[39] = q[9];
	nb[40] = q[8];
	nb[41] = q[8];
	nb[42] = q[1];
	nb[43] = q[9];
	nb[44] = q[6];
	nb[45] = q[9];
	nb[46] = q[0];
	nb[47] = q[8];
	nb[48] = q[5];
	nb[49] = q[7];
	nb[50] = q[0];
	nb[51] = q[7];
	res[0] = q[6];
	res[1] = q[5];
	res[2] = q[4];
	res[3] = q[3];
	res[4] = q[1];
	res[5] = q[0];
	res[6] = q[9];
	res[7] = q[2];
	// Leaf function
	_computeModule(0, 13, 102, 55, 0, 3, 0);
	acquire(13, anc, 52, nb);
	Recompute (res, 0, anc, 13, 102, 55){
		CNOT( q[7], anc[2] );
		CNOT( anc[7], q[0] );
		CNOT( anc[11], q[7] );
		Toffoli( anc[3], q[8], q[5] );
		CNOT( anc[8], q[0] );
		Toffoli( anc[1], q[6], q[9] );
		CNOT( anc[9], q[9] );
		CNOT( q[8], q[1] );
		Toffoli( q[9], q[8], anc[11] );
		CNOT( q[5], q[2] );
		CNOT( anc[2], anc[12] );
		CNOT( q[2], q[8] );
		Toffoli( anc[8], q[8], anc[1] );
		Toffoli( anc[1], q[7], anc[3] );
		Toffoli( anc[7], q[2], q[0] );
		CNOT( q[1], q[0] );
		CNOT( q[6], q[1] );
		Toffoli( anc[4], anc[12], anc[1] );
		Toffoli( anc[8], anc[7], anc[10] );
		Toffoli( anc[1], anc[11], anc[5] );
		Toffoli( anc[12], q[3], anc[4] );
		CNOT( anc[3], anc[7] );
		CNOT( anc[6], anc[1] );
		CNOT( q[6], anc[10] );
		CNOT( anc[9], anc[7] );
		Toffoli( q[3], anc[12], q[6] );
		CNOT( anc[6], q[9] );
		Toffoli( q[3], anc[12], anc[0] );
		Toffoli( q[0], anc[8], q[2] );
		Toffoli( q[5], anc[7], anc[6] );
		Toffoli( anc[1], q[9], q[2] );
		Toffoli( q[2], q[9], anc[1] );
		Toffoli( anc[1], q[5], q[3] );
		Toffoli( anc[6], q[6], anc[12] );
		Toffoli( q[5], anc[12], anc[3] );
		CNOT( q[4], anc[4] );
		Toffoli( q[6], anc[10], anc[7] );
		Toffoli( q[7], anc[0], anc[8] );
		Toffoli( anc[2], anc[3], anc[11] );
		CNOT( q[5], q[8] );
		Toffoli( anc[9], anc[2], anc[7] );
		CNOT( anc[9], q[6] );
		CNOT( anc[9], q[1] );
		Toffoli( q[0], anc[2], anc[3] );
		CNOT( q[8], anc[3] );
		Toffoli( anc[4], q[0], anc[11] );
		CNOT( anc[3], anc[11] );
	}
	Restore {
		CNOT( anc[4], res[0] );
		CNOT( anc[6], res[1] );
		CNOT( anc[12], res[2] );
		CNOT( q[8], res[3] );
		CNOT( anc[3], res[4] );
		CNOT( anc[1], res[5] );
		CNOT( anc[2], res[6] );
		CNOT( anc[0], res[7] );
	}
	Unrecompute {
		CNOT( anc[3], anc[11] );
		Toffoli( anc[4], q[0], anc[11] );
		CNOT( q[8], anc[3] );
		Toffoli( q[0], anc[2], anc[3] );
		CNOT( anc[9], q[1] );
		CNOT( anc[9], q[6] );
		Toffoli( anc[9], anc[2], anc[7] );
		CNOT( q[5], q[8] );
		Toffoli( anc[2], anc[3], anc[11] );
		Toffoli( q[7], anc[0], anc[8] );
		Toffoli( q[6], anc[10], anc[7] );
		CNOT( q[4], anc[4] );
		Toffoli( q[5], anc[12], anc[3] );
		Toffoli( anc[6], q[6], anc[12] );
		Toffoli( anc[1], q[5], q[3] );
		Toffoli( q[2], q[9], anc[1] );
		Toffoli( anc[1], q[9], q[2] );
		Toffoli( q[5], anc[7], anc[6] );
		Toffoli( q[0], anc[8], q[2] );
		Toffoli( q[3], anc[12], anc[0] );
		CNOT( anc[6], q[9] );
		Toffoli( q[3], anc[12], q[6] );
		CNOT( anc[9], anc[7] );
		CNOT( q[6], anc[10] );
		CNOT( anc[6], anc[1] );
		CNOT( anc[3], anc[7] );
		Toffoli( anc[12], q[3], anc[4] );
		Toffoli( anc[1], anc[11], anc[5] );
		Toffoli( anc[8], anc[7], anc[10] );
		Toffoli( anc[4], anc[12], anc[1] );
		CNOT( q[6], q[1] );
		CNOT( q[1], q[0] );
		Toffoli( anc[7], q[2], q[0] );
		Toffoli( anc[1], q[7], anc[3] );
		Toffoli( anc[8], q[8], anc[1] );
		CNOT( q[2], q[8] );
		CNOT( anc[2], anc[12] );
		CNOT( q[5], q[2] );
		Toffoli( q[9], q[8], anc[11] );
		CNOT( q[8], q[1] );
		CNOT( anc[9], q[9] );
		Toffoli( anc[1], q[6], q[9] );
		CNOT( anc[8], q[0] );
		Toffoli( anc[3], q[8], q[5] );
		CNOT( anc[11], q[7] );
		CNOT( anc[7], q[0] );
		CNOT( q[7], anc[2] );
	} Refree(anc, 13) {}
}
// Function 34 with degree 0
// nq: 5, na: 2, ng: 58
void func34(qbit **q, int n) {
printf("func34\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[109]; // interacting bits
	qbit *res[5];
	nb[0] = q[4];
	nb[1] = q[1];
	nb[2] = q[0];
	nb[3] = q[4];
	nb[4] = q[0];
	nb[5] = q[1];
	nb[6] = q[4];
	nb[7] = q[1];
	nb[8] = q[1];
	nb[9] = q[3];
	nb[10] = q[0];
	nb[11] = q[4];
	nb[12] = q[3];
	nb[13] = q[4];
	nb[14] = q[0];
	nb[15] = q[3];
	nb[16] = q[2];
	nb[17] = q[3];
	nb[18] = q[3];
	nb[19] = q[4];
	nb[20] = q[0];
	nb[21] = q[0];
	nb[22] = q[4];
	nb[23] = q[2];
	nb[24] = q[0];
	nb[25] = q[1];
	nb[26] = q[3];
	nb[27] = q[4];
	nb[28] = q[0];
	nb[29] = q[4];
	nb[30] = q[3];
	nb[31] = q[2];
	nb[32] = q[1];
	nb[33] = q[0];
	nb[34] = q[3];
	nb[35] = q[1];
	nb[36] = q[4];
	nb[37] = q[1];
	nb[38] = q[4];
	nb[39] = q[0];
	nb[40] = q[4];
	nb[41] = q[2];
	nb[42] = q[0];
	nb[43] = q[1];
	nb[44] = q[3];
	nb[45] = q[4];
	nb[46] = q[1];
	nb[47] = q[2];
	nb[48] = q[0];
	nb[49] = q[1];
	nb[50] = q[0];
	nb[51] = q[2];
	nb[52] = q[3];
	nb[53] = q[4];
	nb[54] = q[3];
	nb[55] = q[2];
	nb[56] = q[1];
	nb[57] = q[0];
	nb[58] = q[0];
	nb[59] = q[4];
	nb[60] = q[0];
	nb[61] = q[3];
	nb[62] = q[0];
	nb[63] = q[1];
	nb[64] = q[3];
	nb[65] = q[0];
	nb[66] = q[1];
	nb[67] = q[3];
	nb[68] = q[0];
	nb[69] = q[4];
	nb[70] = q[1];
	nb[71] = q[3];
	nb[72] = q[0];
	nb[73] = q[2];
	nb[74] = q[3];
	nb[75] = q[4];
	nb[76] = q[1];
	nb[77] = q[4];
	nb[78] = q[1];
	nb[79] = q[3];
	nb[80] = q[4];
	nb[81] = q[0];
	nb[82] = q[4];
	nb[83] = q[3];
	nb[84] = q[3];
	nb[85] = q[1];
	nb[86] = q[3];
	nb[87] = q[2];
	nb[88] = q[4];
	nb[89] = q[1];
	nb[90] = q[3];
	nb[91] = q[2];
	nb[92] = q[0];
	nb[93] = q[0];
	nb[94] = q[4];
	nb[95] = q[1];
	nb[96] = q[4];
	nb[97] = q[0];
	nb[98] = q[3];
	nb[99] = q[2];
	nb[100] = q[1];
	nb[101] = q[4];
	nb[102] = q[4];
	nb[103] = q[1];
	nb[104] = q[4];
	nb[105] = q[1];
	nb[106] = q[0];
	nb[107] = q[3];
	nb[108] = q[2];
	res[0] = q[2];
	res[1] = q[1];
	res[2] = q[0];
	res[3] = q[4];
	res[4] = q[3];
	// Leaf function
	Compute (0, 2, 121, 63, 0, 3, 0) {
		acquire(2, anc, 109, nb);
		CNOT( anc[1], q[4] );
		CNOT( q[1], anc[1] );
		CNOT( q[0], q[4] );
		CNOT( q[0], q[1] );
		Toffoli( q[4], q[1], anc[0] );
		CNOT( q[1], q[3] );
		Toffoli( q[0], q[4], anc[1] );
		CNOT( q[3], anc[0] );
		CNOT( anc[1], anc[0] );
		CNOT( anc[1], anc[0] );
		Toffoli( q[4], q[0], q[3] );
		CNOT( q[2], q[3] );
		CNOT( q[3], anc[1] );
		CNOT( q[4], q[0] );
		CNOT( q[0], anc[0] );
		Toffoli( anc[1], q[4], anc[0] );
		Toffoli( q[2], q[0], anc[0] );
		Toffoli( q[1], anc[1], q[3] );
		Toffoli( q[4], anc[0], anc[1] );
		Toffoli( anc[0], q[0], q[4] );
		Toffoli( q[3], anc[1], q[2] );
		CNOT( q[1], q[0] );
		Toffoli( q[3], q[1], q[4] );
		Toffoli( q[1], q[4], q[0] );
		CNOT( q[4], q[2] );
		CNOT( q[0], anc[1] );
		CNOT( q[1], anc[1] );
		CNOT( q[3], q[4] );
		Toffoli( q[1], q[2], q[0] );
		CNOT( q[1], q[0] );
		Toffoli( q[2], q[3], q[4] );
		Toffoli( q[3], q[2], anc[0] );
		CNOT( q[1], q[0] );
		CNOT( q[0], q[4] );
		CNOT( q[0], q[3] );
		Toffoli( q[0], anc[0], q[1] );
		Toffoli( q[3], q[0], q[1] );
		CNOT( q[3], anc[0] );
		CNOT( anc[1], q[0] );
		Toffoli( q[4], q[1], anc[1] );
		CNOT( q[3], q[0] );
		Toffoli( q[2], q[3], q[4] );
		Toffoli( q[1], anc[1], q[4] );
		CNOT( q[1], q[3] );
		CNOT( q[4], q[0] );
		Toffoli( q[4], anc[0], q[3] );
		CNOT( q[3], q[1] );
		Toffoli( q[3], q[2], q[4] );
		CNOT( q[1], anc[1] );
		Toffoli( q[3], q[2], q[0] );
		CNOT( anc[1], q[0] );
		Toffoli( q[4], anc[0], q[1] );
		CNOT( q[4], anc[0] );
		Toffoli( q[0], q[3], q[2] );
		Toffoli( q[1], q[4], anc[0] );
		Toffoli( q[4], anc[0], q[1] );
		Toffoli( q[4], q[1], q[0] );
		Toffoli( q[3], anc[1], q[2] );
	}
	Store {
		CNOT( q[0], res[0] );
		CNOT( q[3], res[1] );
		CNOT( q[2], res[2] );
		CNOT( q[1], res[3] );
		CNOT( q[4], res[4] );
	}
	Uncompute(res, 0, anc, 2, 121, 63){
		Toffoli( q[3], anc[1], q[2] );
		Toffoli( q[4], q[1], q[0] );
		Toffoli( q[4], anc[0], q[1] );
		Toffoli( q[1], q[4], anc[0] );
		Toffoli( q[0], q[3], q[2] );
		CNOT( q[4], anc[0] );
		Toffoli( q[4], anc[0], q[1] );
		CNOT( anc[1], q[0] );
		Toffoli( q[3], q[2], q[0] );
		CNOT( q[1], anc[1] );
		Toffoli( q[3], q[2], q[4] );
		CNOT( q[3], q[1] );
		Toffoli( q[4], anc[0], q[3] );
		CNOT( q[4], q[0] );
		CNOT( q[1], q[3] );
		Toffoli( q[1], anc[1], q[4] );
		Toffoli( q[2], q[3], q[4] );
		CNOT( q[3], q[0] );
		Toffoli( q[4], q[1], anc[1] );
		CNOT( anc[1], q[0] );
		CNOT( q[3], anc[0] );
		Toffoli( q[3], q[0], q[1] );
		Toffoli( q[0], anc[0], q[1] );
		CNOT( q[0], q[3] );
		CNOT( q[0], q[4] );
		CNOT( q[1], q[0] );
		Toffoli( q[3], q[2], anc[0] );
		Toffoli( q[2], q[3], q[4] );
		CNOT( q[1], q[0] );
		Toffoli( q[1], q[2], q[0] );
		CNOT( q[3], q[4] );
		CNOT( q[1], anc[1] );
		CNOT( q[0], anc[1] );
		CNOT( q[4], q[2] );
		Toffoli( q[1], q[4], q[0] );
		Toffoli( q[3], q[1], q[4] );
		CNOT( q[1], q[0] );
		Toffoli( q[3], anc[1], q[2] );
		Toffoli( anc[0], q[0], q[4] );
		Toffoli( q[4], anc[0], anc[1] );
		Toffoli( q[1], anc[1], q[3] );
		Toffoli( q[2], q[0], anc[0] );
		Toffoli( anc[1], q[4], anc[0] );
		CNOT( q[0], anc[0] );
		CNOT( q[4], q[0] );
		CNOT( q[3], anc[1] );
		CNOT( q[2], q[3] );
		Toffoli( q[4], q[0], q[3] );
		CNOT( anc[1], anc[0] );
		CNOT( anc[1], anc[0] );
		CNOT( q[3], anc[0] );
		Toffoli( q[0], q[4], anc[1] );
		CNOT( q[1], q[3] );
		Toffoli( q[4], q[1], anc[0] );
		CNOT( q[0], q[1] );
		CNOT( q[0], q[4] );
		CNOT( q[1], anc[1] );
		CNOT( anc[1], q[4] );
	} Free(anc, 2) {}
}
// Function 34 with degree 0
// nq: 5, na: 2, ng: 58
void func34R(qbit **q, int n) {
printf("func34R\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[109]; // interacting bits
	qbit *res[5];
	nb[0] = q[4];
	nb[1] = q[1];
	nb[2] = q[0];
	nb[3] = q[4];
	nb[4] = q[0];
	nb[5] = q[1];
	nb[6] = q[4];
	nb[7] = q[1];
	nb[8] = q[1];
	nb[9] = q[3];
	nb[10] = q[0];
	nb[11] = q[4];
	nb[12] = q[3];
	nb[13] = q[4];
	nb[14] = q[0];
	nb[15] = q[3];
	nb[16] = q[2];
	nb[17] = q[3];
	nb[18] = q[3];
	nb[19] = q[4];
	nb[20] = q[0];
	nb[21] = q[0];
	nb[22] = q[4];
	nb[23] = q[2];
	nb[24] = q[0];
	nb[25] = q[1];
	nb[26] = q[3];
	nb[27] = q[4];
	nb[28] = q[0];
	nb[29] = q[4];
	nb[30] = q[3];
	nb[31] = q[2];
	nb[32] = q[1];
	nb[33] = q[0];
	nb[34] = q[3];
	nb[35] = q[1];
	nb[36] = q[4];
	nb[37] = q[1];
	nb[38] = q[4];
	nb[39] = q[0];
	nb[40] = q[4];
	nb[41] = q[2];
	nb[42] = q[0];
	nb[43] = q[1];
	nb[44] = q[3];
	nb[45] = q[4];
	nb[46] = q[1];
	nb[47] = q[2];
	nb[48] = q[0];
	nb[49] = q[1];
	nb[50] = q[0];
	nb[51] = q[2];
	nb[52] = q[3];
	nb[53] = q[4];
	nb[54] = q[3];
	nb[55] = q[2];
	nb[56] = q[1];
	nb[57] = q[0];
	nb[58] = q[0];
	nb[59] = q[4];
	nb[60] = q[0];
	nb[61] = q[3];
	nb[62] = q[0];
	nb[63] = q[1];
	nb[64] = q[3];
	nb[65] = q[0];
	nb[66] = q[1];
	nb[67] = q[3];
	nb[68] = q[0];
	nb[69] = q[4];
	nb[70] = q[1];
	nb[71] = q[3];
	nb[72] = q[0];
	nb[73] = q[2];
	nb[74] = q[3];
	nb[75] = q[4];
	nb[76] = q[1];
	nb[77] = q[4];
	nb[78] = q[1];
	nb[79] = q[3];
	nb[80] = q[4];
	nb[81] = q[0];
	nb[82] = q[4];
	nb[83] = q[3];
	nb[84] = q[3];
	nb[85] = q[1];
	nb[86] = q[3];
	nb[87] = q[2];
	nb[88] = q[4];
	nb[89] = q[1];
	nb[90] = q[3];
	nb[91] = q[2];
	nb[92] = q[0];
	nb[93] = q[0];
	nb[94] = q[4];
	nb[95] = q[1];
	nb[96] = q[4];
	nb[97] = q[0];
	nb[98] = q[3];
	nb[99] = q[2];
	nb[100] = q[1];
	nb[101] = q[4];
	nb[102] = q[4];
	nb[103] = q[1];
	nb[104] = q[4];
	nb[105] = q[1];
	nb[106] = q[0];
	nb[107] = q[3];
	nb[108] = q[2];
	res[0] = q[2];
	res[1] = q[1];
	res[2] = q[0];
	res[3] = q[4];
	res[4] = q[3];
	// Leaf function
	_computeModule(0, 2, 121, 63, 0, 3, 0);
	acquire(2, anc, 109, nb);
	Recompute (res, 0, anc, 2, 121, 63){
		Toffoli( q[3], anc[1], q[2] );
		Toffoli( q[4], q[1], q[0] );
		Toffoli( q[4], anc[0], q[1] );
		Toffoli( q[1], q[4], anc[0] );
		Toffoli( q[0], q[3], q[2] );
		CNOT( q[4], anc[0] );
		Toffoli( q[4], anc[0], q[1] );
		CNOT( anc[1], q[0] );
		Toffoli( q[3], q[2], q[0] );
		CNOT( q[1], anc[1] );
		Toffoli( q[3], q[2], q[4] );
		CNOT( q[3], q[1] );
		Toffoli( q[4], anc[0], q[3] );
		CNOT( q[4], q[0] );
		CNOT( q[1], q[3] );
		Toffoli( q[1], anc[1], q[4] );
		Toffoli( q[2], q[3], q[4] );
		CNOT( q[3], q[0] );
		Toffoli( q[4], q[1], anc[1] );
		CNOT( anc[1], q[0] );
		CNOT( q[3], anc[0] );
		Toffoli( q[3], q[0], q[1] );
		Toffoli( q[0], anc[0], q[1] );
		CNOT( q[0], q[3] );
		CNOT( q[0], q[4] );
		CNOT( q[1], q[0] );
		Toffoli( q[3], q[2], anc[0] );
		Toffoli( q[2], q[3], q[4] );
		CNOT( q[1], q[0] );
		Toffoli( q[1], q[2], q[0] );
		CNOT( q[3], q[4] );
		CNOT( q[1], anc[1] );
		CNOT( q[0], anc[1] );
		CNOT( q[4], q[2] );
		Toffoli( q[1], q[4], q[0] );
		Toffoli( q[3], q[1], q[4] );
		CNOT( q[1], q[0] );
		Toffoli( q[3], anc[1], q[2] );
		Toffoli( anc[0], q[0], q[4] );
		Toffoli( q[4], anc[0], anc[1] );
		Toffoli( q[1], anc[1], q[3] );
		Toffoli( q[2], q[0], anc[0] );
		Toffoli( anc[1], q[4], anc[0] );
		CNOT( q[0], anc[0] );
		CNOT( q[4], q[0] );
		CNOT( q[3], anc[1] );
		CNOT( q[2], q[3] );
		Toffoli( q[4], q[0], q[3] );
		CNOT( anc[1], anc[0] );
		CNOT( anc[1], anc[0] );
		CNOT( q[3], anc[0] );
		Toffoli( q[0], q[4], anc[1] );
		CNOT( q[1], q[3] );
		Toffoli( q[4], q[1], anc[0] );
		CNOT( q[0], q[1] );
		CNOT( q[0], q[4] );
		CNOT( q[1], anc[1] );
		CNOT( anc[1], q[4] );
	}
	Restore {
		CNOT( q[0], res[0] );
		CNOT( q[3], res[1] );
		CNOT( q[2], res[2] );
		CNOT( q[1], res[3] );
		CNOT( q[4], res[4] );
	}
	Unrecompute {
		CNOT( anc[1], q[4] );
		CNOT( q[1], anc[1] );
		CNOT( q[0], q[4] );
		CNOT( q[0], q[1] );
		Toffoli( q[4], q[1], anc[0] );
		CNOT( q[1], q[3] );
		Toffoli( q[0], q[4], anc[1] );
		CNOT( q[3], anc[0] );
		CNOT( anc[1], anc[0] );
		CNOT( anc[1], anc[0] );
		Toffoli( q[4], q[0], q[3] );
		CNOT( q[2], q[3] );
		CNOT( q[3], anc[1] );
		CNOT( q[4], q[0] );
		CNOT( q[0], anc[0] );
		Toffoli( anc[1], q[4], anc[0] );
		Toffoli( q[2], q[0], anc[0] );
		Toffoli( q[1], anc[1], q[3] );
		Toffoli( q[4], anc[0], anc[1] );
		Toffoli( anc[0], q[0], q[4] );
		Toffoli( q[3], anc[1], q[2] );
		CNOT( q[1], q[0] );
		Toffoli( q[3], q[1], q[4] );
		Toffoli( q[1], q[4], q[0] );
		CNOT( q[4], q[2] );
		CNOT( q[0], anc[1] );
		CNOT( q[1], anc[1] );
		CNOT( q[3], q[4] );
		Toffoli( q[1], q[2], q[0] );
		CNOT( q[1], q[0] );
		Toffoli( q[2], q[3], q[4] );
		Toffoli( q[3], q[2], anc[0] );
		CNOT( q[1], q[0] );
		CNOT( q[0], q[4] );
		CNOT( q[0], q[3] );
		Toffoli( q[0], anc[0], q[1] );
		Toffoli( q[3], q[0], q[1] );
		CNOT( q[3], anc[0] );
		CNOT( anc[1], q[0] );
		Toffoli( q[4], q[1], anc[1] );
		CNOT( q[3], q[0] );
		Toffoli( q[2], q[3], q[4] );
		Toffoli( q[1], anc[1], q[4] );
		CNOT( q[1], q[3] );
		CNOT( q[4], q[0] );
		Toffoli( q[4], anc[0], q[3] );
		CNOT( q[3], q[1] );
		Toffoli( q[3], q[2], q[4] );
		CNOT( q[1], anc[1] );
		Toffoli( q[3], q[2], q[0] );
		CNOT( anc[1], q[0] );
		Toffoli( q[4], anc[0], q[1] );
		CNOT( q[4], anc[0] );
		Toffoli( q[0], q[3], q[2] );
		Toffoli( q[1], q[4], anc[0] );
		Toffoli( q[4], anc[0], q[1] );
		Toffoli( q[4], q[1], q[0] );
		Toffoli( q[3], anc[1], q[2] );
	} Refree(anc, 2) {}
}
// Function 33 with degree 0
// nq: 12, na: 1, ng: 19
void func33(qbit **q, int n) {
printf("func33\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[41]; // interacting bits
	qbit *res[12];
	nb[0] = q[3];
	nb[1] = q[7];
	nb[2] = q[0];
	nb[3] = q[7];
	nb[4] = q[6];
	nb[5] = q[10];
	nb[6] = q[0];
	nb[7] = q[9];
	nb[8] = q[4];
	nb[9] = q[0];
	nb[10] = q[2];
	nb[11] = q[3];
	nb[12] = q[8];
	nb[13] = q[10];
	nb[14] = q[3];
	nb[15] = q[9];
	nb[16] = q[5];
	nb[17] = q[1];
	nb[18] = q[4];
	nb[19] = q[5];
	nb[20] = q[6];
	nb[21] = q[9];
	nb[22] = q[4];
	nb[23] = q[0];
	nb[24] = q[3];
	nb[25] = q[8];
	nb[26] = q[7];
	nb[27] = q[10];
	nb[28] = q[3];
	nb[29] = q[1];
	nb[30] = q[3];
	nb[31] = q[0];
	nb[32] = q[5];
	nb[33] = q[9];
	nb[34] = q[6];
	nb[35] = q[5];
	nb[36] = q[0];
	nb[37] = q[3];
	nb[38] = q[1];
	nb[39] = q[3];
	nb[40] = q[4];
	res[0] = q[3];
	res[1] = q[7];
	res[2] = q[4];
	res[3] = q[9];
	res[4] = q[10];
	res[5] = q[0];
	res[6] = q[11];
	res[7] = q[2];
	res[8] = q[6];
	res[9] = q[1];
	res[10] = q[5];
	res[11] = q[8];
	// Leaf function
	Compute (0, 1, 50, 31, 0, 4, 0) {
		acquire(1, anc, 41, nb);
		CNOT( q[3], anc[0] );
		CNOT( q[7], q[0] );
		CNOT( q[7], q[6] );
		CNOT( q[10], q[0] );
		Toffoli( q[9], q[4], q[0] );
		CNOT( q[2], q[3] );
		CNOT( q[8], q[10] );
		CNOT( q[3], q[9] );
		Toffoli( anc[0], q[5], q[1] );
		CNOT( q[4], q[5] );
		Toffoli( q[6], q[9], q[4] );
		Toffoli( anc[0], q[0], q[3] );
		CNOT( q[8], q[7] );
		Toffoli( q[10], q[3], q[1] );
		Toffoli( q[3], q[0], anc[0] );
		CNOT( q[5], q[9] );
		Toffoli( q[6], q[5], anc[0] );
		CNOT( q[0], q[3] );
		Toffoli( q[1], q[3], q[4] );
	}
	Store {
		CNOT( q[10], res[0] );
		CNOT( q[9], res[1] );
		CNOT( q[3], res[2] );
		CNOT( q[4], res[3] );
		CNOT( q[6], res[4] );
		CNOT( q[5], res[5] );
		CNOT( q[7], res[6] );
		CNOT( q[8], res[7] );
		CNOT( q[0], res[8] );
		CNOT( q[11], res[9] );
		CNOT( q[2], res[10] );
		CNOT( q[1], res[11] );
	}
	Uncompute(res, 0, anc, 1, 50, 31){
		Toffoli( q[1], q[3], q[4] );
		CNOT( q[0], q[3] );
		Toffoli( q[6], q[5], anc[0] );
		CNOT( q[5], q[9] );
		Toffoli( q[3], q[0], anc[0] );
		Toffoli( q[10], q[3], q[1] );
		CNOT( q[8], q[7] );
		Toffoli( anc[0], q[0], q[3] );
		Toffoli( q[6], q[9], q[4] );
		CNOT( q[4], q[5] );
		Toffoli( anc[0], q[5], q[1] );
		CNOT( q[3], q[9] );
		CNOT( q[8], q[10] );
		CNOT( q[2], q[3] );
		Toffoli( q[9], q[4], q[0] );
		CNOT( q[10], q[0] );
		CNOT( q[7], q[6] );
		CNOT( q[7], q[0] );
		CNOT( q[3], anc[0] );
	} Free(anc, 1) {}
}
// Function 33 with degree 0
// nq: 12, na: 1, ng: 19
void func33R(qbit **q, int n) {
printf("func33R\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[41]; // interacting bits
	qbit *res[12];
	nb[0] = q[3];
	nb[1] = q[7];
	nb[2] = q[0];
	nb[3] = q[7];
	nb[4] = q[6];
	nb[5] = q[10];
	nb[6] = q[0];
	nb[7] = q[9];
	nb[8] = q[4];
	nb[9] = q[0];
	nb[10] = q[2];
	nb[11] = q[3];
	nb[12] = q[8];
	nb[13] = q[10];
	nb[14] = q[3];
	nb[15] = q[9];
	nb[16] = q[5];
	nb[17] = q[1];
	nb[18] = q[4];
	nb[19] = q[5];
	nb[20] = q[6];
	nb[21] = q[9];
	nb[22] = q[4];
	nb[23] = q[0];
	nb[24] = q[3];
	nb[25] = q[8];
	nb[26] = q[7];
	nb[27] = q[10];
	nb[28] = q[3];
	nb[29] = q[1];
	nb[30] = q[3];
	nb[31] = q[0];
	nb[32] = q[5];
	nb[33] = q[9];
	nb[34] = q[6];
	nb[35] = q[5];
	nb[36] = q[0];
	nb[37] = q[3];
	nb[38] = q[1];
	nb[39] = q[3];
	nb[40] = q[4];
	res[0] = q[3];
	res[1] = q[7];
	res[2] = q[4];
	res[3] = q[9];
	res[4] = q[10];
	res[5] = q[0];
	res[6] = q[11];
	res[7] = q[2];
	res[8] = q[6];
	res[9] = q[1];
	res[10] = q[5];
	res[11] = q[8];
	// Leaf function
	_computeModule(0, 1, 50, 31, 0, 4, 0);
	acquire(1, anc, 41, nb);
	Recompute (res, 0, anc, 1, 50, 31){
		Toffoli( q[1], q[3], q[4] );
		CNOT( q[0], q[3] );
		Toffoli( q[6], q[5], anc[0] );
		CNOT( q[5], q[9] );
		Toffoli( q[3], q[0], anc[0] );
		Toffoli( q[10], q[3], q[1] );
		CNOT( q[8], q[7] );
		Toffoli( anc[0], q[0], q[3] );
		Toffoli( q[6], q[9], q[4] );
		CNOT( q[4], q[5] );
		Toffoli( anc[0], q[5], q[1] );
		CNOT( q[3], q[9] );
		CNOT( q[8], q[10] );
		CNOT( q[2], q[3] );
		Toffoli( q[9], q[4], q[0] );
		CNOT( q[10], q[0] );
		CNOT( q[7], q[6] );
		CNOT( q[7], q[0] );
		CNOT( q[3], anc[0] );
	}
	Restore {
		CNOT( q[10], res[0] );
		CNOT( q[9], res[1] );
		CNOT( q[3], res[2] );
		CNOT( q[4], res[3] );
		CNOT( q[6], res[4] );
		CNOT( q[5], res[5] );
		CNOT( q[7], res[6] );
		CNOT( q[8], res[7] );
		CNOT( q[0], res[8] );
		CNOT( q[11], res[9] );
		CNOT( q[2], res[10] );
		CNOT( q[1], res[11] );
	}
	Unrecompute {
		CNOT( q[3], anc[0] );
		CNOT( q[7], q[0] );
		CNOT( q[7], q[6] );
		CNOT( q[10], q[0] );
		Toffoli( q[9], q[4], q[0] );
		CNOT( q[2], q[3] );
		CNOT( q[8], q[10] );
		CNOT( q[3], q[9] );
		Toffoli( anc[0], q[5], q[1] );
		CNOT( q[4], q[5] );
		Toffoli( q[6], q[9], q[4] );
		Toffoli( anc[0], q[0], q[3] );
		CNOT( q[8], q[7] );
		Toffoli( q[10], q[3], q[1] );
		Toffoli( q[3], q[0], anc[0] );
		CNOT( q[5], q[9] );
		Toffoli( q[6], q[5], anc[0] );
		CNOT( q[0], q[3] );
		Toffoli( q[1], q[3], q[4] );
	} Refree(anc, 1) {}
}
// Function 32 with degree 0
// nq: 6, na: 8, ng: 24
void func32(qbit **q, int n) {
printf("func32\n");
fflush(stderr);
	qbit *anc[8]; // ancilla
	qbit *nb[22]; // interacting bits
	qbit *res[2];
	nb[0] = q[5];
	nb[1] = q[1];
	nb[2] = q[2];
	nb[3] = q[0];
	nb[4] = q[1];
	nb[5] = q[4];
	nb[6] = q[1];
	nb[7] = q[3];
	nb[8] = q[4];
	nb[9] = q[2];
	nb[10] = q[0];
	nb[11] = q[2];
	nb[12] = q[5];
	nb[13] = q[4];
	nb[14] = q[3];
	nb[15] = q[0];
	nb[16] = q[4];
	nb[17] = q[2];
	nb[18] = q[1];
	nb[19] = q[4];
	nb[20] = q[4];
	nb[21] = q[2];
	res[0] = q[3];
	res[1] = q[2];
	// Leaf function
	Compute (0, 8, 50, 26, 0, 4, 0) {
		acquire(8, anc, 22, nb);
		CNOT( anc[1], anc[2] );
		Toffoli( anc[5], q[5], q[1] );
		Toffoli( q[2], anc[1], q[0] );
		CNOT( anc[1], q[1] );
		Toffoli( anc[1], anc[3], anc[7] );
		Toffoli( q[4], anc[3], anc[5] );
		Toffoli( q[1], anc[2], anc[0] );
		Toffoli( anc[5], anc[4], q[3] );
		CNOT( q[4], anc[1] );
		Toffoli( q[2], q[0], anc[6] );
		Toffoli( q[2], anc[3], anc[1] );
		CNOT( anc[1], anc[5] );
		CNOT( anc[7], q[5] );
		CNOT( anc[2], anc[5] );
		CNOT( anc[2], anc[1] );
		CNOT( anc[6], q[4] );
		CNOT( q[3], q[0] );
		CNOT( anc[0], anc[2] );
		Toffoli( q[4], anc[2], anc[4] );
		Toffoli( q[2], q[1], anc[2] );
		Toffoli( q[4], anc[4], anc[7] );
		CNOT( anc[5], anc[0] );
		Toffoli( q[4], anc[5], anc[4] );
		CNOT( q[2], anc[4] );
	}
	Store {
		CNOT( anc[7], res[0] );
		CNOT( anc[6], res[1] );
	}
	Uncompute(res, 0, anc, 8, 50, 26){
		CNOT( q[2], anc[4] );
		Toffoli( q[4], anc[5], anc[4] );
		CNOT( anc[5], anc[0] );
		Toffoli( q[4], anc[4], anc[7] );
		Toffoli( q[2], q[1], anc[2] );
		Toffoli( q[4], anc[2], anc[4] );
		CNOT( anc[0], anc[2] );
		CNOT( q[3], q[0] );
		CNOT( anc[6], q[4] );
		CNOT( anc[2], anc[1] );
		CNOT( anc[2], anc[5] );
		CNOT( anc[7], q[5] );
		CNOT( anc[1], anc[5] );
		Toffoli( q[2], anc[3], anc[1] );
		Toffoli( q[2], q[0], anc[6] );
		CNOT( q[4], anc[1] );
		Toffoli( anc[5], anc[4], q[3] );
		Toffoli( q[1], anc[2], anc[0] );
		Toffoli( q[4], anc[3], anc[5] );
		Toffoli( anc[1], anc[3], anc[7] );
		CNOT( anc[1], q[1] );
		Toffoli( q[2], anc[1], q[0] );
		Toffoli( anc[5], q[5], q[1] );
		CNOT( anc[1], anc[2] );
	} Free(anc, 8) {}
}
// Function 32 with degree 0
// nq: 6, na: 8, ng: 24
void func32R(qbit **q, int n) {
printf("func32R\n");
fflush(stderr);
	qbit *anc[8]; // ancilla
	qbit *nb[22]; // interacting bits
	qbit *res[2];
	nb[0] = q[5];
	nb[1] = q[1];
	nb[2] = q[2];
	nb[3] = q[0];
	nb[4] = q[1];
	nb[5] = q[4];
	nb[6] = q[1];
	nb[7] = q[3];
	nb[8] = q[4];
	nb[9] = q[2];
	nb[10] = q[0];
	nb[11] = q[2];
	nb[12] = q[5];
	nb[13] = q[4];
	nb[14] = q[3];
	nb[15] = q[0];
	nb[16] = q[4];
	nb[17] = q[2];
	nb[18] = q[1];
	nb[19] = q[4];
	nb[20] = q[4];
	nb[21] = q[2];
	res[0] = q[3];
	res[1] = q[2];
	// Leaf function
	_computeModule(0, 8, 50, 26, 0, 4, 0);
	acquire(8, anc, 22, nb);
	Recompute (res, 0, anc, 8, 50, 26){
		CNOT( q[2], anc[4] );
		Toffoli( q[4], anc[5], anc[4] );
		CNOT( anc[5], anc[0] );
		Toffoli( q[4], anc[4], anc[7] );
		Toffoli( q[2], q[1], anc[2] );
		Toffoli( q[4], anc[2], anc[4] );
		CNOT( anc[0], anc[2] );
		CNOT( q[3], q[0] );
		CNOT( anc[6], q[4] );
		CNOT( anc[2], anc[1] );
		CNOT( anc[2], anc[5] );
		CNOT( anc[7], q[5] );
		CNOT( anc[1], anc[5] );
		Toffoli( q[2], anc[3], anc[1] );
		Toffoli( q[2], q[0], anc[6] );
		CNOT( q[4], anc[1] );
		Toffoli( anc[5], anc[4], q[3] );
		Toffoli( q[1], anc[2], anc[0] );
		Toffoli( q[4], anc[3], anc[5] );
		Toffoli( anc[1], anc[3], anc[7] );
		CNOT( anc[1], q[1] );
		Toffoli( q[2], anc[1], q[0] );
		Toffoli( anc[5], q[5], q[1] );
		CNOT( anc[1], anc[2] );
	}
	Restore {
		CNOT( anc[7], res[0] );
		CNOT( anc[6], res[1] );
	}
	Unrecompute {
		CNOT( anc[1], anc[2] );
		Toffoli( anc[5], q[5], q[1] );
		Toffoli( q[2], anc[1], q[0] );
		CNOT( anc[1], q[1] );
		Toffoli( anc[1], anc[3], anc[7] );
		Toffoli( q[4], anc[3], anc[5] );
		Toffoli( q[1], anc[2], anc[0] );
		Toffoli( anc[5], anc[4], q[3] );
		CNOT( q[4], anc[1] );
		Toffoli( q[2], q[0], anc[6] );
		Toffoli( q[2], anc[3], anc[1] );
		CNOT( anc[1], anc[5] );
		CNOT( anc[7], q[5] );
		CNOT( anc[2], anc[5] );
		CNOT( anc[2], anc[1] );
		CNOT( anc[6], q[4] );
		CNOT( q[3], q[0] );
		CNOT( anc[0], anc[2] );
		Toffoli( q[4], anc[2], anc[4] );
		Toffoli( q[2], q[1], anc[2] );
		Toffoli( q[4], anc[4], anc[7] );
		CNOT( anc[5], anc[0] );
		Toffoli( q[4], anc[5], anc[4] );
		CNOT( q[2], anc[4] );
	} Refree(anc, 8) {}
}
// Function 31 with degree 0
// nq: 13, na: 4, ng: 48
void func31(qbit **q, int n) {
printf("func31\n");
fflush(stderr);
	qbit *anc[4]; // ancilla
	qbit *nb[94]; // interacting bits
	qbit *res[12];
	nb[0] = q[0];
	nb[1] = q[6];
	nb[2] = q[9];
	nb[3] = q[3];
	nb[4] = q[12];
	nb[5] = q[10];
	nb[6] = q[1];
	nb[7] = q[4];
	nb[8] = q[6];
	nb[9] = q[9];
	nb[10] = q[12];
	nb[11] = q[5];
	nb[12] = q[6];
	nb[13] = q[3];
	nb[14] = q[3];
	nb[15] = q[0];
	nb[16] = q[11];
	nb[17] = q[12];
	nb[18] = q[8];
	nb[19] = q[10];
	nb[20] = q[3];
	nb[21] = q[9];
	nb[22] = q[8];
	nb[23] = q[4];
	nb[24] = q[1];
	nb[25] = q[12];
	nb[26] = q[3];
	nb[27] = q[7];
	nb[28] = q[7];
	nb[29] = q[3];
	nb[30] = q[9];
	nb[31] = q[3];
	nb[32] = q[11];
	nb[33] = q[4];
	nb[34] = q[3];
	nb[35] = q[8];
	nb[36] = q[11];
	nb[37] = q[5];
	nb[38] = q[8];
	nb[39] = q[2];
	nb[40] = q[8];
	nb[41] = q[12];
	nb[42] = q[1];
	nb[43] = q[4];
	nb[44] = q[8];
	nb[45] = q[2];
	nb[46] = q[3];
	nb[47] = q[11];
	nb[48] = q[0];
	nb[49] = q[1];
	nb[50] = q[1];
	nb[51] = q[3];
	nb[52] = q[5];
	nb[53] = q[10];
	nb[54] = q[11];
	nb[55] = q[8];
	nb[56] = q[9];
	nb[57] = q[12];
	nb[58] = q[9];
	nb[59] = q[7];
	nb[60] = q[4];
	nb[61] = q[12];
	nb[62] = q[1];
	nb[63] = q[4];
	nb[64] = q[5];
	nb[65] = q[7];
	nb[66] = q[2];
	nb[67] = q[11];
	nb[68] = q[7];
	nb[69] = q[3];
	nb[70] = q[5];
	nb[71] = q[0];
	nb[72] = q[4];
	nb[73] = q[11];
	nb[74] = q[11];
	nb[75] = q[10];
	nb[76] = q[8];
	nb[77] = q[1];
	nb[78] = q[9];
	nb[79] = q[0];
	nb[80] = q[4];
	nb[81] = q[11];
	nb[82] = q[4];
	nb[83] = q[5];
	nb[84] = q[0];
	nb[85] = q[6];
	nb[86] = q[9];
	nb[87] = q[2];
	nb[88] = q[12];
	nb[89] = q[11];
	nb[90] = q[7];
	nb[91] = q[0];
	nb[92] = q[5];
	nb[93] = q[3];
	res[0] = q[8];
	res[1] = q[9];
	res[2] = q[3];
	res[3] = q[2];
	res[4] = q[12];
	res[5] = q[4];
	res[6] = q[6];
	res[7] = q[10];
	res[8] = q[5];
	res[9] = q[0];
	res[10] = q[1];
	res[11] = q[11];
	// Leaf function
	Compute (0, 4, 108, 60, 0, 4, 0) {
		acquire(4, anc, 94, nb);
		Toffoli( anc[2], q[0], q[6] );
		CNOT( q[9], q[3] );
		CNOT( anc[1], q[12] );
		CNOT( q[10], q[1] );
		Toffoli( q[4], q[6], q[9] );
		CNOT( q[12], q[5] );
		Toffoli( anc[0], q[6], q[3] );
		Toffoli( q[3], anc[2], q[0] );
		Toffoli( q[11], q[12], q[8] );
		Toffoli( anc[0], anc[1], q[10] );
		CNOT( anc[1], q[3] );
		Toffoli( q[9], anc[1], anc[0] );
		CNOT( q[8], q[4] );
		Toffoli( q[1], q[12], q[3] );
		CNOT( q[7], anc[0] );
		Toffoli( q[7], q[3], q[9] );
		CNOT( q[3], q[11] );
		Toffoli( q[4], q[3], anc[0] );
		Toffoli( q[8], anc[3], q[11] );
		CNOT( q[5], q[8] );
		Toffoli( q[2], q[8], q[12] );
		CNOT( q[1], anc[0] );
		Toffoli( q[4], q[8], anc[2] );
		CNOT( anc[0], q[2] );
		Toffoli( q[3], q[11], q[0] );
		CNOT( q[1], anc[1] );
		Toffoli( q[1], anc[1], q[3] );
		Toffoli( q[5], q[10], q[11] );
		Toffoli( q[8], q[9], q[12] );
		CNOT( q[9], anc[2] );
		Toffoli( q[7], q[4], q[12] );
		CNOT( q[1], anc[1] );
		Toffoli( q[4], q[5], q[7] );
		Toffoli( q[2], anc[2], q[11] );
		Toffoli( anc[2], q[7], q[3] );
		CNOT( q[5], q[0] );
		Toffoli( anc[1], q[4], anc[2] );
		Toffoli( anc[0], q[11], anc[2] );
		Toffoli( anc[3], q[11], anc[0] );
		Toffoli( q[10], q[8], q[1] );
		CNOT( anc[1], anc[0] );
		CNOT( q[9], q[0] );
		Toffoli( q[4], anc[1], q[11] );
		Toffoli( q[4], q[5], q[0] );
		CNOT( q[6], q[9] );
		Toffoli( q[2], anc[2], q[12] );
		Toffoli( q[11], anc[1], q[7] );
		Toffoli( q[0], q[5], q[3] );
	}
	Store {
		CNOT( anc[0], res[0] );
		CNOT( q[0], res[1] );
		CNOT( anc[2], res[2] );
		CNOT( q[7], res[3] );
		CNOT( anc[0], res[4] );
		CNOT( q[1], res[5] );
		CNOT( q[8], res[6] );
		CNOT( anc[3], res[7] );
		CNOT( q[9], res[8] );
		CNOT( q[3], res[9] );
		CNOT( q[11], res[10] );
		CNOT( q[4], res[11] );
	}
	Uncompute(res, 0, anc, 4, 108, 60){
		Toffoli( q[0], q[5], q[3] );
		Toffoli( q[11], anc[1], q[7] );
		Toffoli( q[2], anc[2], q[12] );
		CNOT( q[6], q[9] );
		Toffoli( q[4], q[5], q[0] );
		Toffoli( q[4], anc[1], q[11] );
		CNOT( q[9], q[0] );
		CNOT( anc[1], anc[0] );
		Toffoli( q[10], q[8], q[1] );
		Toffoli( anc[3], q[11], anc[0] );
		Toffoli( anc[0], q[11], anc[2] );
		Toffoli( anc[1], q[4], anc[2] );
		CNOT( q[5], q[0] );
		Toffoli( anc[2], q[7], q[3] );
		Toffoli( q[2], anc[2], q[11] );
		Toffoli( q[4], q[5], q[7] );
		CNOT( q[1], anc[1] );
		Toffoli( q[7], q[4], q[12] );
		CNOT( q[9], anc[2] );
		Toffoli( q[8], q[9], q[12] );
		Toffoli( q[5], q[10], q[11] );
		Toffoli( q[1], anc[1], q[3] );
		CNOT( q[1], anc[1] );
		Toffoli( q[3], q[11], q[0] );
		CNOT( anc[0], q[2] );
		Toffoli( q[4], q[8], anc[2] );
		CNOT( q[1], anc[0] );
		Toffoli( q[2], q[8], q[12] );
		CNOT( q[5], q[8] );
		Toffoli( q[8], anc[3], q[11] );
		Toffoli( q[4], q[3], anc[0] );
		CNOT( q[3], q[11] );
		Toffoli( q[7], q[3], q[9] );
		CNOT( q[7], anc[0] );
		Toffoli( q[1], q[12], q[3] );
		CNOT( q[8], q[4] );
		Toffoli( q[9], anc[1], anc[0] );
		CNOT( anc[1], q[3] );
		Toffoli( anc[0], anc[1], q[10] );
		Toffoli( q[11], q[12], q[8] );
		Toffoli( q[3], anc[2], q[0] );
		Toffoli( anc[0], q[6], q[3] );
		CNOT( q[12], q[5] );
		Toffoli( q[4], q[6], q[9] );
		CNOT( q[10], q[1] );
		CNOT( anc[1], q[12] );
		CNOT( q[9], q[3] );
		Toffoli( anc[2], q[0], q[6] );
	} Free(anc, 4) {}
}
// Function 31 with degree 0
// nq: 13, na: 4, ng: 48
void func31R(qbit **q, int n) {
printf("func31R\n");
fflush(stderr);
	qbit *anc[4]; // ancilla
	qbit *nb[94]; // interacting bits
	qbit *res[12];
	nb[0] = q[0];
	nb[1] = q[6];
	nb[2] = q[9];
	nb[3] = q[3];
	nb[4] = q[12];
	nb[5] = q[10];
	nb[6] = q[1];
	nb[7] = q[4];
	nb[8] = q[6];
	nb[9] = q[9];
	nb[10] = q[12];
	nb[11] = q[5];
	nb[12] = q[6];
	nb[13] = q[3];
	nb[14] = q[3];
	nb[15] = q[0];
	nb[16] = q[11];
	nb[17] = q[12];
	nb[18] = q[8];
	nb[19] = q[10];
	nb[20] = q[3];
	nb[21] = q[9];
	nb[22] = q[8];
	nb[23] = q[4];
	nb[24] = q[1];
	nb[25] = q[12];
	nb[26] = q[3];
	nb[27] = q[7];
	nb[28] = q[7];
	nb[29] = q[3];
	nb[30] = q[9];
	nb[31] = q[3];
	nb[32] = q[11];
	nb[33] = q[4];
	nb[34] = q[3];
	nb[35] = q[8];
	nb[36] = q[11];
	nb[37] = q[5];
	nb[38] = q[8];
	nb[39] = q[2];
	nb[40] = q[8];
	nb[41] = q[12];
	nb[42] = q[1];
	nb[43] = q[4];
	nb[44] = q[8];
	nb[45] = q[2];
	nb[46] = q[3];
	nb[47] = q[11];
	nb[48] = q[0];
	nb[49] = q[1];
	nb[50] = q[1];
	nb[51] = q[3];
	nb[52] = q[5];
	nb[53] = q[10];
	nb[54] = q[11];
	nb[55] = q[8];
	nb[56] = q[9];
	nb[57] = q[12];
	nb[58] = q[9];
	nb[59] = q[7];
	nb[60] = q[4];
	nb[61] = q[12];
	nb[62] = q[1];
	nb[63] = q[4];
	nb[64] = q[5];
	nb[65] = q[7];
	nb[66] = q[2];
	nb[67] = q[11];
	nb[68] = q[7];
	nb[69] = q[3];
	nb[70] = q[5];
	nb[71] = q[0];
	nb[72] = q[4];
	nb[73] = q[11];
	nb[74] = q[11];
	nb[75] = q[10];
	nb[76] = q[8];
	nb[77] = q[1];
	nb[78] = q[9];
	nb[79] = q[0];
	nb[80] = q[4];
	nb[81] = q[11];
	nb[82] = q[4];
	nb[83] = q[5];
	nb[84] = q[0];
	nb[85] = q[6];
	nb[86] = q[9];
	nb[87] = q[2];
	nb[88] = q[12];
	nb[89] = q[11];
	nb[90] = q[7];
	nb[91] = q[0];
	nb[92] = q[5];
	nb[93] = q[3];
	res[0] = q[8];
	res[1] = q[9];
	res[2] = q[3];
	res[3] = q[2];
	res[4] = q[12];
	res[5] = q[4];
	res[6] = q[6];
	res[7] = q[10];
	res[8] = q[5];
	res[9] = q[0];
	res[10] = q[1];
	res[11] = q[11];
	// Leaf function
	_computeModule(0, 4, 108, 60, 0, 4, 0);
	acquire(4, anc, 94, nb);
	Recompute (res, 0, anc, 4, 108, 60){
		Toffoli( q[0], q[5], q[3] );
		Toffoli( q[11], anc[1], q[7] );
		Toffoli( q[2], anc[2], q[12] );
		CNOT( q[6], q[9] );
		Toffoli( q[4], q[5], q[0] );
		Toffoli( q[4], anc[1], q[11] );
		CNOT( q[9], q[0] );
		CNOT( anc[1], anc[0] );
		Toffoli( q[10], q[8], q[1] );
		Toffoli( anc[3], q[11], anc[0] );
		Toffoli( anc[0], q[11], anc[2] );
		Toffoli( anc[1], q[4], anc[2] );
		CNOT( q[5], q[0] );
		Toffoli( anc[2], q[7], q[3] );
		Toffoli( q[2], anc[2], q[11] );
		Toffoli( q[4], q[5], q[7] );
		CNOT( q[1], anc[1] );
		Toffoli( q[7], q[4], q[12] );
		CNOT( q[9], anc[2] );
		Toffoli( q[8], q[9], q[12] );
		Toffoli( q[5], q[10], q[11] );
		Toffoli( q[1], anc[1], q[3] );
		CNOT( q[1], anc[1] );
		Toffoli( q[3], q[11], q[0] );
		CNOT( anc[0], q[2] );
		Toffoli( q[4], q[8], anc[2] );
		CNOT( q[1], anc[0] );
		Toffoli( q[2], q[8], q[12] );
		CNOT( q[5], q[8] );
		Toffoli( q[8], anc[3], q[11] );
		Toffoli( q[4], q[3], anc[0] );
		CNOT( q[3], q[11] );
		Toffoli( q[7], q[3], q[9] );
		CNOT( q[7], anc[0] );
		Toffoli( q[1], q[12], q[3] );
		CNOT( q[8], q[4] );
		Toffoli( q[9], anc[1], anc[0] );
		CNOT( anc[1], q[3] );
		Toffoli( anc[0], anc[1], q[10] );
		Toffoli( q[11], q[12], q[8] );
		Toffoli( q[3], anc[2], q[0] );
		Toffoli( anc[0], q[6], q[3] );
		CNOT( q[12], q[5] );
		Toffoli( q[4], q[6], q[9] );
		CNOT( q[10], q[1] );
		CNOT( anc[1], q[12] );
		CNOT( q[9], q[3] );
		Toffoli( anc[2], q[0], q[6] );
	}
	Restore {
		CNOT( anc[0], res[0] );
		CNOT( q[0], res[1] );
		CNOT( anc[2], res[2] );
		CNOT( q[7], res[3] );
		CNOT( anc[0], res[4] );
		CNOT( q[1], res[5] );
		CNOT( q[8], res[6] );
		CNOT( anc[3], res[7] );
		CNOT( q[9], res[8] );
		CNOT( q[3], res[9] );
		CNOT( q[11], res[10] );
		CNOT( q[4], res[11] );
	}
	Unrecompute {
		Toffoli( anc[2], q[0], q[6] );
		CNOT( q[9], q[3] );
		CNOT( anc[1], q[12] );
		CNOT( q[10], q[1] );
		Toffoli( q[4], q[6], q[9] );
		CNOT( q[12], q[5] );
		Toffoli( anc[0], q[6], q[3] );
		Toffoli( q[3], anc[2], q[0] );
		Toffoli( q[11], q[12], q[8] );
		Toffoli( anc[0], anc[1], q[10] );
		CNOT( anc[1], q[3] );
		Toffoli( q[9], anc[1], anc[0] );
		CNOT( q[8], q[4] );
		Toffoli( q[1], q[12], q[3] );
		CNOT( q[7], anc[0] );
		Toffoli( q[7], q[3], q[9] );
		CNOT( q[3], q[11] );
		Toffoli( q[4], q[3], anc[0] );
		Toffoli( q[8], anc[3], q[11] );
		CNOT( q[5], q[8] );
		Toffoli( q[2], q[8], q[12] );
		CNOT( q[1], anc[0] );
		Toffoli( q[4], q[8], anc[2] );
		CNOT( anc[0], q[2] );
		Toffoli( q[3], q[11], q[0] );
		CNOT( q[1], anc[1] );
		Toffoli( q[1], anc[1], q[3] );
		Toffoli( q[5], q[10], q[11] );
		Toffoli( q[8], q[9], q[12] );
		CNOT( q[9], anc[2] );
		Toffoli( q[7], q[4], q[12] );
		CNOT( q[1], anc[1] );
		Toffoli( q[4], q[5], q[7] );
		Toffoli( q[2], anc[2], q[11] );
		Toffoli( anc[2], q[7], q[3] );
		CNOT( q[5], q[0] );
		Toffoli( anc[1], q[4], anc[2] );
		Toffoli( anc[0], q[11], anc[2] );
		Toffoli( anc[3], q[11], anc[0] );
		Toffoli( q[10], q[8], q[1] );
		CNOT( anc[1], anc[0] );
		CNOT( q[9], q[0] );
		Toffoli( q[4], anc[1], q[11] );
		Toffoli( q[4], q[5], q[0] );
		CNOT( q[6], q[9] );
		Toffoli( q[2], anc[2], q[12] );
		Toffoli( q[11], anc[1], q[7] );
		Toffoli( q[0], q[5], q[3] );
	} Refree(anc, 4) {}
}
// Function 30 with degree 0
// nq: 12, na: 7, ng: 21
void func30(qbit **q, int n) {
printf("func30\n");
fflush(stderr);
	qbit *anc[7]; // ancilla
	qbit *nb[34]; // interacting bits
	qbit *res[9];
	nb[0] = q[1];
	nb[1] = q[2];
	nb[2] = q[6];
	nb[3] = q[4];
	nb[4] = q[5];
	nb[5] = q[11];
	nb[6] = q[3];
	nb[7] = q[9];
	nb[8] = q[2];
	nb[9] = q[9];
	nb[10] = q[7];
	nb[11] = q[1];
	nb[12] = q[4];
	nb[13] = q[5];
	nb[14] = q[10];
	nb[15] = q[6];
	nb[16] = q[7];
	nb[17] = q[11];
	nb[18] = q[2];
	nb[19] = q[5];
	nb[20] = q[7];
	nb[21] = q[8];
	nb[22] = q[7];
	nb[23] = q[0];
	nb[24] = q[4];
	nb[25] = q[3];
	nb[26] = q[5];
	nb[27] = q[2];
	nb[28] = q[4];
	nb[29] = q[0];
	nb[30] = q[1];
	nb[31] = q[7];
	nb[32] = q[3];
	nb[33] = q[8];
	res[0] = q[2];
	res[1] = q[9];
	res[2] = q[3];
	res[3] = q[10];
	res[4] = q[7];
	res[5] = q[8];
	res[6] = q[0];
	res[7] = q[6];
	res[8] = q[11];
	// Leaf function
	Compute (0, 7, 51, 30, 0, 4, 0) {
		acquire(7, anc, 34, nb);
		Toffoli( anc[0], q[1], q[2] );
		CNOT( anc[6], anc[4] );
		CNOT( q[6], q[4] );
		Toffoli( q[5], q[11], q[3] );
		Toffoli( anc[0], anc[1], q[9] );
		CNOT( q[2], q[9] );
		CNOT( q[7], q[1] );
		CNOT( q[4], q[5] );
		CNOT( q[10], q[6] );
		Toffoli( q[7], q[11], anc[6] );
		Toffoli( q[2], q[5], q[7] );
		Toffoli( anc[1], q[8], q[7] );
		CNOT( anc[4], q[0] );
		CNOT( q[4], q[3] );
		CNOT( q[5], q[2] );
		CNOT( anc[5], anc[2] );
		Toffoli( anc[5], q[4], q[0] );
		Toffoli( q[1], q[7], anc[0] );
		CNOT( q[3], anc[3] );
		CNOT( anc[2], anc[0] );
		CNOT( anc[1], q[8] );
	}
	Store {
		CNOT( anc[3], res[0] );
		CNOT( anc[6], res[1] );
		CNOT( q[10], res[2] );
		CNOT( anc[2], res[3] );
		CNOT( anc[2], res[4] );
		CNOT( q[11], res[5] );
		CNOT( anc[4], res[6] );
		CNOT( anc[5], res[7] );
		CNOT( q[3], res[8] );
	}
	Uncompute(res, 0, anc, 7, 51, 30){
		CNOT( anc[1], q[8] );
		CNOT( anc[2], anc[0] );
		CNOT( q[3], anc[3] );
		Toffoli( q[1], q[7], anc[0] );
		Toffoli( anc[5], q[4], q[0] );
		CNOT( anc[5], anc[2] );
		CNOT( q[5], q[2] );
		CNOT( q[4], q[3] );
		CNOT( anc[4], q[0] );
		Toffoli( anc[1], q[8], q[7] );
		Toffoli( q[2], q[5], q[7] );
		Toffoli( q[7], q[11], anc[6] );
		CNOT( q[10], q[6] );
		CNOT( q[4], q[5] );
		CNOT( q[7], q[1] );
		CNOT( q[2], q[9] );
		Toffoli( anc[0], anc[1], q[9] );
		Toffoli( q[5], q[11], q[3] );
		CNOT( q[6], q[4] );
		CNOT( anc[6], anc[4] );
		Toffoli( anc[0], q[1], q[2] );
	} Free(anc, 7) {}
}
// Function 30 with degree 0
// nq: 12, na: 7, ng: 21
void func30R(qbit **q, int n) {
printf("func30R\n");
fflush(stderr);
	qbit *anc[7]; // ancilla
	qbit *nb[34]; // interacting bits
	qbit *res[9];
	nb[0] = q[1];
	nb[1] = q[2];
	nb[2] = q[6];
	nb[3] = q[4];
	nb[4] = q[5];
	nb[5] = q[11];
	nb[6] = q[3];
	nb[7] = q[9];
	nb[8] = q[2];
	nb[9] = q[9];
	nb[10] = q[7];
	nb[11] = q[1];
	nb[12] = q[4];
	nb[13] = q[5];
	nb[14] = q[10];
	nb[15] = q[6];
	nb[16] = q[7];
	nb[17] = q[11];
	nb[18] = q[2];
	nb[19] = q[5];
	nb[20] = q[7];
	nb[21] = q[8];
	nb[22] = q[7];
	nb[23] = q[0];
	nb[24] = q[4];
	nb[25] = q[3];
	nb[26] = q[5];
	nb[27] = q[2];
	nb[28] = q[4];
	nb[29] = q[0];
	nb[30] = q[1];
	nb[31] = q[7];
	nb[32] = q[3];
	nb[33] = q[8];
	res[0] = q[2];
	res[1] = q[9];
	res[2] = q[3];
	res[3] = q[10];
	res[4] = q[7];
	res[5] = q[8];
	res[6] = q[0];
	res[7] = q[6];
	res[8] = q[11];
	// Leaf function
	_computeModule(0, 7, 51, 30, 0, 4, 0);
	acquire(7, anc, 34, nb);
	Recompute (res, 0, anc, 7, 51, 30){
		CNOT( anc[1], q[8] );
		CNOT( anc[2], anc[0] );
		CNOT( q[3], anc[3] );
		Toffoli( q[1], q[7], anc[0] );
		Toffoli( anc[5], q[4], q[0] );
		CNOT( anc[5], anc[2] );
		CNOT( q[5], q[2] );
		CNOT( q[4], q[3] );
		CNOT( anc[4], q[0] );
		Toffoli( anc[1], q[8], q[7] );
		Toffoli( q[2], q[5], q[7] );
		Toffoli( q[7], q[11], anc[6] );
		CNOT( q[10], q[6] );
		CNOT( q[4], q[5] );
		CNOT( q[7], q[1] );
		CNOT( q[2], q[9] );
		Toffoli( anc[0], anc[1], q[9] );
		Toffoli( q[5], q[11], q[3] );
		CNOT( q[6], q[4] );
		CNOT( anc[6], anc[4] );
		Toffoli( anc[0], q[1], q[2] );
	}
	Restore {
		CNOT( anc[3], res[0] );
		CNOT( anc[6], res[1] );
		CNOT( q[10], res[2] );
		CNOT( anc[2], res[3] );
		CNOT( anc[2], res[4] );
		CNOT( q[11], res[5] );
		CNOT( anc[4], res[6] );
		CNOT( anc[5], res[7] );
		CNOT( q[3], res[8] );
	}
	Unrecompute {
		Toffoli( anc[0], q[1], q[2] );
		CNOT( anc[6], anc[4] );
		CNOT( q[6], q[4] );
		Toffoli( q[5], q[11], q[3] );
		Toffoli( anc[0], anc[1], q[9] );
		CNOT( q[2], q[9] );
		CNOT( q[7], q[1] );
		CNOT( q[4], q[5] );
		CNOT( q[10], q[6] );
		Toffoli( q[7], q[11], anc[6] );
		Toffoli( q[2], q[5], q[7] );
		Toffoli( anc[1], q[8], q[7] );
		CNOT( anc[4], q[0] );
		CNOT( q[4], q[3] );
		CNOT( q[5], q[2] );
		CNOT( anc[5], anc[2] );
		Toffoli( anc[5], q[4], q[0] );
		Toffoli( q[1], q[7], anc[0] );
		CNOT( q[3], anc[3] );
		CNOT( anc[2], anc[0] );
		CNOT( anc[1], q[8] );
	} Refree(anc, 7) {}
}
// Function 29 with degree 0
// nq: 11, na: 11, ng: 14
void func29(qbit **q, int n) {
printf("func29\n");
fflush(stderr);
	qbit *anc[11]; // ancilla
	qbit *nb[20]; // interacting bits
	qbit *res[7];
	nb[0] = q[6];
	nb[1] = q[7];
	nb[2] = q[3];
	nb[3] = q[2];
	nb[4] = q[6];
	nb[5] = q[4];
	nb[6] = q[5];
	nb[7] = q[2];
	nb[8] = q[4];
	nb[9] = q[5];
	nb[10] = q[5];
	nb[11] = q[4];
	nb[12] = q[7];
	nb[13] = q[0];
	nb[14] = q[4];
	nb[15] = q[5];
	nb[16] = q[1];
	nb[17] = q[2];
	nb[18] = q[0];
	nb[19] = q[6];
	res[0] = q[0];
	res[1] = q[4];
	res[2] = q[9];
	res[3] = q[2];
	res[4] = q[8];
	res[5] = q[6];
	res[6] = q[1];
	// Leaf function
	Compute (0, 11, 35, 21, 0, 3, 0) {
		acquire(11, anc, 20, nb);
		CNOT( q[6], q[7] );
		Toffoli( q[3], q[2], q[6] );
		CNOT( q[4], q[5] );
		CNOT( anc[5], q[2] );
		Toffoli( anc[5], anc[6], anc[4] );
		CNOT( q[4], q[5] );
		CNOT( anc[0], anc[4] );
		CNOT( anc[9], anc[6] );
		CNOT( q[5], q[4] );
		Toffoli( anc[3], q[7], q[0] );
		Toffoli( q[4], anc[0], anc[9] );
		Toffoli( anc[0], q[5], anc[3] );
		CNOT( q[1], q[2] );
		Toffoli( q[0], q[6], anc[10] );
	}
	Store {
		CNOT( q[9], res[0] );
		CNOT( anc[8], res[1] );
		CNOT( anc[0], res[2] );
		CNOT( q[0], res[3] );
		CNOT( anc[3], res[4] );
		CNOT( q[8], res[5] );
		CNOT( q[7], res[6] );
	}
	Uncompute(res, 0, anc, 11, 35, 21){
		Toffoli( q[0], q[6], anc[10] );
		CNOT( q[1], q[2] );
		Toffoli( anc[0], q[5], anc[3] );
		Toffoli( q[4], anc[0], anc[9] );
		Toffoli( anc[3], q[7], q[0] );
		CNOT( q[5], q[4] );
		CNOT( anc[9], anc[6] );
		CNOT( anc[0], anc[4] );
		CNOT( q[4], q[5] );
		Toffoli( anc[5], anc[6], anc[4] );
		CNOT( anc[5], q[2] );
		CNOT( q[4], q[5] );
		Toffoli( q[3], q[2], q[6] );
		CNOT( q[6], q[7] );
	} Free(anc, 11) {}
}
// Function 29 with degree 0
// nq: 11, na: 11, ng: 14
void func29R(qbit **q, int n) {
printf("func29R\n");
fflush(stderr);
	qbit *anc[11]; // ancilla
	qbit *nb[20]; // interacting bits
	qbit *res[7];
	nb[0] = q[6];
	nb[1] = q[7];
	nb[2] = q[3];
	nb[3] = q[2];
	nb[4] = q[6];
	nb[5] = q[4];
	nb[6] = q[5];
	nb[7] = q[2];
	nb[8] = q[4];
	nb[9] = q[5];
	nb[10] = q[5];
	nb[11] = q[4];
	nb[12] = q[7];
	nb[13] = q[0];
	nb[14] = q[4];
	nb[15] = q[5];
	nb[16] = q[1];
	nb[17] = q[2];
	nb[18] = q[0];
	nb[19] = q[6];
	res[0] = q[0];
	res[1] = q[4];
	res[2] = q[9];
	res[3] = q[2];
	res[4] = q[8];
	res[5] = q[6];
	res[6] = q[1];
	// Leaf function
	_computeModule(0, 11, 35, 21, 0, 3, 0);
	acquire(11, anc, 20, nb);
	Recompute (res, 0, anc, 11, 35, 21){
		Toffoli( q[0], q[6], anc[10] );
		CNOT( q[1], q[2] );
		Toffoli( anc[0], q[5], anc[3] );
		Toffoli( q[4], anc[0], anc[9] );
		Toffoli( anc[3], q[7], q[0] );
		CNOT( q[5], q[4] );
		CNOT( anc[9], anc[6] );
		CNOT( anc[0], anc[4] );
		CNOT( q[4], q[5] );
		Toffoli( anc[5], anc[6], anc[4] );
		CNOT( anc[5], q[2] );
		CNOT( q[4], q[5] );
		Toffoli( q[3], q[2], q[6] );
		CNOT( q[6], q[7] );
	}
	Restore {
		CNOT( q[9], res[0] );
		CNOT( anc[8], res[1] );
		CNOT( anc[0], res[2] );
		CNOT( q[0], res[3] );
		CNOT( anc[3], res[4] );
		CNOT( q[8], res[5] );
		CNOT( q[7], res[6] );
	}
	Unrecompute {
		CNOT( q[6], q[7] );
		Toffoli( q[3], q[2], q[6] );
		CNOT( q[4], q[5] );
		CNOT( anc[5], q[2] );
		Toffoli( anc[5], anc[6], anc[4] );
		CNOT( q[4], q[5] );
		CNOT( anc[0], anc[4] );
		CNOT( anc[9], anc[6] );
		CNOT( q[5], q[4] );
		Toffoli( anc[3], q[7], q[0] );
		Toffoli( q[4], anc[0], anc[9] );
		Toffoli( anc[0], q[5], anc[3] );
		CNOT( q[1], q[2] );
		Toffoli( q[0], q[6], anc[10] );
	} Refree(anc, 11) {}
}
// Function 28 with degree 0
// nq: 3, na: 10, ng: 53
void func28(qbit **q, int n) {
printf("func28\n");
fflush(stderr);
	qbit *anc[10]; // ancilla
	qbit *nb[31]; // interacting bits
	qbit *res[1];
	nb[0] = q[1];
	nb[1] = q[0];
	nb[2] = q[0];
	nb[3] = q[2];
	nb[4] = q[1];
	nb[5] = q[0];
	nb[6] = q[0];
	nb[7] = q[0];
	nb[8] = q[2];
	nb[9] = q[1];
	nb[10] = q[1];
	nb[11] = q[1];
	nb[12] = q[0];
	nb[13] = q[1];
	nb[14] = q[1];
	nb[15] = q[0];
	nb[16] = q[1];
	nb[17] = q[2];
	nb[18] = q[2];
	nb[19] = q[0];
	nb[20] = q[1];
	nb[21] = q[1];
	nb[22] = q[0];
	nb[23] = q[2];
	nb[24] = q[0];
	nb[25] = q[1];
	nb[26] = q[2];
	nb[27] = q[1];
	nb[28] = q[1];
	nb[29] = q[2];
	nb[30] = q[0];
	res[0] = q[2];
	// Leaf function
	Compute (0, 10, 107, 54, 0, 3, 0) {
		acquire(10, anc, 31, nb);
		CNOT( anc[2], anc[6] );
		Toffoli( anc[9], anc[4], anc[0] );
		CNOT( anc[9], q[1] );
		Toffoli( anc[4], q[0], anc[3] );
		CNOT( q[0], q[2] );
		Toffoli( q[1], q[0], anc[8] );
		Toffoli( q[0], anc[3], anc[7] );
		Toffoli( q[0], anc[3], anc[5] );
		Toffoli( q[2], anc[6], anc[4] );
		CNOT( anc[6], q[1] );
		CNOT( anc[9], q[1] );
		Toffoli( q[1], anc[5], anc[6] );
		CNOT( q[0], q[1] );
		Toffoli( anc[9], anc[3], anc[7] );
		CNOT( anc[2], anc[6] );
		CNOT( anc[2], q[1] );
		Toffoli( anc[6], anc[5], q[0] );
		CNOT( anc[8], anc[0] );
		CNOT( anc[3], anc[6] );
		CNOT( anc[0], anc[5] );
		CNOT( anc[3], anc[9] );
		Toffoli( anc[3], anc[5], anc[1] );
		CNOT( anc[6], anc[8] );
		Toffoli( q[1], anc[0], q[2] );
		Toffoli( anc[8], anc[4], anc[2] );
		CNOT( anc[6], anc[1] );
		CNOT( q[2], q[0] );
		Toffoli( anc[3], anc[2], anc[8] );
		CNOT( anc[4], anc[6] );
		Toffoli( q[1], anc[4], anc[3] );
		Toffoli( anc[7], anc[4], anc[9] );
		CNOT( q[1], anc[3] );
		Toffoli( anc[9], anc[3], anc[4] );
		CNOT( anc[4], anc[7] );
		CNOT( q[0], anc[4] );
		Toffoli( anc[1], anc[4], anc[5] );
		Toffoli( anc[1], q[2], anc[0] );
		Toffoli( anc[0], q[0], q[1] );
		CNOT( q[2], anc[2] );
		CNOT( q[1], anc[5] );
		CNOT( q[1], anc[8] );
		Toffoli( anc[8], anc[9], anc[4] );
		CNOT( anc[0], anc[1] );
		CNOT( q[2], anc[1] );
		CNOT( anc[2], anc[3] );
		CNOT( anc[3], anc[8] );
		Toffoli( anc[6], anc[2], anc[3] );
		CNOT( anc[0], anc[9] );
		CNOT( anc[3], anc[0] );
		Toffoli( anc[2], anc[8], anc[4] );
		Toffoli( q[0], anc[3], anc[7] );
		Toffoli( anc[2], anc[9], anc[4] );
		CNOT( anc[2], anc[4] );
	}
	Store {
		CNOT( anc[2], res[0] );
	}
	Uncompute(res, 0, anc, 10, 107, 54){
		CNOT( anc[2], anc[4] );
		Toffoli( anc[2], anc[9], anc[4] );
		Toffoli( q[0], anc[3], anc[7] );
		Toffoli( anc[2], anc[8], anc[4] );
		CNOT( anc[3], anc[0] );
		CNOT( anc[0], anc[9] );
		Toffoli( anc[6], anc[2], anc[3] );
		CNOT( anc[3], anc[8] );
		CNOT( anc[2], anc[3] );
		CNOT( q[2], anc[1] );
		CNOT( anc[0], anc[1] );
		Toffoli( anc[8], anc[9], anc[4] );
		CNOT( q[1], anc[8] );
		CNOT( q[1], anc[5] );
		CNOT( q[2], anc[2] );
		Toffoli( anc[0], q[0], q[1] );
		Toffoli( anc[1], q[2], anc[0] );
		Toffoli( anc[1], anc[4], anc[5] );
		CNOT( q[0], anc[4] );
		CNOT( anc[4], anc[7] );
		Toffoli( anc[9], anc[3], anc[4] );
		CNOT( q[1], anc[3] );
		Toffoli( anc[7], anc[4], anc[9] );
		Toffoli( q[1], anc[4], anc[3] );
		CNOT( anc[4], anc[6] );
		Toffoli( anc[3], anc[2], anc[8] );
		CNOT( q[2], q[0] );
		CNOT( anc[6], anc[1] );
		Toffoli( anc[8], anc[4], anc[2] );
		Toffoli( q[1], anc[0], q[2] );
		CNOT( anc[6], anc[8] );
		Toffoli( anc[3], anc[5], anc[1] );
		CNOT( anc[3], anc[9] );
		CNOT( anc[0], anc[5] );
		CNOT( anc[3], anc[6] );
		CNOT( anc[8], anc[0] );
		Toffoli( anc[6], anc[5], q[0] );
		CNOT( anc[2], q[1] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[9], anc[3], anc[7] );
		CNOT( q[0], q[1] );
		Toffoli( q[1], anc[5], anc[6] );
		CNOT( anc[9], q[1] );
		CNOT( anc[6], q[1] );
		Toffoli( q[2], anc[6], anc[4] );
		Toffoli( q[0], anc[3], anc[5] );
		Toffoli( q[0], anc[3], anc[7] );
		Toffoli( q[1], q[0], anc[8] );
		CNOT( q[0], q[2] );
		Toffoli( anc[4], q[0], anc[3] );
		CNOT( anc[9], q[1] );
		Toffoli( anc[9], anc[4], anc[0] );
		CNOT( anc[2], anc[6] );
	} Free(anc, 10) {}
}
// Function 28 with degree 0
// nq: 3, na: 10, ng: 53
void func28R(qbit **q, int n) {
printf("func28R\n");
fflush(stderr);
	qbit *anc[10]; // ancilla
	qbit *nb[31]; // interacting bits
	qbit *res[1];
	nb[0] = q[1];
	nb[1] = q[0];
	nb[2] = q[0];
	nb[3] = q[2];
	nb[4] = q[1];
	nb[5] = q[0];
	nb[6] = q[0];
	nb[7] = q[0];
	nb[8] = q[2];
	nb[9] = q[1];
	nb[10] = q[1];
	nb[11] = q[1];
	nb[12] = q[0];
	nb[13] = q[1];
	nb[14] = q[1];
	nb[15] = q[0];
	nb[16] = q[1];
	nb[17] = q[2];
	nb[18] = q[2];
	nb[19] = q[0];
	nb[20] = q[1];
	nb[21] = q[1];
	nb[22] = q[0];
	nb[23] = q[2];
	nb[24] = q[0];
	nb[25] = q[1];
	nb[26] = q[2];
	nb[27] = q[1];
	nb[28] = q[1];
	nb[29] = q[2];
	nb[30] = q[0];
	res[0] = q[2];
	// Leaf function
	_computeModule(0, 10, 107, 54, 0, 3, 0);
	acquire(10, anc, 31, nb);
	Recompute (res, 0, anc, 10, 107, 54){
		CNOT( anc[2], anc[4] );
		Toffoli( anc[2], anc[9], anc[4] );
		Toffoli( q[0], anc[3], anc[7] );
		Toffoli( anc[2], anc[8], anc[4] );
		CNOT( anc[3], anc[0] );
		CNOT( anc[0], anc[9] );
		Toffoli( anc[6], anc[2], anc[3] );
		CNOT( anc[3], anc[8] );
		CNOT( anc[2], anc[3] );
		CNOT( q[2], anc[1] );
		CNOT( anc[0], anc[1] );
		Toffoli( anc[8], anc[9], anc[4] );
		CNOT( q[1], anc[8] );
		CNOT( q[1], anc[5] );
		CNOT( q[2], anc[2] );
		Toffoli( anc[0], q[0], q[1] );
		Toffoli( anc[1], q[2], anc[0] );
		Toffoli( anc[1], anc[4], anc[5] );
		CNOT( q[0], anc[4] );
		CNOT( anc[4], anc[7] );
		Toffoli( anc[9], anc[3], anc[4] );
		CNOT( q[1], anc[3] );
		Toffoli( anc[7], anc[4], anc[9] );
		Toffoli( q[1], anc[4], anc[3] );
		CNOT( anc[4], anc[6] );
		Toffoli( anc[3], anc[2], anc[8] );
		CNOT( q[2], q[0] );
		CNOT( anc[6], anc[1] );
		Toffoli( anc[8], anc[4], anc[2] );
		Toffoli( q[1], anc[0], q[2] );
		CNOT( anc[6], anc[8] );
		Toffoli( anc[3], anc[5], anc[1] );
		CNOT( anc[3], anc[9] );
		CNOT( anc[0], anc[5] );
		CNOT( anc[3], anc[6] );
		CNOT( anc[8], anc[0] );
		Toffoli( anc[6], anc[5], q[0] );
		CNOT( anc[2], q[1] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[9], anc[3], anc[7] );
		CNOT( q[0], q[1] );
		Toffoli( q[1], anc[5], anc[6] );
		CNOT( anc[9], q[1] );
		CNOT( anc[6], q[1] );
		Toffoli( q[2], anc[6], anc[4] );
		Toffoli( q[0], anc[3], anc[5] );
		Toffoli( q[0], anc[3], anc[7] );
		Toffoli( q[1], q[0], anc[8] );
		CNOT( q[0], q[2] );
		Toffoli( anc[4], q[0], anc[3] );
		CNOT( anc[9], q[1] );
		Toffoli( anc[9], anc[4], anc[0] );
		CNOT( anc[2], anc[6] );
	}
	Restore {
		CNOT( anc[2], res[0] );
	}
	Unrecompute {
		CNOT( anc[2], anc[6] );
		Toffoli( anc[9], anc[4], anc[0] );
		CNOT( anc[9], q[1] );
		Toffoli( anc[4], q[0], anc[3] );
		CNOT( q[0], q[2] );
		Toffoli( q[1], q[0], anc[8] );
		Toffoli( q[0], anc[3], anc[7] );
		Toffoli( q[0], anc[3], anc[5] );
		Toffoli( q[2], anc[6], anc[4] );
		CNOT( anc[6], q[1] );
		CNOT( anc[9], q[1] );
		Toffoli( q[1], anc[5], anc[6] );
		CNOT( q[0], q[1] );
		Toffoli( anc[9], anc[3], anc[7] );
		CNOT( anc[2], anc[6] );
		CNOT( anc[2], q[1] );
		Toffoli( anc[6], anc[5], q[0] );
		CNOT( anc[8], anc[0] );
		CNOT( anc[3], anc[6] );
		CNOT( anc[0], anc[5] );
		CNOT( anc[3], anc[9] );
		Toffoli( anc[3], anc[5], anc[1] );
		CNOT( anc[6], anc[8] );
		Toffoli( q[1], anc[0], q[2] );
		Toffoli( anc[8], anc[4], anc[2] );
		CNOT( anc[6], anc[1] );
		CNOT( q[2], q[0] );
		Toffoli( anc[3], anc[2], anc[8] );
		CNOT( anc[4], anc[6] );
		Toffoli( q[1], anc[4], anc[3] );
		Toffoli( anc[7], anc[4], anc[9] );
		CNOT( q[1], anc[3] );
		Toffoli( anc[9], anc[3], anc[4] );
		CNOT( anc[4], anc[7] );
		CNOT( q[0], anc[4] );
		Toffoli( anc[1], anc[4], anc[5] );
		Toffoli( anc[1], q[2], anc[0] );
		Toffoli( anc[0], q[0], q[1] );
		CNOT( q[2], anc[2] );
		CNOT( q[1], anc[5] );
		CNOT( q[1], anc[8] );
		Toffoli( anc[8], anc[9], anc[4] );
		CNOT( anc[0], anc[1] );
		CNOT( q[2], anc[1] );
		CNOT( anc[2], anc[3] );
		CNOT( anc[3], anc[8] );
		Toffoli( anc[6], anc[2], anc[3] );
		CNOT( anc[0], anc[9] );
		CNOT( anc[3], anc[0] );
		Toffoli( anc[2], anc[8], anc[4] );
		Toffoli( q[0], anc[3], anc[7] );
		Toffoli( anc[2], anc[9], anc[4] );
		CNOT( anc[2], anc[4] );
	} Refree(anc, 10) {}
}
// Function 27 with degree 0
// nq: 11, na: 4, ng: 17
void func27(qbit **q, int n) {
printf("func27\n");
fflush(stderr);
	qbit *anc[4]; // ancilla
	qbit *nb[32]; // interacting bits
	qbit *res[1];
	nb[0] = q[7];
	nb[1] = q[10];
	nb[2] = q[1];
	nb[3] = q[2];
	nb[4] = q[5];
	nb[5] = q[10];
	nb[6] = q[3];
	nb[7] = q[9];
	nb[8] = q[10];
	nb[9] = q[7];
	nb[10] = q[10];
	nb[11] = q[9];
	nb[12] = q[5];
	nb[13] = q[3];
	nb[14] = q[10];
	nb[15] = q[7];
	nb[16] = q[4];
	nb[17] = q[9];
	nb[18] = q[5];
	nb[19] = q[0];
	nb[20] = q[2];
	nb[21] = q[10];
	nb[22] = q[9];
	nb[23] = q[8];
	nb[24] = q[3];
	nb[25] = q[9];
	nb[26] = q[3];
	nb[27] = q[8];
	nb[28] = q[2];
	nb[29] = q[1];
	nb[30] = q[6];
	nb[31] = q[10];
	res[0] = q[7];
	// Leaf function
	Compute (0, 4, 35, 18, 0, 3, 0) {
		acquire(4, anc, 32, nb);
		Toffoli( anc[0], q[7], q[10] );
		CNOT( q[1], q[2] );
		Toffoli( q[5], q[10], q[3] );
		Toffoli( q[9], q[10], anc[2] );
		CNOT( q[7], q[10] );
		Toffoli( q[9], anc[0], q[5] );
		CNOT( q[3], q[10] );
		CNOT( q[7], anc[1] );
		CNOT( q[4], q[9] );
		Toffoli( anc[0], anc[1], q[5] );
		Toffoli( anc[3], anc[1], anc[2] );
		Toffoli( q[0], q[2], q[10] );
		Toffoli( q[9], anc[1], q[8] );
		Toffoli( q[3], q[9], anc[1] );
		Toffoli( anc[2], anc[3], q[3] );
		Toffoli( q[8], q[2], anc[2] );
		Toffoli( q[1], q[6], q[10] );
	}
	Store {
		CNOT( q[1], res[0] );
	}
	Uncompute(res, 0, anc, 4, 35, 18){
		Toffoli( q[1], q[6], q[10] );
		Toffoli( q[8], q[2], anc[2] );
		Toffoli( anc[2], anc[3], q[3] );
		Toffoli( q[3], q[9], anc[1] );
		Toffoli( q[9], anc[1], q[8] );
		Toffoli( q[0], q[2], q[10] );
		Toffoli( anc[3], anc[1], anc[2] );
		Toffoli( anc[0], anc[1], q[5] );
		CNOT( q[4], q[9] );
		CNOT( q[7], anc[1] );
		CNOT( q[3], q[10] );
		Toffoli( q[9], anc[0], q[5] );
		CNOT( q[7], q[10] );
		Toffoli( q[9], q[10], anc[2] );
		Toffoli( q[5], q[10], q[3] );
		CNOT( q[1], q[2] );
		Toffoli( anc[0], q[7], q[10] );
	} Free(anc, 4) {}
}
// Function 27 with degree 0
// nq: 11, na: 4, ng: 17
void func27R(qbit **q, int n) {
printf("func27R\n");
fflush(stderr);
	qbit *anc[4]; // ancilla
	qbit *nb[32]; // interacting bits
	qbit *res[1];
	nb[0] = q[7];
	nb[1] = q[10];
	nb[2] = q[1];
	nb[3] = q[2];
	nb[4] = q[5];
	nb[5] = q[10];
	nb[6] = q[3];
	nb[7] = q[9];
	nb[8] = q[10];
	nb[9] = q[7];
	nb[10] = q[10];
	nb[11] = q[9];
	nb[12] = q[5];
	nb[13] = q[3];
	nb[14] = q[10];
	nb[15] = q[7];
	nb[16] = q[4];
	nb[17] = q[9];
	nb[18] = q[5];
	nb[19] = q[0];
	nb[20] = q[2];
	nb[21] = q[10];
	nb[22] = q[9];
	nb[23] = q[8];
	nb[24] = q[3];
	nb[25] = q[9];
	nb[26] = q[3];
	nb[27] = q[8];
	nb[28] = q[2];
	nb[29] = q[1];
	nb[30] = q[6];
	nb[31] = q[10];
	res[0] = q[7];
	// Leaf function
	_computeModule(0, 4, 35, 18, 0, 3, 0);
	acquire(4, anc, 32, nb);
	Recompute (res, 0, anc, 4, 35, 18){
		Toffoli( q[1], q[6], q[10] );
		Toffoli( q[8], q[2], anc[2] );
		Toffoli( anc[2], anc[3], q[3] );
		Toffoli( q[3], q[9], anc[1] );
		Toffoli( q[9], anc[1], q[8] );
		Toffoli( q[0], q[2], q[10] );
		Toffoli( anc[3], anc[1], anc[2] );
		Toffoli( anc[0], anc[1], q[5] );
		CNOT( q[4], q[9] );
		CNOT( q[7], anc[1] );
		CNOT( q[3], q[10] );
		Toffoli( q[9], anc[0], q[5] );
		CNOT( q[7], q[10] );
		Toffoli( q[9], q[10], anc[2] );
		Toffoli( q[5], q[10], q[3] );
		CNOT( q[1], q[2] );
		Toffoli( anc[0], q[7], q[10] );
	}
	Restore {
		CNOT( q[1], res[0] );
	}
	Unrecompute {
		Toffoli( anc[0], q[7], q[10] );
		CNOT( q[1], q[2] );
		Toffoli( q[5], q[10], q[3] );
		Toffoli( q[9], q[10], anc[2] );
		CNOT( q[7], q[10] );
		Toffoli( q[9], anc[0], q[5] );
		CNOT( q[3], q[10] );
		CNOT( q[7], anc[1] );
		CNOT( q[4], q[9] );
		Toffoli( anc[0], anc[1], q[5] );
		Toffoli( anc[3], anc[1], anc[2] );
		Toffoli( q[0], q[2], q[10] );
		Toffoli( q[9], anc[1], q[8] );
		Toffoli( q[3], q[9], anc[1] );
		Toffoli( anc[2], anc[3], q[3] );
		Toffoli( q[8], q[2], anc[2] );
		Toffoli( q[1], q[6], q[10] );
	} Refree(anc, 4) {}
}
// Function 26 with degree 0
// nq: 3, na: 9, ng: 55
void func26(qbit **q, int n) {
printf("func26\n");
fflush(stderr);
	qbit *anc[9]; // ancilla
	qbit *nb[32]; // interacting bits
	qbit *res[1];
	nb[0] = q[2];
	nb[1] = q[0];
	nb[2] = q[0];
	nb[3] = q[0];
	nb[4] = q[1];
	nb[5] = q[2];
	nb[6] = q[0];
	nb[7] = q[1];
	nb[8] = q[1];
	nb[9] = q[2];
	nb[10] = q[1];
	nb[11] = q[0];
	nb[12] = q[1];
	nb[13] = q[1];
	nb[14] = q[0];
	nb[15] = q[0];
	nb[16] = q[0];
	nb[17] = q[2];
	nb[18] = q[1];
	nb[19] = q[0];
	nb[20] = q[1];
	nb[21] = q[1];
	nb[22] = q[1];
	nb[23] = q[0];
	nb[24] = q[1];
	nb[25] = q[0];
	nb[26] = q[0];
	nb[27] = q[2];
	nb[28] = q[2];
	nb[29] = q[0];
	nb[30] = q[1];
	nb[31] = q[2];
	res[0] = q[2];
	// Leaf function
	Compute (0, 9, 111, 56, 0, 4, 0) {
		acquire(9, anc, 32, nb);
		CNOT( q[2], anc[0] );
		CNOT( q[0], anc[3] );
		CNOT( anc[7], anc[0] );
		CNOT( anc[1], anc[7] );
		CNOT( anc[4], anc[8] );
		Toffoli( anc[3], anc[4], anc[1] );
		Toffoli( anc[0], anc[1], anc[8] );
		Toffoli( anc[6], anc[3], anc[0] );
		CNOT( anc[0], anc[1] );
		Toffoli( anc[6], anc[8], q[0] );
		Toffoli( anc[3], anc[8], q[0] );
		Toffoli( q[1], anc[1], anc[7] );
		CNOT( q[2], q[0] );
		CNOT( q[1], anc[6] );
		Toffoli( q[1], anc[6], anc[0] );
		Toffoli( anc[5], anc[2], anc[0] );
		CNOT( anc[4], q[2] );
		CNOT( anc[5], anc[1] );
		Toffoli( anc[3], anc[2], q[1] );
		Toffoli( q[0], anc[7], q[1] );
		Toffoli( q[1], anc[1], q[0] );
		CNOT( q[0], anc[7] );
		Toffoli( q[0], q[2], anc[5] );
		Toffoli( q[1], anc[2], anc[4] );
		CNOT( anc[6], anc[4] );
		CNOT( anc[1], q[0] );
		Toffoli( q[1], anc[2], anc[8] );
		CNOT( anc[1], anc[8] );
		Toffoli( anc[3], anc[7], anc[6] );
		CNOT( anc[0], anc[5] );
		CNOT( anc[7], anc[3] );
		Toffoli( q[1], anc[4], anc[5] );
		CNOT( anc[6], anc[0] );
		Toffoli( q[1], anc[2], anc[1] );
		Toffoli( anc[3], anc[6], q[0] );
		Toffoli( anc[3], q[1], anc[0] );
		Toffoli( anc[3], anc[0], anc[2] );
		Toffoli( anc[7], anc[1], anc[8] );
		Toffoli( anc[1], anc[5], anc[2] );
		Toffoli( anc[4], q[0], anc[8] );
		CNOT( anc[2], q[0] );
		CNOT( anc[1], anc[7] );
		CNOT( anc[3], q[2] );
		CNOT( anc[5], anc[8] );
		Toffoli( anc[8], anc[6], anc[3] );
		Toffoli( anc[4], anc[8], anc[6] );
		Toffoli( anc[6], anc[4], anc[5] );
		Toffoli( anc[2], anc[8], anc[4] );
		CNOT( anc[0], q[2] );
		Toffoli( anc[2], anc[5], q[0] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[1], anc[2], anc[3] );
		Toffoli( q[1], anc[1], anc[8] );
		Toffoli( q[2], anc[1], anc[7] );
		CNOT( anc[2], anc[3] );
	}
	Store {
		CNOT( anc[3], res[0] );
	}
	Uncompute(res, 0, anc, 9, 111, 56){
		CNOT( anc[2], anc[3] );
		Toffoli( q[2], anc[1], anc[7] );
		Toffoli( q[1], anc[1], anc[8] );
		Toffoli( anc[1], anc[2], anc[3] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[2], anc[5], q[0] );
		CNOT( anc[0], q[2] );
		Toffoli( anc[2], anc[8], anc[4] );
		Toffoli( anc[6], anc[4], anc[5] );
		Toffoli( anc[4], anc[8], anc[6] );
		Toffoli( anc[8], anc[6], anc[3] );
		CNOT( anc[5], anc[8] );
		CNOT( anc[3], q[2] );
		CNOT( anc[1], anc[7] );
		CNOT( anc[2], q[0] );
		Toffoli( anc[4], q[0], anc[8] );
		Toffoli( anc[1], anc[5], anc[2] );
		Toffoli( anc[7], anc[1], anc[8] );
		Toffoli( anc[3], anc[0], anc[2] );
		Toffoli( anc[3], q[1], anc[0] );
		Toffoli( anc[3], anc[6], q[0] );
		Toffoli( q[1], anc[2], anc[1] );
		CNOT( anc[6], anc[0] );
		Toffoli( q[1], anc[4], anc[5] );
		CNOT( anc[7], anc[3] );
		CNOT( anc[0], anc[5] );
		Toffoli( anc[3], anc[7], anc[6] );
		CNOT( anc[1], anc[8] );
		Toffoli( q[1], anc[2], anc[8] );
		CNOT( anc[1], q[0] );
		CNOT( anc[6], anc[4] );
		Toffoli( q[1], anc[2], anc[4] );
		Toffoli( q[0], q[2], anc[5] );
		CNOT( q[0], anc[7] );
		Toffoli( q[1], anc[1], q[0] );
		Toffoli( q[0], anc[7], q[1] );
		Toffoli( anc[3], anc[2], q[1] );
		CNOT( anc[5], anc[1] );
		CNOT( anc[4], q[2] );
		Toffoli( anc[5], anc[2], anc[0] );
		Toffoli( q[1], anc[6], anc[0] );
		CNOT( q[1], anc[6] );
		CNOT( q[2], q[0] );
		Toffoli( q[1], anc[1], anc[7] );
		Toffoli( anc[3], anc[8], q[0] );
		Toffoli( anc[6], anc[8], q[0] );
		CNOT( anc[0], anc[1] );
		Toffoli( anc[6], anc[3], anc[0] );
		Toffoli( anc[0], anc[1], anc[8] );
		Toffoli( anc[3], anc[4], anc[1] );
		CNOT( anc[4], anc[8] );
		CNOT( anc[1], anc[7] );
		CNOT( anc[7], anc[0] );
		CNOT( q[0], anc[3] );
		CNOT( q[2], anc[0] );
	} Free(anc, 9) {}
}
// Function 26 with degree 0
// nq: 3, na: 9, ng: 55
void func26R(qbit **q, int n) {
printf("func26R\n");
fflush(stderr);
	qbit *anc[9]; // ancilla
	qbit *nb[32]; // interacting bits
	qbit *res[1];
	nb[0] = q[2];
	nb[1] = q[0];
	nb[2] = q[0];
	nb[3] = q[0];
	nb[4] = q[1];
	nb[5] = q[2];
	nb[6] = q[0];
	nb[7] = q[1];
	nb[8] = q[1];
	nb[9] = q[2];
	nb[10] = q[1];
	nb[11] = q[0];
	nb[12] = q[1];
	nb[13] = q[1];
	nb[14] = q[0];
	nb[15] = q[0];
	nb[16] = q[0];
	nb[17] = q[2];
	nb[18] = q[1];
	nb[19] = q[0];
	nb[20] = q[1];
	nb[21] = q[1];
	nb[22] = q[1];
	nb[23] = q[0];
	nb[24] = q[1];
	nb[25] = q[0];
	nb[26] = q[0];
	nb[27] = q[2];
	nb[28] = q[2];
	nb[29] = q[0];
	nb[30] = q[1];
	nb[31] = q[2];
	res[0] = q[2];
	// Leaf function
	_computeModule(0, 9, 111, 56, 0, 4, 0);
	acquire(9, anc, 32, nb);
	Recompute (res, 0, anc, 9, 111, 56){
		CNOT( anc[2], anc[3] );
		Toffoli( q[2], anc[1], anc[7] );
		Toffoli( q[1], anc[1], anc[8] );
		Toffoli( anc[1], anc[2], anc[3] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[2], anc[5], q[0] );
		CNOT( anc[0], q[2] );
		Toffoli( anc[2], anc[8], anc[4] );
		Toffoli( anc[6], anc[4], anc[5] );
		Toffoli( anc[4], anc[8], anc[6] );
		Toffoli( anc[8], anc[6], anc[3] );
		CNOT( anc[5], anc[8] );
		CNOT( anc[3], q[2] );
		CNOT( anc[1], anc[7] );
		CNOT( anc[2], q[0] );
		Toffoli( anc[4], q[0], anc[8] );
		Toffoli( anc[1], anc[5], anc[2] );
		Toffoli( anc[7], anc[1], anc[8] );
		Toffoli( anc[3], anc[0], anc[2] );
		Toffoli( anc[3], q[1], anc[0] );
		Toffoli( anc[3], anc[6], q[0] );
		Toffoli( q[1], anc[2], anc[1] );
		CNOT( anc[6], anc[0] );
		Toffoli( q[1], anc[4], anc[5] );
		CNOT( anc[7], anc[3] );
		CNOT( anc[0], anc[5] );
		Toffoli( anc[3], anc[7], anc[6] );
		CNOT( anc[1], anc[8] );
		Toffoli( q[1], anc[2], anc[8] );
		CNOT( anc[1], q[0] );
		CNOT( anc[6], anc[4] );
		Toffoli( q[1], anc[2], anc[4] );
		Toffoli( q[0], q[2], anc[5] );
		CNOT( q[0], anc[7] );
		Toffoli( q[1], anc[1], q[0] );
		Toffoli( q[0], anc[7], q[1] );
		Toffoli( anc[3], anc[2], q[1] );
		CNOT( anc[5], anc[1] );
		CNOT( anc[4], q[2] );
		Toffoli( anc[5], anc[2], anc[0] );
		Toffoli( q[1], anc[6], anc[0] );
		CNOT( q[1], anc[6] );
		CNOT( q[2], q[0] );
		Toffoli( q[1], anc[1], anc[7] );
		Toffoli( anc[3], anc[8], q[0] );
		Toffoli( anc[6], anc[8], q[0] );
		CNOT( anc[0], anc[1] );
		Toffoli( anc[6], anc[3], anc[0] );
		Toffoli( anc[0], anc[1], anc[8] );
		Toffoli( anc[3], anc[4], anc[1] );
		CNOT( anc[4], anc[8] );
		CNOT( anc[1], anc[7] );
		CNOT( anc[7], anc[0] );
		CNOT( q[0], anc[3] );
		CNOT( q[2], anc[0] );
	}
	Restore {
		CNOT( anc[3], res[0] );
	}
	Unrecompute {
		CNOT( q[2], anc[0] );
		CNOT( q[0], anc[3] );
		CNOT( anc[7], anc[0] );
		CNOT( anc[1], anc[7] );
		CNOT( anc[4], anc[8] );
		Toffoli( anc[3], anc[4], anc[1] );
		Toffoli( anc[0], anc[1], anc[8] );
		Toffoli( anc[6], anc[3], anc[0] );
		CNOT( anc[0], anc[1] );
		Toffoli( anc[6], anc[8], q[0] );
		Toffoli( anc[3], anc[8], q[0] );
		Toffoli( q[1], anc[1], anc[7] );
		CNOT( q[2], q[0] );
		CNOT( q[1], anc[6] );
		Toffoli( q[1], anc[6], anc[0] );
		Toffoli( anc[5], anc[2], anc[0] );
		CNOT( anc[4], q[2] );
		CNOT( anc[5], anc[1] );
		Toffoli( anc[3], anc[2], q[1] );
		Toffoli( q[0], anc[7], q[1] );
		Toffoli( q[1], anc[1], q[0] );
		CNOT( q[0], anc[7] );
		Toffoli( q[0], q[2], anc[5] );
		Toffoli( q[1], anc[2], anc[4] );
		CNOT( anc[6], anc[4] );
		CNOT( anc[1], q[0] );
		Toffoli( q[1], anc[2], anc[8] );
		CNOT( anc[1], anc[8] );
		Toffoli( anc[3], anc[7], anc[6] );
		CNOT( anc[0], anc[5] );
		CNOT( anc[7], anc[3] );
		Toffoli( q[1], anc[4], anc[5] );
		CNOT( anc[6], anc[0] );
		Toffoli( q[1], anc[2], anc[1] );
		Toffoli( anc[3], anc[6], q[0] );
		Toffoli( anc[3], q[1], anc[0] );
		Toffoli( anc[3], anc[0], anc[2] );
		Toffoli( anc[7], anc[1], anc[8] );
		Toffoli( anc[1], anc[5], anc[2] );
		Toffoli( anc[4], q[0], anc[8] );
		CNOT( anc[2], q[0] );
		CNOT( anc[1], anc[7] );
		CNOT( anc[3], q[2] );
		CNOT( anc[5], anc[8] );
		Toffoli( anc[8], anc[6], anc[3] );
		Toffoli( anc[4], anc[8], anc[6] );
		Toffoli( anc[6], anc[4], anc[5] );
		Toffoli( anc[2], anc[8], anc[4] );
		CNOT( anc[0], q[2] );
		Toffoli( anc[2], anc[5], q[0] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[1], anc[2], anc[3] );
		Toffoli( q[1], anc[1], anc[8] );
		Toffoli( q[2], anc[1], anc[7] );
		CNOT( anc[2], anc[3] );
	} Refree(anc, 9) {}
}
// Function 25 with degree 0
// nq: 3, na: 16, ng: 42
void func25(qbit **q, int n) {
printf("func25\n");
fflush(stderr);
	qbit *anc[16]; // ancilla
	qbit *nb[16]; // interacting bits
	qbit *res[1];
	nb[0] = q[1];
	nb[1] = q[2];
	nb[2] = q[0];
	nb[3] = q[2];
	nb[4] = q[2];
	nb[5] = q[1];
	nb[6] = q[0];
	nb[7] = q[1];
	nb[8] = q[0];
	nb[9] = q[1];
	nb[10] = q[1];
	nb[11] = q[0];
	nb[12] = q[0];
	nb[13] = q[1];
	nb[14] = q[1];
	nb[15] = q[0];
	res[0] = q[2];
	// Leaf function
	Compute (0, 16, 85, 43, 0, 4, 0) {
		acquire(16, anc, 16, nb);
		Toffoli( anc[1], anc[12], anc[2] );
		CNOT( anc[12], anc[10] );
		Toffoli( anc[13], anc[12], q[1] );
		CNOT( anc[3], anc[14] );
		Toffoli( q[2], anc[12], q[0] );
		Toffoli( anc[7], anc[4], q[2] );
		Toffoli( anc[3], anc[9], anc[1] );
		CNOT( anc[11], anc[9] );
		CNOT( anc[1], anc[8] );
		Toffoli( anc[13], anc[1], anc[4] );
		CNOT( anc[14], anc[1] );
		Toffoli( anc[14], anc[5], anc[1] );
		CNOT( anc[3], anc[9] );
		CNOT( anc[12], anc[5] );
		CNOT( anc[0], anc[10] );
		Toffoli( anc[12], anc[7], q[2] );
		Toffoli( anc[1], anc[6], anc[2] );
		CNOT( anc[7], anc[5] );
		CNOT( q[1], anc[14] );
		CNOT( anc[11], anc[4] );
		Toffoli( q[0], anc[15], q[1] );
		CNOT( anc[11], anc[0] );
		CNOT( anc[15], anc[11] );
		CNOT( anc[13], anc[5] );
		CNOT( anc[3], anc[0] );
		CNOT( anc[0], q[0] );
		CNOT( anc[3], anc[14] );
		Toffoli( anc[12], anc[9], anc[8] );
		Toffoli( anc[1], anc[13], anc[11] );
		CNOT( q[1], anc[13] );
		Toffoli( anc[11], anc[3], q[1] );
		CNOT( anc[13], q[0] );
		CNOT( anc[1], anc[3] );
		Toffoli( anc[15], anc[9], anc[14] );
		CNOT( anc[15], anc[10] );
		CNOT( anc[14], anc[3] );
		Toffoli( anc[8], anc[4], anc[7] );
		CNOT( anc[2], anc[7] );
		CNOT( anc[8], q[0] );
		Toffoli( q[1], anc[7], anc[13] );
		CNOT( q[1], anc[11] );
		Toffoli( anc[2], anc[10], q[0] );
	}
	Store {
		CNOT( anc[4], res[0] );
	}
	Uncompute(res, 0, anc, 16, 85, 43){
		Toffoli( anc[2], anc[10], q[0] );
		CNOT( q[1], anc[11] );
		Toffoli( q[1], anc[7], anc[13] );
		CNOT( anc[8], q[0] );
		CNOT( anc[2], anc[7] );
		Toffoli( anc[8], anc[4], anc[7] );
		CNOT( anc[14], anc[3] );
		CNOT( anc[15], anc[10] );
		Toffoli( anc[15], anc[9], anc[14] );
		CNOT( anc[1], anc[3] );
		CNOT( anc[13], q[0] );
		Toffoli( anc[11], anc[3], q[1] );
		CNOT( q[1], anc[13] );
		Toffoli( anc[1], anc[13], anc[11] );
		Toffoli( anc[12], anc[9], anc[8] );
		CNOT( anc[3], anc[14] );
		CNOT( anc[0], q[0] );
		CNOT( anc[3], anc[0] );
		CNOT( anc[13], anc[5] );
		CNOT( anc[15], anc[11] );
		CNOT( anc[11], anc[0] );
		Toffoli( q[0], anc[15], q[1] );
		CNOT( anc[11], anc[4] );
		CNOT( q[1], anc[14] );
		CNOT( anc[7], anc[5] );
		Toffoli( anc[1], anc[6], anc[2] );
		Toffoli( anc[12], anc[7], q[2] );
		CNOT( anc[0], anc[10] );
		CNOT( anc[12], anc[5] );
		CNOT( anc[3], anc[9] );
		Toffoli( anc[14], anc[5], anc[1] );
		CNOT( anc[14], anc[1] );
		Toffoli( anc[13], anc[1], anc[4] );
		CNOT( anc[1], anc[8] );
		CNOT( anc[11], anc[9] );
		Toffoli( anc[3], anc[9], anc[1] );
		Toffoli( anc[7], anc[4], q[2] );
		Toffoli( q[2], anc[12], q[0] );
		CNOT( anc[3], anc[14] );
		Toffoli( anc[13], anc[12], q[1] );
		CNOT( anc[12], anc[10] );
		Toffoli( anc[1], anc[12], anc[2] );
	} Free(anc, 16) {}
}
// Function 25 with degree 0
// nq: 3, na: 16, ng: 42
void func25R(qbit **q, int n) {
printf("func25R\n");
fflush(stderr);
	qbit *anc[16]; // ancilla
	qbit *nb[16]; // interacting bits
	qbit *res[1];
	nb[0] = q[1];
	nb[1] = q[2];
	nb[2] = q[0];
	nb[3] = q[2];
	nb[4] = q[2];
	nb[5] = q[1];
	nb[6] = q[0];
	nb[7] = q[1];
	nb[8] = q[0];
	nb[9] = q[1];
	nb[10] = q[1];
	nb[11] = q[0];
	nb[12] = q[0];
	nb[13] = q[1];
	nb[14] = q[1];
	nb[15] = q[0];
	res[0] = q[2];
	// Leaf function
	_computeModule(0, 16, 85, 43, 0, 4, 0);
	acquire(16, anc, 16, nb);
	Recompute (res, 0, anc, 16, 85, 43){
		Toffoli( anc[2], anc[10], q[0] );
		CNOT( q[1], anc[11] );
		Toffoli( q[1], anc[7], anc[13] );
		CNOT( anc[8], q[0] );
		CNOT( anc[2], anc[7] );
		Toffoli( anc[8], anc[4], anc[7] );
		CNOT( anc[14], anc[3] );
		CNOT( anc[15], anc[10] );
		Toffoli( anc[15], anc[9], anc[14] );
		CNOT( anc[1], anc[3] );
		CNOT( anc[13], q[0] );
		Toffoli( anc[11], anc[3], q[1] );
		CNOT( q[1], anc[13] );
		Toffoli( anc[1], anc[13], anc[11] );
		Toffoli( anc[12], anc[9], anc[8] );
		CNOT( anc[3], anc[14] );
		CNOT( anc[0], q[0] );
		CNOT( anc[3], anc[0] );
		CNOT( anc[13], anc[5] );
		CNOT( anc[15], anc[11] );
		CNOT( anc[11], anc[0] );
		Toffoli( q[0], anc[15], q[1] );
		CNOT( anc[11], anc[4] );
		CNOT( q[1], anc[14] );
		CNOT( anc[7], anc[5] );
		Toffoli( anc[1], anc[6], anc[2] );
		Toffoli( anc[12], anc[7], q[2] );
		CNOT( anc[0], anc[10] );
		CNOT( anc[12], anc[5] );
		CNOT( anc[3], anc[9] );
		Toffoli( anc[14], anc[5], anc[1] );
		CNOT( anc[14], anc[1] );
		Toffoli( anc[13], anc[1], anc[4] );
		CNOT( anc[1], anc[8] );
		CNOT( anc[11], anc[9] );
		Toffoli( anc[3], anc[9], anc[1] );
		Toffoli( anc[7], anc[4], q[2] );
		Toffoli( q[2], anc[12], q[0] );
		CNOT( anc[3], anc[14] );
		Toffoli( anc[13], anc[12], q[1] );
		CNOT( anc[12], anc[10] );
		Toffoli( anc[1], anc[12], anc[2] );
	}
	Restore {
		CNOT( anc[4], res[0] );
	}
	Unrecompute {
		Toffoli( anc[1], anc[12], anc[2] );
		CNOT( anc[12], anc[10] );
		Toffoli( anc[13], anc[12], q[1] );
		CNOT( anc[3], anc[14] );
		Toffoli( q[2], anc[12], q[0] );
		Toffoli( anc[7], anc[4], q[2] );
		Toffoli( anc[3], anc[9], anc[1] );
		CNOT( anc[11], anc[9] );
		CNOT( anc[1], anc[8] );
		Toffoli( anc[13], anc[1], anc[4] );
		CNOT( anc[14], anc[1] );
		Toffoli( anc[14], anc[5], anc[1] );
		CNOT( anc[3], anc[9] );
		CNOT( anc[12], anc[5] );
		CNOT( anc[0], anc[10] );
		Toffoli( anc[12], anc[7], q[2] );
		Toffoli( anc[1], anc[6], anc[2] );
		CNOT( anc[7], anc[5] );
		CNOT( q[1], anc[14] );
		CNOT( anc[11], anc[4] );
		Toffoli( q[0], anc[15], q[1] );
		CNOT( anc[11], anc[0] );
		CNOT( anc[15], anc[11] );
		CNOT( anc[13], anc[5] );
		CNOT( anc[3], anc[0] );
		CNOT( anc[0], q[0] );
		CNOT( anc[3], anc[14] );
		Toffoli( anc[12], anc[9], anc[8] );
		Toffoli( anc[1], anc[13], anc[11] );
		CNOT( q[1], anc[13] );
		Toffoli( anc[11], anc[3], q[1] );
		CNOT( anc[13], q[0] );
		CNOT( anc[1], anc[3] );
		Toffoli( anc[15], anc[9], anc[14] );
		CNOT( anc[15], anc[10] );
		CNOT( anc[14], anc[3] );
		Toffoli( anc[8], anc[4], anc[7] );
		CNOT( anc[2], anc[7] );
		CNOT( anc[8], q[0] );
		Toffoli( q[1], anc[7], anc[13] );
		CNOT( q[1], anc[11] );
		Toffoli( anc[2], anc[10], q[0] );
	} Refree(anc, 16) {}
}
// Function 24 with degree 0
// nq: 11, na: 6, ng: 15
void func24(qbit **q, int n) {
printf("func24\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[24]; // interacting bits
	qbit *res[5];
	nb[0] = q[4];
	nb[1] = q[7];
	nb[2] = q[1];
	nb[3] = q[9];
	nb[4] = q[1];
	nb[5] = q[2];
	nb[6] = q[9];
	nb[7] = q[7];
	nb[8] = q[8];
	nb[9] = q[6];
	nb[10] = q[2];
	nb[11] = q[5];
	nb[12] = q[8];
	nb[13] = q[8];
	nb[14] = q[7];
	nb[15] = q[2];
	nb[16] = q[1];
	nb[17] = q[0];
	nb[18] = q[9];
	nb[19] = q[7];
	nb[20] = q[4];
	nb[21] = q[8];
	nb[22] = q[6];
	nb[23] = q[6];
	res[0] = q[9];
	res[1] = q[4];
	res[2] = q[2];
	res[3] = q[5];
	res[4] = q[6];
	// Leaf function
	Compute (0, 6, 35, 20, 0, 4, 0) {
		acquire(6, anc, 24, nb);
		Toffoli( q[4], q[7], anc[4] );
		CNOT( anc[1], q[1] );
		Toffoli( anc[1], q[9], q[1] );
		Toffoli( q[2], q[9], q[7] );
		CNOT( anc[0], anc[4] );
		CNOT( anc[5], q[8] );
		Toffoli( q[6], anc[2], q[2] );
		Toffoli( anc[4], q[5], anc[1] );
		Toffoli( q[8], anc[3], anc[1] );
		Toffoli( q[8], anc[1], q[7] );
		Toffoli( q[2], q[1], anc[0] );
		Toffoli( anc[4], q[0], anc[0] );
		Toffoli( q[9], q[7], q[4] );
		CNOT( q[8], q[6] );
		Toffoli( anc[1], anc[0], q[6] );
	}
	Store {
		CNOT( anc[4], res[0] );
		CNOT( q[0], res[1] );
		CNOT( anc[3], res[2] );
		CNOT( q[2], res[3] );
		CNOT( anc[5], res[4] );
	}
	Uncompute(res, 0, anc, 6, 35, 20){
		Toffoli( anc[1], anc[0], q[6] );
		CNOT( q[8], q[6] );
		Toffoli( q[9], q[7], q[4] );
		Toffoli( anc[4], q[0], anc[0] );
		Toffoli( q[2], q[1], anc[0] );
		Toffoli( q[8], anc[1], q[7] );
		Toffoli( q[8], anc[3], anc[1] );
		Toffoli( anc[4], q[5], anc[1] );
		Toffoli( q[6], anc[2], q[2] );
		CNOT( anc[5], q[8] );
		CNOT( anc[0], anc[4] );
		Toffoli( q[2], q[9], q[7] );
		Toffoli( anc[1], q[9], q[1] );
		CNOT( anc[1], q[1] );
		Toffoli( q[4], q[7], anc[4] );
	} Free(anc, 6) {}
}
// Function 24 with degree 0
// nq: 11, na: 6, ng: 15
void func24R(qbit **q, int n) {
printf("func24R\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[24]; // interacting bits
	qbit *res[5];
	nb[0] = q[4];
	nb[1] = q[7];
	nb[2] = q[1];
	nb[3] = q[9];
	nb[4] = q[1];
	nb[5] = q[2];
	nb[6] = q[9];
	nb[7] = q[7];
	nb[8] = q[8];
	nb[9] = q[6];
	nb[10] = q[2];
	nb[11] = q[5];
	nb[12] = q[8];
	nb[13] = q[8];
	nb[14] = q[7];
	nb[15] = q[2];
	nb[16] = q[1];
	nb[17] = q[0];
	nb[18] = q[9];
	nb[19] = q[7];
	nb[20] = q[4];
	nb[21] = q[8];
	nb[22] = q[6];
	nb[23] = q[6];
	res[0] = q[9];
	res[1] = q[4];
	res[2] = q[2];
	res[3] = q[5];
	res[4] = q[6];
	// Leaf function
	_computeModule(0, 6, 35, 20, 0, 4, 0);
	acquire(6, anc, 24, nb);
	Recompute (res, 0, anc, 6, 35, 20){
		Toffoli( anc[1], anc[0], q[6] );
		CNOT( q[8], q[6] );
		Toffoli( q[9], q[7], q[4] );
		Toffoli( anc[4], q[0], anc[0] );
		Toffoli( q[2], q[1], anc[0] );
		Toffoli( q[8], anc[1], q[7] );
		Toffoli( q[8], anc[3], anc[1] );
		Toffoli( anc[4], q[5], anc[1] );
		Toffoli( q[6], anc[2], q[2] );
		CNOT( anc[5], q[8] );
		CNOT( anc[0], anc[4] );
		Toffoli( q[2], q[9], q[7] );
		Toffoli( anc[1], q[9], q[1] );
		CNOT( anc[1], q[1] );
		Toffoli( q[4], q[7], anc[4] );
	}
	Restore {
		CNOT( anc[4], res[0] );
		CNOT( q[0], res[1] );
		CNOT( anc[3], res[2] );
		CNOT( q[2], res[3] );
		CNOT( anc[5], res[4] );
	}
	Unrecompute {
		Toffoli( q[4], q[7], anc[4] );
		CNOT( anc[1], q[1] );
		Toffoli( anc[1], q[9], q[1] );
		Toffoli( q[2], q[9], q[7] );
		CNOT( anc[0], anc[4] );
		CNOT( anc[5], q[8] );
		Toffoli( q[6], anc[2], q[2] );
		Toffoli( anc[4], q[5], anc[1] );
		Toffoli( q[8], anc[3], anc[1] );
		Toffoli( q[8], anc[1], q[7] );
		Toffoli( q[2], q[1], anc[0] );
		Toffoli( anc[4], q[0], anc[0] );
		Toffoli( q[9], q[7], q[4] );
		CNOT( q[8], q[6] );
		Toffoli( anc[1], anc[0], q[6] );
	} Refree(anc, 6) {}
}
// Function 23 with degree 0
// nq: 10, na: 5, ng: 55
void func23(qbit **q, int n) {
printf("func23\n");
fflush(stderr);
	qbit *anc[5]; // ancilla
	qbit *nb[93]; // interacting bits
	qbit *res[8];
	nb[0] = q[4];
	nb[1] = q[9];
	nb[2] = q[2];
	nb[3] = q[7];
	nb[4] = q[7];
	nb[5] = q[2];
	nb[6] = q[3];
	nb[7] = q[6];
	nb[8] = q[7];
	nb[9] = q[0];
	nb[10] = q[0];
	nb[11] = q[7];
	nb[12] = q[0];
	nb[13] = q[4];
	nb[14] = q[7];
	nb[15] = q[5];
	nb[16] = q[3];
	nb[17] = q[5];
	nb[18] = q[3];
	nb[19] = q[2];
	nb[20] = q[5];
	nb[21] = q[3];
	nb[22] = q[2];
	nb[23] = q[1];
	nb[24] = q[4];
	nb[25] = q[7];
	nb[26] = q[9];
	nb[27] = q[4];
	nb[28] = q[0];
	nb[29] = q[8];
	nb[30] = q[3];
	nb[31] = q[7];
	nb[32] = q[8];
	nb[33] = q[7];
	nb[34] = q[1];
	nb[35] = q[2];
	nb[36] = q[8];
	nb[37] = q[0];
	nb[38] = q[2];
	nb[39] = q[0];
	nb[40] = q[7];
	nb[41] = q[5];
	nb[42] = q[2];
	nb[43] = q[8];
	nb[44] = q[9];
	nb[45] = q[8];
	nb[46] = q[0];
	nb[47] = q[6];
	nb[48] = q[1];
	nb[49] = q[3];
	nb[50] = q[5];
	nb[51] = q[3];
	nb[52] = q[4];
	nb[53] = q[0];
	nb[54] = q[8];
	nb[55] = q[4];
	nb[56] = q[2];
	nb[57] = q[1];
	nb[58] = q[9];
	nb[59] = q[3];
	nb[60] = q[9];
	nb[61] = q[3];
	nb[62] = q[9];
	nb[63] = q[9];
	nb[64] = q[4];
	nb[65] = q[0];
	nb[66] = q[2];
	nb[67] = q[2];
	nb[68] = q[5];
	nb[69] = q[6];
	nb[70] = q[4];
	nb[71] = q[4];
	nb[72] = q[0];
	nb[73] = q[3];
	nb[74] = q[0];
	nb[75] = q[9];
	nb[76] = q[8];
	nb[77] = q[3];
	nb[78] = q[8];
	nb[79] = q[7];
	nb[80] = q[8];
	nb[81] = q[6];
	nb[82] = q[8];
	nb[83] = q[0];
	nb[84] = q[2];
	nb[85] = q[2];
	nb[86] = q[2];
	nb[87] = q[6];
	nb[88] = q[9];
	nb[89] = q[5];
	nb[90] = q[0];
	nb[91] = q[5];
	nb[92] = q[7];
	res[0] = q[6];
	res[1] = q[2];
	res[2] = q[8];
	res[3] = q[5];
	res[4] = q[3];
	res[5] = q[1];
	res[6] = q[7];
	res[7] = q[0];
	// Leaf function
	Compute (0, 5, 118, 63, 0, 4, 0) {
		acquire(5, anc, 93, nb);
		Toffoli( q[4], q[9], anc[0] );
		CNOT( q[2], q[7] );
		CNOT( q[7], q[2] );
		CNOT( q[3], q[6] );
		CNOT( q[7], q[0] );
		Toffoli( anc[3], anc[0], anc[4] );
		CNOT( q[0], q[7] );
		Toffoli( q[0], anc[0], anc[3] );
		Toffoli( anc[0], q[4], anc[1] );
		Toffoli( q[7], q[5], q[3] );
		CNOT( q[5], anc[4] );
		CNOT( q[3], anc[3] );
		Toffoli( q[2], q[5], q[3] );
		CNOT( q[2], q[1] );
		CNOT( q[4], q[7] );
		CNOT( q[9], anc[0] );
		CNOT( q[4], anc[1] );
		CNOT( anc[2], q[0] );
		CNOT( q[8], anc[4] );
		Toffoli( anc[1], anc[0], q[3] );
		Toffoli( anc[3], q[7], q[8] );
		CNOT( q[7], q[1] );
		CNOT( anc[0], q[2] );
		CNOT( q[8], q[0] );
		Toffoli( q[2], anc[3], q[0] );
		Toffoli( q[7], q[5], q[2] );
		Toffoli( anc[1], anc[0], anc[4] );
		Toffoli( q[8], q[9], anc[1] );
		Toffoli( anc[2], q[8], q[0] );
		Toffoli( q[6], anc[4], q[1] );
		CNOT( q[3], anc[4] );
		Toffoli( anc[1], q[5], q[3] );
		Toffoli( q[4], anc[0], anc[3] );
		Toffoli( q[0], q[8], q[4] );
		Toffoli( q[2], anc[1], anc[2] );
		CNOT( q[1], q[9] );
		CNOT( q[3], q[9] );
		CNOT( q[3], q[9] );
		Toffoli( q[9], anc[4], anc[2] );
		Toffoli( anc[4], q[4], q[0] );
		CNOT( q[2], anc[3] );
		Toffoli( q[2], anc[0], q[5] );
		Toffoli( anc[0], q[6], q[4] );
		Toffoli( q[4], q[0], anc[0] );
		Toffoli( anc[1], anc[3], anc[2] );
		CNOT( anc[1], q[3] );
		Toffoli( q[0], q[9], q[8] );
		Toffoli( q[3], q[8], q[7] );
		CNOT( q[8], anc[1] );
		Toffoli( q[6], q[8], q[0] );
		Toffoli( q[2], anc[1], anc[0] );
		CNOT( anc[2], q[2] );
		Toffoli( q[2], anc[0], q[6] );
		Toffoli( q[9], q[5], q[0] );
		Toffoli( q[5], anc[0], q[7] );
	}
	Store {
		CNOT( q[4], res[0] );
		CNOT( q[9], res[1] );
		CNOT( anc[3], res[2] );
		CNOT( q[0], res[3] );
		CNOT( q[1], res[4] );
		CNOT( q[5], res[5] );
		CNOT( q[3], res[6] );
		CNOT( anc[1], res[7] );
	}
	Uncompute(res, 0, anc, 5, 118, 63){
		Toffoli( q[5], anc[0], q[7] );
		Toffoli( q[9], q[5], q[0] );
		Toffoli( q[2], anc[0], q[6] );
		CNOT( anc[2], q[2] );
		Toffoli( q[2], anc[1], anc[0] );
		Toffoli( q[6], q[8], q[0] );
		CNOT( q[8], anc[1] );
		Toffoli( q[3], q[8], q[7] );
		Toffoli( q[0], q[9], q[8] );
		CNOT( anc[1], q[3] );
		Toffoli( anc[1], anc[3], anc[2] );
		Toffoli( q[4], q[0], anc[0] );
		Toffoli( anc[0], q[6], q[4] );
		Toffoli( q[2], anc[0], q[5] );
		CNOT( q[2], anc[3] );
		Toffoli( anc[4], q[4], q[0] );
		Toffoli( q[9], anc[4], anc[2] );
		CNOT( q[3], q[9] );
		CNOT( q[3], q[9] );
		CNOT( q[1], q[9] );
		Toffoli( q[2], anc[1], anc[2] );
		Toffoli( q[0], q[8], q[4] );
		Toffoli( q[4], anc[0], anc[3] );
		Toffoli( anc[1], q[5], q[3] );
		CNOT( q[3], anc[4] );
		Toffoli( q[6], anc[4], q[1] );
		Toffoli( anc[2], q[8], q[0] );
		Toffoli( q[8], q[9], anc[1] );
		Toffoli( anc[1], anc[0], anc[4] );
		Toffoli( q[7], q[5], q[2] );
		Toffoli( q[2], anc[3], q[0] );
		CNOT( q[8], q[0] );
		CNOT( anc[0], q[2] );
		CNOT( q[7], q[1] );
		Toffoli( anc[3], q[7], q[8] );
		Toffoli( anc[1], anc[0], q[3] );
		CNOT( q[8], anc[4] );
		CNOT( anc[2], q[0] );
		CNOT( q[4], anc[1] );
		CNOT( q[9], anc[0] );
		CNOT( q[4], q[7] );
		CNOT( q[2], q[1] );
		Toffoli( q[2], q[5], q[3] );
		CNOT( q[3], anc[3] );
		CNOT( q[5], anc[4] );
		Toffoli( q[7], q[5], q[3] );
		Toffoli( anc[0], q[4], anc[1] );
		Toffoli( q[0], anc[0], anc[3] );
		CNOT( q[0], q[7] );
		Toffoli( anc[3], anc[0], anc[4] );
		CNOT( q[7], q[0] );
		CNOT( q[3], q[6] );
		CNOT( q[7], q[2] );
		CNOT( q[2], q[7] );
		Toffoli( q[4], q[9], anc[0] );
	} Free(anc, 5) {}
}
// Function 23 with degree 0
// nq: 10, na: 5, ng: 55
void func23R(qbit **q, int n) {
printf("func23R\n");
fflush(stderr);
	qbit *anc[5]; // ancilla
	qbit *nb[93]; // interacting bits
	qbit *res[8];
	nb[0] = q[4];
	nb[1] = q[9];
	nb[2] = q[2];
	nb[3] = q[7];
	nb[4] = q[7];
	nb[5] = q[2];
	nb[6] = q[3];
	nb[7] = q[6];
	nb[8] = q[7];
	nb[9] = q[0];
	nb[10] = q[0];
	nb[11] = q[7];
	nb[12] = q[0];
	nb[13] = q[4];
	nb[14] = q[7];
	nb[15] = q[5];
	nb[16] = q[3];
	nb[17] = q[5];
	nb[18] = q[3];
	nb[19] = q[2];
	nb[20] = q[5];
	nb[21] = q[3];
	nb[22] = q[2];
	nb[23] = q[1];
	nb[24] = q[4];
	nb[25] = q[7];
	nb[26] = q[9];
	nb[27] = q[4];
	nb[28] = q[0];
	nb[29] = q[8];
	nb[30] = q[3];
	nb[31] = q[7];
	nb[32] = q[8];
	nb[33] = q[7];
	nb[34] = q[1];
	nb[35] = q[2];
	nb[36] = q[8];
	nb[37] = q[0];
	nb[38] = q[2];
	nb[39] = q[0];
	nb[40] = q[7];
	nb[41] = q[5];
	nb[42] = q[2];
	nb[43] = q[8];
	nb[44] = q[9];
	nb[45] = q[8];
	nb[46] = q[0];
	nb[47] = q[6];
	nb[48] = q[1];
	nb[49] = q[3];
	nb[50] = q[5];
	nb[51] = q[3];
	nb[52] = q[4];
	nb[53] = q[0];
	nb[54] = q[8];
	nb[55] = q[4];
	nb[56] = q[2];
	nb[57] = q[1];
	nb[58] = q[9];
	nb[59] = q[3];
	nb[60] = q[9];
	nb[61] = q[3];
	nb[62] = q[9];
	nb[63] = q[9];
	nb[64] = q[4];
	nb[65] = q[0];
	nb[66] = q[2];
	nb[67] = q[2];
	nb[68] = q[5];
	nb[69] = q[6];
	nb[70] = q[4];
	nb[71] = q[4];
	nb[72] = q[0];
	nb[73] = q[3];
	nb[74] = q[0];
	nb[75] = q[9];
	nb[76] = q[8];
	nb[77] = q[3];
	nb[78] = q[8];
	nb[79] = q[7];
	nb[80] = q[8];
	nb[81] = q[6];
	nb[82] = q[8];
	nb[83] = q[0];
	nb[84] = q[2];
	nb[85] = q[2];
	nb[86] = q[2];
	nb[87] = q[6];
	nb[88] = q[9];
	nb[89] = q[5];
	nb[90] = q[0];
	nb[91] = q[5];
	nb[92] = q[7];
	res[0] = q[6];
	res[1] = q[2];
	res[2] = q[8];
	res[3] = q[5];
	res[4] = q[3];
	res[5] = q[1];
	res[6] = q[7];
	res[7] = q[0];
	// Leaf function
	_computeModule(0, 5, 118, 63, 0, 4, 0);
	acquire(5, anc, 93, nb);
	Recompute (res, 0, anc, 5, 118, 63){
		Toffoli( q[5], anc[0], q[7] );
		Toffoli( q[9], q[5], q[0] );
		Toffoli( q[2], anc[0], q[6] );
		CNOT( anc[2], q[2] );
		Toffoli( q[2], anc[1], anc[0] );
		Toffoli( q[6], q[8], q[0] );
		CNOT( q[8], anc[1] );
		Toffoli( q[3], q[8], q[7] );
		Toffoli( q[0], q[9], q[8] );
		CNOT( anc[1], q[3] );
		Toffoli( anc[1], anc[3], anc[2] );
		Toffoli( q[4], q[0], anc[0] );
		Toffoli( anc[0], q[6], q[4] );
		Toffoli( q[2], anc[0], q[5] );
		CNOT( q[2], anc[3] );
		Toffoli( anc[4], q[4], q[0] );
		Toffoli( q[9], anc[4], anc[2] );
		CNOT( q[3], q[9] );
		CNOT( q[3], q[9] );
		CNOT( q[1], q[9] );
		Toffoli( q[2], anc[1], anc[2] );
		Toffoli( q[0], q[8], q[4] );
		Toffoli( q[4], anc[0], anc[3] );
		Toffoli( anc[1], q[5], q[3] );
		CNOT( q[3], anc[4] );
		Toffoli( q[6], anc[4], q[1] );
		Toffoli( anc[2], q[8], q[0] );
		Toffoli( q[8], q[9], anc[1] );
		Toffoli( anc[1], anc[0], anc[4] );
		Toffoli( q[7], q[5], q[2] );
		Toffoli( q[2], anc[3], q[0] );
		CNOT( q[8], q[0] );
		CNOT( anc[0], q[2] );
		CNOT( q[7], q[1] );
		Toffoli( anc[3], q[7], q[8] );
		Toffoli( anc[1], anc[0], q[3] );
		CNOT( q[8], anc[4] );
		CNOT( anc[2], q[0] );
		CNOT( q[4], anc[1] );
		CNOT( q[9], anc[0] );
		CNOT( q[4], q[7] );
		CNOT( q[2], q[1] );
		Toffoli( q[2], q[5], q[3] );
		CNOT( q[3], anc[3] );
		CNOT( q[5], anc[4] );
		Toffoli( q[7], q[5], q[3] );
		Toffoli( anc[0], q[4], anc[1] );
		Toffoli( q[0], anc[0], anc[3] );
		CNOT( q[0], q[7] );
		Toffoli( anc[3], anc[0], anc[4] );
		CNOT( q[7], q[0] );
		CNOT( q[3], q[6] );
		CNOT( q[7], q[2] );
		CNOT( q[2], q[7] );
		Toffoli( q[4], q[9], anc[0] );
	}
	Restore {
		CNOT( q[4], res[0] );
		CNOT( q[9], res[1] );
		CNOT( anc[3], res[2] );
		CNOT( q[0], res[3] );
		CNOT( q[1], res[4] );
		CNOT( q[5], res[5] );
		CNOT( q[3], res[6] );
		CNOT( anc[1], res[7] );
	}
	Unrecompute {
		Toffoli( q[4], q[9], anc[0] );
		CNOT( q[2], q[7] );
		CNOT( q[7], q[2] );
		CNOT( q[3], q[6] );
		CNOT( q[7], q[0] );
		Toffoli( anc[3], anc[0], anc[4] );
		CNOT( q[0], q[7] );
		Toffoli( q[0], anc[0], anc[3] );
		Toffoli( anc[0], q[4], anc[1] );
		Toffoli( q[7], q[5], q[3] );
		CNOT( q[5], anc[4] );
		CNOT( q[3], anc[3] );
		Toffoli( q[2], q[5], q[3] );
		CNOT( q[2], q[1] );
		CNOT( q[4], q[7] );
		CNOT( q[9], anc[0] );
		CNOT( q[4], anc[1] );
		CNOT( anc[2], q[0] );
		CNOT( q[8], anc[4] );
		Toffoli( anc[1], anc[0], q[3] );
		Toffoli( anc[3], q[7], q[8] );
		CNOT( q[7], q[1] );
		CNOT( anc[0], q[2] );
		CNOT( q[8], q[0] );
		Toffoli( q[2], anc[3], q[0] );
		Toffoli( q[7], q[5], q[2] );
		Toffoli( anc[1], anc[0], anc[4] );
		Toffoli( q[8], q[9], anc[1] );
		Toffoli( anc[2], q[8], q[0] );
		Toffoli( q[6], anc[4], q[1] );
		CNOT( q[3], anc[4] );
		Toffoli( anc[1], q[5], q[3] );
		Toffoli( q[4], anc[0], anc[3] );
		Toffoli( q[0], q[8], q[4] );
		Toffoli( q[2], anc[1], anc[2] );
		CNOT( q[1], q[9] );
		CNOT( q[3], q[9] );
		CNOT( q[3], q[9] );
		Toffoli( q[9], anc[4], anc[2] );
		Toffoli( anc[4], q[4], q[0] );
		CNOT( q[2], anc[3] );
		Toffoli( q[2], anc[0], q[5] );
		Toffoli( anc[0], q[6], q[4] );
		Toffoli( q[4], q[0], anc[0] );
		Toffoli( anc[1], anc[3], anc[2] );
		CNOT( anc[1], q[3] );
		Toffoli( q[0], q[9], q[8] );
		Toffoli( q[3], q[8], q[7] );
		CNOT( q[8], anc[1] );
		Toffoli( q[6], q[8], q[0] );
		Toffoli( q[2], anc[1], anc[0] );
		CNOT( anc[2], q[2] );
		Toffoli( q[2], anc[0], q[6] );
		Toffoli( q[9], q[5], q[0] );
		Toffoli( q[5], anc[0], q[7] );
	} Refree(anc, 5) {}
}
// Function 22 with degree 0
// nq: 4, na: 14, ng: 16
void func22(qbit **q, int n) {
printf("func22\n");
fflush(stderr);
	qbit *anc[14]; // ancilla
	qbit *nb[8]; // interacting bits
	qbit *res[2];
	nb[0] = q[3];
	nb[1] = q[2];
	nb[2] = q[0];
	nb[3] = q[2];
	nb[4] = q[0];
	nb[5] = q[2];
	nb[6] = q[3];
	nb[7] = q[3];
	res[0] = q[0];
	res[1] = q[3];
	// Leaf function
	Compute (0, 14, 34, 18, 0, 4, 0) {
		acquire(14, anc, 8, nb);
		CNOT( anc[9], anc[5] );
		CNOT( anc[6], anc[1] );
		Toffoli( anc[0], anc[12], anc[6] );
		Toffoli( anc[13], q[3], anc[6] );
		CNOT( q[2], anc[2] );
		Toffoli( anc[9], anc[2], anc[1] );
		CNOT( anc[10], q[0] );
		Toffoli( anc[10], anc[7], anc[12] );
		CNOT( q[2], anc[3] );
		Toffoli( anc[1], anc[7], anc[3] );
		CNOT( q[0], anc[10] );
		CNOT( anc[5], anc[8] );
		CNOT( anc[7], q[2] );
		Toffoli( q[3], anc[2], anc[13] );
		CNOT( anc[11], q[3] );
		CNOT( anc[9], anc[11] );
	}
	Store {
		CNOT( anc[10], res[0] );
		CNOT( anc[5], res[1] );
	}
	Uncompute(res, 0, anc, 14, 34, 18){
		CNOT( anc[9], anc[11] );
		CNOT( anc[11], q[3] );
		Toffoli( q[3], anc[2], anc[13] );
		CNOT( anc[7], q[2] );
		CNOT( anc[5], anc[8] );
		CNOT( q[0], anc[10] );
		Toffoli( anc[1], anc[7], anc[3] );
		CNOT( q[2], anc[3] );
		Toffoli( anc[10], anc[7], anc[12] );
		CNOT( anc[10], q[0] );
		Toffoli( anc[9], anc[2], anc[1] );
		CNOT( q[2], anc[2] );
		Toffoli( anc[13], q[3], anc[6] );
		Toffoli( anc[0], anc[12], anc[6] );
		CNOT( anc[6], anc[1] );
		CNOT( anc[9], anc[5] );
	} Free(anc, 14) {}
}
// Function 22 with degree 0
// nq: 4, na: 14, ng: 16
void func22R(qbit **q, int n) {
printf("func22R\n");
fflush(stderr);
	qbit *anc[14]; // ancilla
	qbit *nb[8]; // interacting bits
	qbit *res[2];
	nb[0] = q[3];
	nb[1] = q[2];
	nb[2] = q[0];
	nb[3] = q[2];
	nb[4] = q[0];
	nb[5] = q[2];
	nb[6] = q[3];
	nb[7] = q[3];
	res[0] = q[0];
	res[1] = q[3];
	// Leaf function
	_computeModule(0, 14, 34, 18, 0, 4, 0);
	acquire(14, anc, 8, nb);
	Recompute (res, 0, anc, 14, 34, 18){
		CNOT( anc[9], anc[11] );
		CNOT( anc[11], q[3] );
		Toffoli( q[3], anc[2], anc[13] );
		CNOT( anc[7], q[2] );
		CNOT( anc[5], anc[8] );
		CNOT( q[0], anc[10] );
		Toffoli( anc[1], anc[7], anc[3] );
		CNOT( q[2], anc[3] );
		Toffoli( anc[10], anc[7], anc[12] );
		CNOT( anc[10], q[0] );
		Toffoli( anc[9], anc[2], anc[1] );
		CNOT( q[2], anc[2] );
		Toffoli( anc[13], q[3], anc[6] );
		Toffoli( anc[0], anc[12], anc[6] );
		CNOT( anc[6], anc[1] );
		CNOT( anc[9], anc[5] );
	}
	Restore {
		CNOT( anc[10], res[0] );
		CNOT( anc[5], res[1] );
	}
	Unrecompute {
		CNOT( anc[9], anc[5] );
		CNOT( anc[6], anc[1] );
		Toffoli( anc[0], anc[12], anc[6] );
		Toffoli( anc[13], q[3], anc[6] );
		CNOT( q[2], anc[2] );
		Toffoli( anc[9], anc[2], anc[1] );
		CNOT( anc[10], q[0] );
		Toffoli( anc[10], anc[7], anc[12] );
		CNOT( q[2], anc[3] );
		Toffoli( anc[1], anc[7], anc[3] );
		CNOT( q[0], anc[10] );
		CNOT( anc[5], anc[8] );
		CNOT( anc[7], q[2] );
		Toffoli( q[3], anc[2], anc[13] );
		CNOT( anc[11], q[3] );
		CNOT( anc[9], anc[11] );
	} Refree(anc, 14) {}
}
// Function 21 with degree 0
// nq: 7, na: 5, ng: 63
void func21(qbit **q, int n) {
printf("func21\n");
fflush(stderr);
	qbit *anc[5]; // ancilla
	qbit *nb[104]; // interacting bits
	qbit *res[4];
	nb[0] = q[1];
	nb[1] = q[6];
	nb[2] = q[6];
	nb[3] = q[2];
	nb[4] = q[4];
	nb[5] = q[3];
	nb[6] = q[5];
	nb[7] = q[5];
	nb[8] = q[4];
	nb[9] = q[0];
	nb[10] = q[3];
	nb[11] = q[0];
	nb[12] = q[2];
	nb[13] = q[4];
	nb[14] = q[3];
	nb[15] = q[6];
	nb[16] = q[4];
	nb[17] = q[5];
	nb[18] = q[0];
	nb[19] = q[3];
	nb[20] = q[0];
	nb[21] = q[4];
	nb[22] = q[3];
	nb[23] = q[4];
	nb[24] = q[4];
	nb[25] = q[6];
	nb[26] = q[5];
	nb[27] = q[0];
	nb[28] = q[6];
	nb[29] = q[1];
	nb[30] = q[5];
	nb[31] = q[3];
	nb[32] = q[0];
	nb[33] = q[3];
	nb[34] = q[2];
	nb[35] = q[1];
	nb[36] = q[5];
	nb[37] = q[2];
	nb[38] = q[4];
	nb[39] = q[2];
	nb[40] = q[5];
	nb[41] = q[2];
	nb[42] = q[1];
	nb[43] = q[2];
	nb[44] = q[5];
	nb[45] = q[0];
	nb[46] = q[5];
	nb[47] = q[1];
	nb[48] = q[6];
	nb[49] = q[1];
	nb[50] = q[0];
	nb[51] = q[6];
	nb[52] = q[1];
	nb[53] = q[5];
	nb[54] = q[1];
	nb[55] = q[3];
	nb[56] = q[5];
	nb[57] = q[2];
	nb[58] = q[1];
	nb[59] = q[5];
	nb[60] = q[5];
	nb[61] = q[5];
	nb[62] = q[1];
	nb[63] = q[0];
	nb[64] = q[1];
	nb[65] = q[6];
	nb[66] = q[3];
	nb[67] = q[2];
	nb[68] = q[4];
	nb[69] = q[6];
	nb[70] = q[2];
	nb[71] = q[3];
	nb[72] = q[3];
	nb[73] = q[2];
	nb[74] = q[1];
	nb[75] = q[1];
	nb[76] = q[0];
	nb[77] = q[6];
	nb[78] = q[4];
	nb[79] = q[5];
	nb[80] = q[2];
	nb[81] = q[2];
	nb[82] = q[5];
	nb[83] = q[3];
	nb[84] = q[4];
	nb[85] = q[4];
	nb[86] = q[2];
	nb[87] = q[6];
	nb[88] = q[0];
	nb[89] = q[2];
	nb[90] = q[0];
	nb[91] = q[1];
	nb[92] = q[2];
	nb[93] = q[5];
	nb[94] = q[0];
	nb[95] = q[6];
	nb[96] = q[2];
	nb[97] = q[1];
	nb[98] = q[0];
	nb[99] = q[0];
	nb[100] = q[5];
	nb[101] = q[2];
	nb[102] = q[0];
	nb[103] = q[4];
	res[0] = q[0];
	res[1] = q[3];
	res[2] = q[5];
	res[3] = q[1];
	// Leaf function
	Compute (0, 5, 130, 67, 0, 4, 0) {
		acquire(5, anc, 104, nb);
		Toffoli( anc[4], q[1], q[6] );
		CNOT( q[6], q[2] );
		CNOT( anc[0], q[4] );
		Toffoli( anc[3], q[3], q[5] );
		CNOT( anc[1], anc[2] );
		Toffoli( q[5], anc[4], anc[0] );
		Toffoli( q[4], q[0], anc[2] );
		Toffoli( q[3], anc[3], q[0] );
		Toffoli( q[2], anc[2], anc[3] );
		CNOT( q[4], q[3] );
		CNOT( anc[1], anc[0] );
		Toffoli( anc[0], q[6], q[4] );
		Toffoli( anc[2], q[5], q[0] );
		CNOT( q[3], q[0] );
		CNOT( anc[3], anc[4] );
		CNOT( anc[4], q[4] );
		CNOT( q[3], q[4] );
		Toffoli( q[4], q[6], q[5] );
		CNOT( anc[0], anc[4] );
		CNOT( q[0], q[6] );
		CNOT( q[1], q[5] );
		Toffoli( anc[3], q[3], q[0] );
		CNOT( q[3], q[2] );
		CNOT( anc[0], anc[2] );
		Toffoli( q[1], q[5], anc[1] );
		Toffoli( q[2], anc[3], anc[0] );
		Toffoli( q[4], q[2], q[5] );
		CNOT( q[2], q[1] );
		CNOT( q[2], anc[2] );
		CNOT( anc[3], q[5] );
		Toffoli( q[0], anc[1], q[5] );
		Toffoli( q[1], anc[0], q[6] );
		Toffoli( q[1], q[0], anc[2] );
		CNOT( anc[1], q[6] );
		Toffoli( q[1], q[5], anc[1] );
		Toffoli( q[1], q[3], q[5] );
		CNOT( q[2], q[1] );
		Toffoli( anc[2], q[5], anc[4] );
		CNOT( anc[1], anc[3] );
		CNOT( q[5], anc[4] );
		Toffoli( anc[4], q[5], q[1] );
		CNOT( q[0], q[1] );
		CNOT( anc[4], anc[3] );
		Toffoli( q[6], anc[3], q[3] );
		Toffoli( q[2], q[4], q[6] );
		Toffoli( q[2], q[3], anc[1] );
		Toffoli( q[3], q[2], q[1] );
		CNOT( anc[4], q[1] );
		Toffoli( q[0], anc[0], q[6] );
		CNOT( q[4], anc[1] );
		Toffoli( q[5], anc[4], q[2] );
		Toffoli( q[2], anc[2], q[5] );
		CNOT( anc[4], q[3] );
		CNOT( anc[2], q[4] );
		Toffoli( anc[2], q[4], q[2] );
		Toffoli( q[6], q[0], q[2] );
		Toffoli( q[0], q[1], q[2] );
		Toffoli( anc[0], q[5], anc[1] );
		Toffoli( q[0], anc[0], q[6] );
		Toffoli( q[2], anc[1], anc[4] );
		Toffoli( q[1], q[0], anc[2] );
		Toffoli( q[0], q[5], q[2] );
		Toffoli( anc[1], q[0], q[4] );
	}
	Store {
		CNOT( anc[2], res[0] );
		CNOT( q[1], res[1] );
		CNOT( anc[4], res[2] );
		CNOT( anc[3], res[3] );
	}
	Uncompute(res, 0, anc, 5, 130, 67){
		Toffoli( anc[1], q[0], q[4] );
		Toffoli( q[0], q[5], q[2] );
		Toffoli( q[1], q[0], anc[2] );
		Toffoli( q[2], anc[1], anc[4] );
		Toffoli( q[0], anc[0], q[6] );
		Toffoli( anc[0], q[5], anc[1] );
		Toffoli( q[0], q[1], q[2] );
		Toffoli( q[6], q[0], q[2] );
		Toffoli( anc[2], q[4], q[2] );
		CNOT( anc[2], q[4] );
		CNOT( anc[4], q[3] );
		Toffoli( q[2], anc[2], q[5] );
		Toffoli( q[5], anc[4], q[2] );
		CNOT( q[4], anc[1] );
		Toffoli( q[0], anc[0], q[6] );
		CNOT( anc[4], q[1] );
		Toffoli( q[3], q[2], q[1] );
		Toffoli( q[2], q[3], anc[1] );
		Toffoli( q[2], q[4], q[6] );
		Toffoli( q[6], anc[3], q[3] );
		CNOT( anc[4], anc[3] );
		CNOT( q[0], q[1] );
		Toffoli( anc[4], q[5], q[1] );
		CNOT( q[5], anc[4] );
		CNOT( anc[1], anc[3] );
		Toffoli( anc[2], q[5], anc[4] );
		CNOT( q[2], q[1] );
		Toffoli( q[1], q[3], q[5] );
		Toffoli( q[1], q[5], anc[1] );
		CNOT( anc[1], q[6] );
		Toffoli( q[1], q[0], anc[2] );
		Toffoli( q[1], anc[0], q[6] );
		Toffoli( q[0], anc[1], q[5] );
		CNOT( anc[3], q[5] );
		CNOT( q[2], anc[2] );
		CNOT( q[2], q[1] );
		Toffoli( q[4], q[2], q[5] );
		Toffoli( q[2], anc[3], anc[0] );
		Toffoli( q[1], q[5], anc[1] );
		CNOT( anc[0], anc[2] );
		CNOT( q[3], q[2] );
		Toffoli( anc[3], q[3], q[0] );
		CNOT( q[1], q[5] );
		CNOT( q[0], q[6] );
		CNOT( anc[0], anc[4] );
		Toffoli( q[4], q[6], q[5] );
		CNOT( q[3], q[4] );
		CNOT( anc[4], q[4] );
		CNOT( anc[3], anc[4] );
		CNOT( q[3], q[0] );
		Toffoli( anc[2], q[5], q[0] );
		Toffoli( anc[0], q[6], q[4] );
		CNOT( anc[1], anc[0] );
		CNOT( q[4], q[3] );
		Toffoli( q[2], anc[2], anc[3] );
		Toffoli( q[3], anc[3], q[0] );
		Toffoli( q[4], q[0], anc[2] );
		Toffoli( q[5], anc[4], anc[0] );
		CNOT( anc[1], anc[2] );
		Toffoli( anc[3], q[3], q[5] );
		CNOT( anc[0], q[4] );
		CNOT( q[6], q[2] );
		Toffoli( anc[4], q[1], q[6] );
	} Free(anc, 5) {}
}
// Function 21 with degree 0
// nq: 7, na: 5, ng: 63
void func21R(qbit **q, int n) {
printf("func21R\n");
fflush(stderr);
	qbit *anc[5]; // ancilla
	qbit *nb[104]; // interacting bits
	qbit *res[4];
	nb[0] = q[1];
	nb[1] = q[6];
	nb[2] = q[6];
	nb[3] = q[2];
	nb[4] = q[4];
	nb[5] = q[3];
	nb[6] = q[5];
	nb[7] = q[5];
	nb[8] = q[4];
	nb[9] = q[0];
	nb[10] = q[3];
	nb[11] = q[0];
	nb[12] = q[2];
	nb[13] = q[4];
	nb[14] = q[3];
	nb[15] = q[6];
	nb[16] = q[4];
	nb[17] = q[5];
	nb[18] = q[0];
	nb[19] = q[3];
	nb[20] = q[0];
	nb[21] = q[4];
	nb[22] = q[3];
	nb[23] = q[4];
	nb[24] = q[4];
	nb[25] = q[6];
	nb[26] = q[5];
	nb[27] = q[0];
	nb[28] = q[6];
	nb[29] = q[1];
	nb[30] = q[5];
	nb[31] = q[3];
	nb[32] = q[0];
	nb[33] = q[3];
	nb[34] = q[2];
	nb[35] = q[1];
	nb[36] = q[5];
	nb[37] = q[2];
	nb[38] = q[4];
	nb[39] = q[2];
	nb[40] = q[5];
	nb[41] = q[2];
	nb[42] = q[1];
	nb[43] = q[2];
	nb[44] = q[5];
	nb[45] = q[0];
	nb[46] = q[5];
	nb[47] = q[1];
	nb[48] = q[6];
	nb[49] = q[1];
	nb[50] = q[0];
	nb[51] = q[6];
	nb[52] = q[1];
	nb[53] = q[5];
	nb[54] = q[1];
	nb[55] = q[3];
	nb[56] = q[5];
	nb[57] = q[2];
	nb[58] = q[1];
	nb[59] = q[5];
	nb[60] = q[5];
	nb[61] = q[5];
	nb[62] = q[1];
	nb[63] = q[0];
	nb[64] = q[1];
	nb[65] = q[6];
	nb[66] = q[3];
	nb[67] = q[2];
	nb[68] = q[4];
	nb[69] = q[6];
	nb[70] = q[2];
	nb[71] = q[3];
	nb[72] = q[3];
	nb[73] = q[2];
	nb[74] = q[1];
	nb[75] = q[1];
	nb[76] = q[0];
	nb[77] = q[6];
	nb[78] = q[4];
	nb[79] = q[5];
	nb[80] = q[2];
	nb[81] = q[2];
	nb[82] = q[5];
	nb[83] = q[3];
	nb[84] = q[4];
	nb[85] = q[4];
	nb[86] = q[2];
	nb[87] = q[6];
	nb[88] = q[0];
	nb[89] = q[2];
	nb[90] = q[0];
	nb[91] = q[1];
	nb[92] = q[2];
	nb[93] = q[5];
	nb[94] = q[0];
	nb[95] = q[6];
	nb[96] = q[2];
	nb[97] = q[1];
	nb[98] = q[0];
	nb[99] = q[0];
	nb[100] = q[5];
	nb[101] = q[2];
	nb[102] = q[0];
	nb[103] = q[4];
	res[0] = q[0];
	res[1] = q[3];
	res[2] = q[5];
	res[3] = q[1];
	// Leaf function
	_computeModule(0, 5, 130, 67, 0, 4, 0);
	acquire(5, anc, 104, nb);
	Recompute (res, 0, anc, 5, 130, 67){
		Toffoli( anc[1], q[0], q[4] );
		Toffoli( q[0], q[5], q[2] );
		Toffoli( q[1], q[0], anc[2] );
		Toffoli( q[2], anc[1], anc[4] );
		Toffoli( q[0], anc[0], q[6] );
		Toffoli( anc[0], q[5], anc[1] );
		Toffoli( q[0], q[1], q[2] );
		Toffoli( q[6], q[0], q[2] );
		Toffoli( anc[2], q[4], q[2] );
		CNOT( anc[2], q[4] );
		CNOT( anc[4], q[3] );
		Toffoli( q[2], anc[2], q[5] );
		Toffoli( q[5], anc[4], q[2] );
		CNOT( q[4], anc[1] );
		Toffoli( q[0], anc[0], q[6] );
		CNOT( anc[4], q[1] );
		Toffoli( q[3], q[2], q[1] );
		Toffoli( q[2], q[3], anc[1] );
		Toffoli( q[2], q[4], q[6] );
		Toffoli( q[6], anc[3], q[3] );
		CNOT( anc[4], anc[3] );
		CNOT( q[0], q[1] );
		Toffoli( anc[4], q[5], q[1] );
		CNOT( q[5], anc[4] );
		CNOT( anc[1], anc[3] );
		Toffoli( anc[2], q[5], anc[4] );
		CNOT( q[2], q[1] );
		Toffoli( q[1], q[3], q[5] );
		Toffoli( q[1], q[5], anc[1] );
		CNOT( anc[1], q[6] );
		Toffoli( q[1], q[0], anc[2] );
		Toffoli( q[1], anc[0], q[6] );
		Toffoli( q[0], anc[1], q[5] );
		CNOT( anc[3], q[5] );
		CNOT( q[2], anc[2] );
		CNOT( q[2], q[1] );
		Toffoli( q[4], q[2], q[5] );
		Toffoli( q[2], anc[3], anc[0] );
		Toffoli( q[1], q[5], anc[1] );
		CNOT( anc[0], anc[2] );
		CNOT( q[3], q[2] );
		Toffoli( anc[3], q[3], q[0] );
		CNOT( q[1], q[5] );
		CNOT( q[0], q[6] );
		CNOT( anc[0], anc[4] );
		Toffoli( q[4], q[6], q[5] );
		CNOT( q[3], q[4] );
		CNOT( anc[4], q[4] );
		CNOT( anc[3], anc[4] );
		CNOT( q[3], q[0] );
		Toffoli( anc[2], q[5], q[0] );
		Toffoli( anc[0], q[6], q[4] );
		CNOT( anc[1], anc[0] );
		CNOT( q[4], q[3] );
		Toffoli( q[2], anc[2], anc[3] );
		Toffoli( q[3], anc[3], q[0] );
		Toffoli( q[4], q[0], anc[2] );
		Toffoli( q[5], anc[4], anc[0] );
		CNOT( anc[1], anc[2] );
		Toffoli( anc[3], q[3], q[5] );
		CNOT( anc[0], q[4] );
		CNOT( q[6], q[2] );
		Toffoli( anc[4], q[1], q[6] );
	}
	Restore {
		CNOT( anc[2], res[0] );
		CNOT( q[1], res[1] );
		CNOT( anc[4], res[2] );
		CNOT( anc[3], res[3] );
	}
	Unrecompute {
		Toffoli( anc[4], q[1], q[6] );
		CNOT( q[6], q[2] );
		CNOT( anc[0], q[4] );
		Toffoli( anc[3], q[3], q[5] );
		CNOT( anc[1], anc[2] );
		Toffoli( q[5], anc[4], anc[0] );
		Toffoli( q[4], q[0], anc[2] );
		Toffoli( q[3], anc[3], q[0] );
		Toffoli( q[2], anc[2], anc[3] );
		CNOT( q[4], q[3] );
		CNOT( anc[1], anc[0] );
		Toffoli( anc[0], q[6], q[4] );
		Toffoli( anc[2], q[5], q[0] );
		CNOT( q[3], q[0] );
		CNOT( anc[3], anc[4] );
		CNOT( anc[4], q[4] );
		CNOT( q[3], q[4] );
		Toffoli( q[4], q[6], q[5] );
		CNOT( anc[0], anc[4] );
		CNOT( q[0], q[6] );
		CNOT( q[1], q[5] );
		Toffoli( anc[3], q[3], q[0] );
		CNOT( q[3], q[2] );
		CNOT( anc[0], anc[2] );
		Toffoli( q[1], q[5], anc[1] );
		Toffoli( q[2], anc[3], anc[0] );
		Toffoli( q[4], q[2], q[5] );
		CNOT( q[2], q[1] );
		CNOT( q[2], anc[2] );
		CNOT( anc[3], q[5] );
		Toffoli( q[0], anc[1], q[5] );
		Toffoli( q[1], anc[0], q[6] );
		Toffoli( q[1], q[0], anc[2] );
		CNOT( anc[1], q[6] );
		Toffoli( q[1], q[5], anc[1] );
		Toffoli( q[1], q[3], q[5] );
		CNOT( q[2], q[1] );
		Toffoli( anc[2], q[5], anc[4] );
		CNOT( anc[1], anc[3] );
		CNOT( q[5], anc[4] );
		Toffoli( anc[4], q[5], q[1] );
		CNOT( q[0], q[1] );
		CNOT( anc[4], anc[3] );
		Toffoli( q[6], anc[3], q[3] );
		Toffoli( q[2], q[4], q[6] );
		Toffoli( q[2], q[3], anc[1] );
		Toffoli( q[3], q[2], q[1] );
		CNOT( anc[4], q[1] );
		Toffoli( q[0], anc[0], q[6] );
		CNOT( q[4], anc[1] );
		Toffoli( q[5], anc[4], q[2] );
		Toffoli( q[2], anc[2], q[5] );
		CNOT( anc[4], q[3] );
		CNOT( anc[2], q[4] );
		Toffoli( anc[2], q[4], q[2] );
		Toffoli( q[6], q[0], q[2] );
		Toffoli( q[0], q[1], q[2] );
		Toffoli( anc[0], q[5], anc[1] );
		Toffoli( q[0], anc[0], q[6] );
		Toffoli( q[2], anc[1], anc[4] );
		Toffoli( q[1], q[0], anc[2] );
		Toffoli( q[0], q[5], q[2] );
		Toffoli( anc[1], q[0], q[4] );
	} Refree(anc, 5) {}
}
// Function 20 with degree 0
// nq: 8, na: 3, ng: 8
void func20(qbit **q, int n) {
printf("func20\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[14]; // interacting bits
	qbit *res[6];
	nb[0] = q[2];
	nb[1] = q[1];
	nb[2] = q[6];
	nb[3] = q[2];
	nb[4] = q[1];
	nb[5] = q[3];
	nb[6] = q[7];
	nb[7] = q[5];
	nb[8] = q[2];
	nb[9] = q[5];
	nb[10] = q[2];
	nb[11] = q[7];
	nb[12] = q[7];
	nb[13] = q[1];
	res[0] = q[6];
	res[1] = q[1];
	res[2] = q[2];
	res[3] = q[4];
	res[4] = q[5];
	res[5] = q[7];
	// Leaf function
	Compute (0, 3, 22, 14, 0, 4, 0) {
		acquire(3, anc, 14, nb);
		Toffoli( q[2], q[1], q[6] );
		CNOT( q[2], q[1] );
		Toffoli( q[3], q[7], q[5] );
		Toffoli( q[2], anc[1], anc[2] );
		CNOT( q[5], q[2] );
		CNOT( anc[1], q[7] );
		Toffoli( anc[1], q[7], q[1] );
		CNOT( anc[1], anc[2] );
	}
	Store {
		CNOT( anc[0], res[0] );
		CNOT( anc[2], res[1] );
		CNOT( q[0], res[2] );
		CNOT( anc[1], res[3] );
		CNOT( q[2], res[4] );
		CNOT( q[3], res[5] );
	}
	Uncompute(res, 0, anc, 3, 22, 14){
		CNOT( anc[1], anc[2] );
		Toffoli( anc[1], q[7], q[1] );
		CNOT( anc[1], q[7] );
		CNOT( q[5], q[2] );
		Toffoli( q[2], anc[1], anc[2] );
		Toffoli( q[3], q[7], q[5] );
		CNOT( q[2], q[1] );
		Toffoli( q[2], q[1], q[6] );
	} Free(anc, 3) {}
}
// Function 20 with degree 0
// nq: 8, na: 3, ng: 8
void func20R(qbit **q, int n) {
printf("func20R\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[14]; // interacting bits
	qbit *res[6];
	nb[0] = q[2];
	nb[1] = q[1];
	nb[2] = q[6];
	nb[3] = q[2];
	nb[4] = q[1];
	nb[5] = q[3];
	nb[6] = q[7];
	nb[7] = q[5];
	nb[8] = q[2];
	nb[9] = q[5];
	nb[10] = q[2];
	nb[11] = q[7];
	nb[12] = q[7];
	nb[13] = q[1];
	res[0] = q[6];
	res[1] = q[1];
	res[2] = q[2];
	res[3] = q[4];
	res[4] = q[5];
	res[5] = q[7];
	// Leaf function
	_computeModule(0, 3, 22, 14, 0, 4, 0);
	acquire(3, anc, 14, nb);
	Recompute (res, 0, anc, 3, 22, 14){
		CNOT( anc[1], anc[2] );
		Toffoli( anc[1], q[7], q[1] );
		CNOT( anc[1], q[7] );
		CNOT( q[5], q[2] );
		Toffoli( q[2], anc[1], anc[2] );
		Toffoli( q[3], q[7], q[5] );
		CNOT( q[2], q[1] );
		Toffoli( q[2], q[1], q[6] );
	}
	Restore {
		CNOT( anc[0], res[0] );
		CNOT( anc[2], res[1] );
		CNOT( q[0], res[2] );
		CNOT( anc[1], res[3] );
		CNOT( q[2], res[4] );
		CNOT( q[3], res[5] );
	}
	Unrecompute {
		Toffoli( q[2], q[1], q[6] );
		CNOT( q[2], q[1] );
		Toffoli( q[3], q[7], q[5] );
		Toffoli( q[2], anc[1], anc[2] );
		CNOT( q[5], q[2] );
		CNOT( anc[1], q[7] );
		Toffoli( anc[1], q[7], q[1] );
		CNOT( anc[1], anc[2] );
	} Refree(anc, 3) {}
}
// Function 19 with degree 0
// nq: 9, na: 2, ng: 58
void func19(qbit **q, int n) {
printf("func19\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[115]; // interacting bits
	qbit *res[5];
	nb[0] = q[6];
	nb[1] = q[4];
	nb[2] = q[7];
	nb[3] = q[1];
	nb[4] = q[8];
	nb[5] = q[2];
	nb[6] = q[8];
	nb[7] = q[5];
	nb[8] = q[1];
	nb[9] = q[4];
	nb[10] = q[7];
	nb[11] = q[6];
	nb[12] = q[5];
	nb[13] = q[7];
	nb[14] = q[2];
	nb[15] = q[4];
	nb[16] = q[4];
	nb[17] = q[3];
	nb[18] = q[7];
	nb[19] = q[6];
	nb[20] = q[4];
	nb[21] = q[0];
	nb[22] = q[4];
	nb[23] = q[5];
	nb[24] = q[8];
	nb[25] = q[3];
	nb[26] = q[0];
	nb[27] = q[5];
	nb[28] = q[3];
	nb[29] = q[0];
	nb[30] = q[5];
	nb[31] = q[3];
	nb[32] = q[8];
	nb[33] = q[1];
	nb[34] = q[8];
	nb[35] = q[6];
	nb[36] = q[2];
	nb[37] = q[3];
	nb[38] = q[1];
	nb[39] = q[2];
	nb[40] = q[3];
	nb[41] = q[5];
	nb[42] = q[8];
	nb[43] = q[3];
	nb[44] = q[4];
	nb[45] = q[5];
	nb[46] = q[7];
	nb[47] = q[4];
	nb[48] = q[2];
	nb[49] = q[6];
	nb[50] = q[3];
	nb[51] = q[0];
	nb[52] = q[8];
	nb[53] = q[4];
	nb[54] = q[5];
	nb[55] = q[2];
	nb[56] = q[2];
	nb[57] = q[7];
	nb[58] = q[8];
	nb[59] = q[7];
	nb[60] = q[4];
	nb[61] = q[4];
	nb[62] = q[0];
	nb[63] = q[1];
	nb[64] = q[2];
	nb[65] = q[5];
	nb[66] = q[0];
	nb[67] = q[3];
	nb[68] = q[5];
	nb[69] = q[0];
	nb[70] = q[3];
	nb[71] = q[8];
	nb[72] = q[6];
	nb[73] = q[1];
	nb[74] = q[0];
	nb[75] = q[4];
	nb[76] = q[1];
	nb[77] = q[7];
	nb[78] = q[3];
	nb[79] = q[5];
	nb[80] = q[0];
	nb[81] = q[7];
	nb[82] = q[1];
	nb[83] = q[5];
	nb[84] = q[6];
	nb[85] = q[2];
	nb[86] = q[1];
	nb[87] = q[3];
	nb[88] = q[7];
	nb[89] = q[5];
	nb[90] = q[4];
	nb[91] = q[5];
	nb[92] = q[0];
	nb[93] = q[8];
	nb[94] = q[7];
	nb[95] = q[6];
	nb[96] = q[5];
	nb[97] = q[6];
	nb[98] = q[8];
	nb[99] = q[0];
	nb[100] = q[3];
	nb[101] = q[5];
	nb[102] = q[6];
	nb[103] = q[4];
	nb[104] = q[7];
	nb[105] = q[0];
	nb[106] = q[8];
	nb[107] = q[2];
	nb[108] = q[0];
	nb[109] = q[2];
	nb[110] = q[6];
	nb[111] = q[0];
	nb[112] = q[6];
	nb[113] = q[0];
	nb[114] = q[4];
	res[0] = q[7];
	res[1] = q[2];
	res[2] = q[8];
	res[3] = q[3];
	res[4] = q[6];
	// Leaf function
	Compute (0, 2, 121, 63, 0, 4, 0) {
		acquire(2, anc, 115, nb);
		Toffoli( q[6], q[4], anc[0] );
		Toffoli( q[7], anc[1], q[1] );
		CNOT( anc[1], anc[0] );
		Toffoli( q[8], anc[0], q[2] );
		Toffoli( q[8], q[5], q[1] );
		CNOT( q[4], q[7] );
		CNOT( q[6], q[5] );
		CNOT( q[7], q[2] );
		CNOT( q[4], anc[0] );
		CNOT( q[4], q[3] );
		CNOT( q[7], q[6] );
		CNOT( q[4], q[0] );
		Toffoli( q[4], anc[0], q[5] );
		CNOT( q[8], q[3] );
		Toffoli( q[0], q[5], q[3] );
		Toffoli( q[0], anc[0], anc[1] );
		Toffoli( q[5], q[3], q[8] );
		CNOT( q[1], q[8] );
		CNOT( anc[0], anc[1] );
		Toffoli( q[6], anc[1], anc[0] );
		Toffoli( q[2], anc[0], anc[1] );
		CNOT( q[3], q[1] );
		Toffoli( q[2], anc[0], anc[1] );
		CNOT( q[3], q[5] );
		Toffoli( q[8], q[3], q[4] );
		Toffoli( q[5], q[7], q[4] );
		CNOT( q[2], anc[0] );
		CNOT( q[6], anc[1] );
		Toffoli( q[3], q[0], q[8] );
		CNOT( q[4], anc[0] );
		CNOT( q[5], q[2] );
		CNOT( q[2], q[7] );
		Toffoli( q[8], q[7], q[4] );
		CNOT( q[4], q[0] );
		CNOT( anc[1], q[1] );
		Toffoli( q[2], anc[0], q[5] );
		Toffoli( q[0], q[3], anc[0] );
		Toffoli( q[5], q[0], q[3] );
		Toffoli( q[8], anc[0], q[6] );
		Toffoli( q[1], q[0], q[4] );
		CNOT( q[1], q[7] );
		CNOT( anc[1], anc[0] );
		Toffoli( q[3], q[5], q[0] );
		Toffoli( anc[1], q[7], q[1] );
		Toffoli( q[5], q[6], q[2] );
		Toffoli( q[1], q[3], q[7] );
		Toffoli( anc[0], q[5], q[4] );
		CNOT( q[5], q[0] );
		CNOT( q[8], q[7] );
		CNOT( q[6], q[5] );
		CNOT( q[6], q[8] );
		CNOT( q[0], q[3] );
		CNOT( q[5], q[6] );
		CNOT( q[4], q[7] );
		Toffoli( q[0], q[8], q[2] );
		Toffoli( anc[0], q[0], q[2] );
		CNOT( q[6], q[0] );
		Toffoli( q[6], q[0], q[4] );
	}
	Store {
		CNOT( anc[1], res[0] );
		CNOT( q[6], res[1] );
		CNOT( q[0], res[2] );
		CNOT( q[2], res[3] );
		CNOT( q[1], res[4] );
	}
	Uncompute(res, 0, anc, 2, 121, 63){
		Toffoli( q[6], q[0], q[4] );
		CNOT( q[6], q[0] );
		Toffoli( anc[0], q[0], q[2] );
		Toffoli( q[0], q[8], q[2] );
		CNOT( q[4], q[7] );
		CNOT( q[5], q[6] );
		CNOT( q[0], q[3] );
		CNOT( q[6], q[8] );
		CNOT( q[6], q[5] );
		CNOT( q[8], q[7] );
		CNOT( q[5], q[0] );
		Toffoli( anc[0], q[5], q[4] );
		Toffoli( q[1], q[3], q[7] );
		Toffoli( q[5], q[6], q[2] );
		Toffoli( anc[1], q[7], q[1] );
		Toffoli( q[3], q[5], q[0] );
		CNOT( anc[1], anc[0] );
		CNOT( q[1], q[7] );
		Toffoli( q[1], q[0], q[4] );
		Toffoli( q[8], anc[0], q[6] );
		Toffoli( q[5], q[0], q[3] );
		Toffoli( q[0], q[3], anc[0] );
		Toffoli( q[2], anc[0], q[5] );
		CNOT( anc[1], q[1] );
		CNOT( q[4], q[0] );
		Toffoli( q[8], q[7], q[4] );
		CNOT( q[2], q[7] );
		CNOT( q[5], q[2] );
		CNOT( q[4], anc[0] );
		Toffoli( q[3], q[0], q[8] );
		CNOT( q[6], anc[1] );
		CNOT( q[2], anc[0] );
		Toffoli( q[5], q[7], q[4] );
		Toffoli( q[8], q[3], q[4] );
		CNOT( q[3], q[5] );
		Toffoli( q[2], anc[0], anc[1] );
		CNOT( q[3], q[1] );
		Toffoli( q[2], anc[0], anc[1] );
		Toffoli( q[6], anc[1], anc[0] );
		CNOT( anc[0], anc[1] );
		CNOT( q[1], q[8] );
		Toffoli( q[5], q[3], q[8] );
		Toffoli( q[0], anc[0], anc[1] );
		Toffoli( q[0], q[5], q[3] );
		CNOT( q[8], q[3] );
		Toffoli( q[4], anc[0], q[5] );
		CNOT( q[4], q[0] );
		CNOT( q[7], q[6] );
		CNOT( q[4], q[3] );
		CNOT( q[4], anc[0] );
		CNOT( q[7], q[2] );
		CNOT( q[6], q[5] );
		CNOT( q[4], q[7] );
		Toffoli( q[8], q[5], q[1] );
		Toffoli( q[8], anc[0], q[2] );
		CNOT( anc[1], anc[0] );
		Toffoli( q[7], anc[1], q[1] );
		Toffoli( q[6], q[4], anc[0] );
	} Free(anc, 2) {}
}
// Function 19 with degree 0
// nq: 9, na: 2, ng: 58
void func19R(qbit **q, int n) {
printf("func19R\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[115]; // interacting bits
	qbit *res[5];
	nb[0] = q[6];
	nb[1] = q[4];
	nb[2] = q[7];
	nb[3] = q[1];
	nb[4] = q[8];
	nb[5] = q[2];
	nb[6] = q[8];
	nb[7] = q[5];
	nb[8] = q[1];
	nb[9] = q[4];
	nb[10] = q[7];
	nb[11] = q[6];
	nb[12] = q[5];
	nb[13] = q[7];
	nb[14] = q[2];
	nb[15] = q[4];
	nb[16] = q[4];
	nb[17] = q[3];
	nb[18] = q[7];
	nb[19] = q[6];
	nb[20] = q[4];
	nb[21] = q[0];
	nb[22] = q[4];
	nb[23] = q[5];
	nb[24] = q[8];
	nb[25] = q[3];
	nb[26] = q[0];
	nb[27] = q[5];
	nb[28] = q[3];
	nb[29] = q[0];
	nb[30] = q[5];
	nb[31] = q[3];
	nb[32] = q[8];
	nb[33] = q[1];
	nb[34] = q[8];
	nb[35] = q[6];
	nb[36] = q[2];
	nb[37] = q[3];
	nb[38] = q[1];
	nb[39] = q[2];
	nb[40] = q[3];
	nb[41] = q[5];
	nb[42] = q[8];
	nb[43] = q[3];
	nb[44] = q[4];
	nb[45] = q[5];
	nb[46] = q[7];
	nb[47] = q[4];
	nb[48] = q[2];
	nb[49] = q[6];
	nb[50] = q[3];
	nb[51] = q[0];
	nb[52] = q[8];
	nb[53] = q[4];
	nb[54] = q[5];
	nb[55] = q[2];
	nb[56] = q[2];
	nb[57] = q[7];
	nb[58] = q[8];
	nb[59] = q[7];
	nb[60] = q[4];
	nb[61] = q[4];
	nb[62] = q[0];
	nb[63] = q[1];
	nb[64] = q[2];
	nb[65] = q[5];
	nb[66] = q[0];
	nb[67] = q[3];
	nb[68] = q[5];
	nb[69] = q[0];
	nb[70] = q[3];
	nb[71] = q[8];
	nb[72] = q[6];
	nb[73] = q[1];
	nb[74] = q[0];
	nb[75] = q[4];
	nb[76] = q[1];
	nb[77] = q[7];
	nb[78] = q[3];
	nb[79] = q[5];
	nb[80] = q[0];
	nb[81] = q[7];
	nb[82] = q[1];
	nb[83] = q[5];
	nb[84] = q[6];
	nb[85] = q[2];
	nb[86] = q[1];
	nb[87] = q[3];
	nb[88] = q[7];
	nb[89] = q[5];
	nb[90] = q[4];
	nb[91] = q[5];
	nb[92] = q[0];
	nb[93] = q[8];
	nb[94] = q[7];
	nb[95] = q[6];
	nb[96] = q[5];
	nb[97] = q[6];
	nb[98] = q[8];
	nb[99] = q[0];
	nb[100] = q[3];
	nb[101] = q[5];
	nb[102] = q[6];
	nb[103] = q[4];
	nb[104] = q[7];
	nb[105] = q[0];
	nb[106] = q[8];
	nb[107] = q[2];
	nb[108] = q[0];
	nb[109] = q[2];
	nb[110] = q[6];
	nb[111] = q[0];
	nb[112] = q[6];
	nb[113] = q[0];
	nb[114] = q[4];
	res[0] = q[7];
	res[1] = q[2];
	res[2] = q[8];
	res[3] = q[3];
	res[4] = q[6];
	// Leaf function
	_computeModule(0, 2, 121, 63, 0, 4, 0);
	acquire(2, anc, 115, nb);
	Recompute (res, 0, anc, 2, 121, 63){
		Toffoli( q[6], q[0], q[4] );
		CNOT( q[6], q[0] );
		Toffoli( anc[0], q[0], q[2] );
		Toffoli( q[0], q[8], q[2] );
		CNOT( q[4], q[7] );
		CNOT( q[5], q[6] );
		CNOT( q[0], q[3] );
		CNOT( q[6], q[8] );
		CNOT( q[6], q[5] );
		CNOT( q[8], q[7] );
		CNOT( q[5], q[0] );
		Toffoli( anc[0], q[5], q[4] );
		Toffoli( q[1], q[3], q[7] );
		Toffoli( q[5], q[6], q[2] );
		Toffoli( anc[1], q[7], q[1] );
		Toffoli( q[3], q[5], q[0] );
		CNOT( anc[1], anc[0] );
		CNOT( q[1], q[7] );
		Toffoli( q[1], q[0], q[4] );
		Toffoli( q[8], anc[0], q[6] );
		Toffoli( q[5], q[0], q[3] );
		Toffoli( q[0], q[3], anc[0] );
		Toffoli( q[2], anc[0], q[5] );
		CNOT( anc[1], q[1] );
		CNOT( q[4], q[0] );
		Toffoli( q[8], q[7], q[4] );
		CNOT( q[2], q[7] );
		CNOT( q[5], q[2] );
		CNOT( q[4], anc[0] );
		Toffoli( q[3], q[0], q[8] );
		CNOT( q[6], anc[1] );
		CNOT( q[2], anc[0] );
		Toffoli( q[5], q[7], q[4] );
		Toffoli( q[8], q[3], q[4] );
		CNOT( q[3], q[5] );
		Toffoli( q[2], anc[0], anc[1] );
		CNOT( q[3], q[1] );
		Toffoli( q[2], anc[0], anc[1] );
		Toffoli( q[6], anc[1], anc[0] );
		CNOT( anc[0], anc[1] );
		CNOT( q[1], q[8] );
		Toffoli( q[5], q[3], q[8] );
		Toffoli( q[0], anc[0], anc[1] );
		Toffoli( q[0], q[5], q[3] );
		CNOT( q[8], q[3] );
		Toffoli( q[4], anc[0], q[5] );
		CNOT( q[4], q[0] );
		CNOT( q[7], q[6] );
		CNOT( q[4], q[3] );
		CNOT( q[4], anc[0] );
		CNOT( q[7], q[2] );
		CNOT( q[6], q[5] );
		CNOT( q[4], q[7] );
		Toffoli( q[8], q[5], q[1] );
		Toffoli( q[8], anc[0], q[2] );
		CNOT( anc[1], anc[0] );
		Toffoli( q[7], anc[1], q[1] );
		Toffoli( q[6], q[4], anc[0] );
	}
	Restore {
		CNOT( anc[1], res[0] );
		CNOT( q[6], res[1] );
		CNOT( q[0], res[2] );
		CNOT( q[2], res[3] );
		CNOT( q[1], res[4] );
	}
	Unrecompute {
		Toffoli( q[6], q[4], anc[0] );
		Toffoli( q[7], anc[1], q[1] );
		CNOT( anc[1], anc[0] );
		Toffoli( q[8], anc[0], q[2] );
		Toffoli( q[8], q[5], q[1] );
		CNOT( q[4], q[7] );
		CNOT( q[6], q[5] );
		CNOT( q[7], q[2] );
		CNOT( q[4], anc[0] );
		CNOT( q[4], q[3] );
		CNOT( q[7], q[6] );
		CNOT( q[4], q[0] );
		Toffoli( q[4], anc[0], q[5] );
		CNOT( q[8], q[3] );
		Toffoli( q[0], q[5], q[3] );
		Toffoli( q[0], anc[0], anc[1] );
		Toffoli( q[5], q[3], q[8] );
		CNOT( q[1], q[8] );
		CNOT( anc[0], anc[1] );
		Toffoli( q[6], anc[1], anc[0] );
		Toffoli( q[2], anc[0], anc[1] );
		CNOT( q[3], q[1] );
		Toffoli( q[2], anc[0], anc[1] );
		CNOT( q[3], q[5] );
		Toffoli( q[8], q[3], q[4] );
		Toffoli( q[5], q[7], q[4] );
		CNOT( q[2], anc[0] );
		CNOT( q[6], anc[1] );
		Toffoli( q[3], q[0], q[8] );
		CNOT( q[4], anc[0] );
		CNOT( q[5], q[2] );
		CNOT( q[2], q[7] );
		Toffoli( q[8], q[7], q[4] );
		CNOT( q[4], q[0] );
		CNOT( anc[1], q[1] );
		Toffoli( q[2], anc[0], q[5] );
		Toffoli( q[0], q[3], anc[0] );
		Toffoli( q[5], q[0], q[3] );
		Toffoli( q[8], anc[0], q[6] );
		Toffoli( q[1], q[0], q[4] );
		CNOT( q[1], q[7] );
		CNOT( anc[1], anc[0] );
		Toffoli( q[3], q[5], q[0] );
		Toffoli( anc[1], q[7], q[1] );
		Toffoli( q[5], q[6], q[2] );
		Toffoli( q[1], q[3], q[7] );
		Toffoli( anc[0], q[5], q[4] );
		CNOT( q[5], q[0] );
		CNOT( q[8], q[7] );
		CNOT( q[6], q[5] );
		CNOT( q[6], q[8] );
		CNOT( q[0], q[3] );
		CNOT( q[5], q[6] );
		CNOT( q[4], q[7] );
		Toffoli( q[0], q[8], q[2] );
		Toffoli( anc[0], q[0], q[2] );
		CNOT( q[6], q[0] );
		Toffoli( q[6], q[0], q[4] );
	} Refree(anc, 2) {}
}
// Function 18 with degree 0
// nq: 14, na: 4, ng: 45
void func18(qbit **q, int n) {
printf("func18\n");
fflush(stderr);
	qbit *anc[4]; // ancilla
	qbit *nb[83]; // interacting bits
	qbit *res[4];
	nb[0] = q[9];
	nb[1] = q[0];
	nb[2] = q[3];
	nb[3] = q[11];
	nb[4] = q[10];
	nb[5] = q[7];
	nb[6] = q[5];
	nb[7] = q[8];
	nb[8] = q[5];
	nb[9] = q[4];
	nb[10] = q[11];
	nb[11] = q[5];
	nb[12] = q[9];
	nb[13] = q[7];
	nb[14] = q[2];
	nb[15] = q[3];
	nb[16] = q[6];
	nb[17] = q[6];
	nb[18] = q[0];
	nb[19] = q[1];
	nb[20] = q[5];
	nb[21] = q[1];
	nb[22] = q[1];
	nb[23] = q[11];
	nb[24] = q[4];
	nb[25] = q[2];
	nb[26] = q[3];
	nb[27] = q[5];
	nb[28] = q[10];
	nb[29] = q[10];
	nb[30] = q[1];
	nb[31] = q[9];
	nb[32] = q[3];
	nb[33] = q[5];
	nb[34] = q[9];
	nb[35] = q[8];
	nb[36] = q[5];
	nb[37] = q[12];
	nb[38] = q[13];
	nb[39] = q[9];
	nb[40] = q[6];
	nb[41] = q[9];
	nb[42] = q[5];
	nb[43] = q[9];
	nb[44] = q[11];
	nb[45] = q[5];
	nb[46] = q[13];
	nb[47] = q[1];
	nb[48] = q[10];
	nb[49] = q[12];
	nb[50] = q[9];
	nb[51] = q[12];
	nb[52] = q[4];
	nb[53] = q[11];
	nb[54] = q[6];
	nb[55] = q[4];
	nb[56] = q[1];
	nb[57] = q[5];
	nb[58] = q[2];
	nb[59] = q[0];
	nb[60] = q[12];
	nb[61] = q[11];
	nb[62] = q[10];
	nb[63] = q[12];
	nb[64] = q[10];
	nb[65] = q[1];
	nb[66] = q[8];
	nb[67] = q[13];
	nb[68] = q[4];
	nb[69] = q[5];
	nb[70] = q[7];
	nb[71] = q[8];
	nb[72] = q[13];
	nb[73] = q[3];
	nb[74] = q[10];
	nb[75] = q[6];
	nb[76] = q[0];
	nb[77] = q[11];
	nb[78] = q[8];
	nb[79] = q[0];
	nb[80] = q[7];
	nb[81] = q[2];
	nb[82] = q[4];
	res[0] = q[11];
	res[1] = q[2];
	res[2] = q[1];
	res[3] = q[4];
	// Leaf function
	Compute (0, 4, 94, 49, 0, 4, 0) {
		acquire(4, anc, 83, nb);
		Toffoli( q[9], q[0], anc[0] );
		CNOT( anc[2], anc[1] );
		Toffoli( q[3], q[11], q[10] );
		CNOT( q[7], q[5] );
		CNOT( q[8], q[5] );
		Toffoli( q[4], anc[3], q[11] );
		CNOT( anc[2], q[5] );
		CNOT( q[9], q[7] );
		Toffoli( q[2], q[3], q[6] );
		CNOT( q[6], anc[0] );
		Toffoli( anc[1], q[0], q[1] );
		Toffoli( anc[1], q[5], anc[0] );
		Toffoli( q[1], anc[0], anc[2] );
		CNOT( anc[0], anc[3] );
		CNOT( q[1], q[11] );
		CNOT( q[4], q[2] );
		Toffoli( q[3], q[5], q[10] );
		CNOT( q[10], anc[1] );
		CNOT( anc[1], q[1] );
		Toffoli( anc[1], q[9], q[3] );
		Toffoli( q[5], q[9], q[8] );
		Toffoli( q[5], q[12], q[13] );
		CNOT( q[9], anc[0] );
		Toffoli( q[6], q[9], q[5] );
		Toffoli( q[9], q[11], anc[1] );
		Toffoli( anc[1], q[5], q[13] );
		Toffoli( q[1], q[10], q[12] );
		CNOT( q[9], q[12] );
		CNOT( q[4], anc[0] );
		CNOT( q[11], q[6] );
		Toffoli( anc[2], q[4], q[1] );
		CNOT( q[5], q[2] );
		Toffoli( q[0], q[12], anc[0] );
		CNOT( q[11], q[10] );
		Toffoli( anc[2], q[12], anc[0] );
		CNOT( q[10], q[1] );
		CNOT( q[8], q[13] );
		CNOT( anc[3], q[4] );
		Toffoli( q[5], q[7], q[8] );
		CNOT( q[13], q[3] );
		CNOT( q[10], anc[3] );
		Toffoli( q[6], anc[1], q[0] );
		Toffoli( q[11], anc[3], q[8] );
		CNOT( q[0], q[7] );
		CNOT( q[2], q[4] );
	}
	Store {
		CNOT( q[4], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( anc[3], res[2] );
		CNOT( q[3], res[3] );
	}
	Uncompute(res, 0, anc, 4, 94, 49){
		CNOT( q[2], q[4] );
		CNOT( q[0], q[7] );
		Toffoli( q[11], anc[3], q[8] );
		Toffoli( q[6], anc[1], q[0] );
		CNOT( q[10], anc[3] );
		CNOT( q[13], q[3] );
		Toffoli( q[5], q[7], q[8] );
		CNOT( anc[3], q[4] );
		CNOT( q[8], q[13] );
		CNOT( q[10], q[1] );
		Toffoli( anc[2], q[12], anc[0] );
		CNOT( q[11], q[10] );
		Toffoli( q[0], q[12], anc[0] );
		CNOT( q[5], q[2] );
		Toffoli( anc[2], q[4], q[1] );
		CNOT( q[11], q[6] );
		CNOT( q[4], anc[0] );
		CNOT( q[9], q[12] );
		Toffoli( q[1], q[10], q[12] );
		Toffoli( anc[1], q[5], q[13] );
		Toffoli( q[9], q[11], anc[1] );
		Toffoli( q[6], q[9], q[5] );
		CNOT( q[9], anc[0] );
		Toffoli( q[5], q[12], q[13] );
		Toffoli( q[5], q[9], q[8] );
		Toffoli( anc[1], q[9], q[3] );
		CNOT( anc[1], q[1] );
		CNOT( q[10], anc[1] );
		Toffoli( q[3], q[5], q[10] );
		CNOT( q[4], q[2] );
		CNOT( q[1], q[11] );
		CNOT( anc[0], anc[3] );
		Toffoli( q[1], anc[0], anc[2] );
		Toffoli( anc[1], q[5], anc[0] );
		Toffoli( anc[1], q[0], q[1] );
		CNOT( q[6], anc[0] );
		Toffoli( q[2], q[3], q[6] );
		CNOT( q[9], q[7] );
		CNOT( anc[2], q[5] );
		Toffoli( q[4], anc[3], q[11] );
		CNOT( q[8], q[5] );
		CNOT( q[7], q[5] );
		Toffoli( q[3], q[11], q[10] );
		CNOT( anc[2], anc[1] );
		Toffoli( q[9], q[0], anc[0] );
	} Free(anc, 4) {}
}
// Function 18 with degree 0
// nq: 14, na: 4, ng: 45
void func18R(qbit **q, int n) {
printf("func18R\n");
fflush(stderr);
	qbit *anc[4]; // ancilla
	qbit *nb[83]; // interacting bits
	qbit *res[4];
	nb[0] = q[9];
	nb[1] = q[0];
	nb[2] = q[3];
	nb[3] = q[11];
	nb[4] = q[10];
	nb[5] = q[7];
	nb[6] = q[5];
	nb[7] = q[8];
	nb[8] = q[5];
	nb[9] = q[4];
	nb[10] = q[11];
	nb[11] = q[5];
	nb[12] = q[9];
	nb[13] = q[7];
	nb[14] = q[2];
	nb[15] = q[3];
	nb[16] = q[6];
	nb[17] = q[6];
	nb[18] = q[0];
	nb[19] = q[1];
	nb[20] = q[5];
	nb[21] = q[1];
	nb[22] = q[1];
	nb[23] = q[11];
	nb[24] = q[4];
	nb[25] = q[2];
	nb[26] = q[3];
	nb[27] = q[5];
	nb[28] = q[10];
	nb[29] = q[10];
	nb[30] = q[1];
	nb[31] = q[9];
	nb[32] = q[3];
	nb[33] = q[5];
	nb[34] = q[9];
	nb[35] = q[8];
	nb[36] = q[5];
	nb[37] = q[12];
	nb[38] = q[13];
	nb[39] = q[9];
	nb[40] = q[6];
	nb[41] = q[9];
	nb[42] = q[5];
	nb[43] = q[9];
	nb[44] = q[11];
	nb[45] = q[5];
	nb[46] = q[13];
	nb[47] = q[1];
	nb[48] = q[10];
	nb[49] = q[12];
	nb[50] = q[9];
	nb[51] = q[12];
	nb[52] = q[4];
	nb[53] = q[11];
	nb[54] = q[6];
	nb[55] = q[4];
	nb[56] = q[1];
	nb[57] = q[5];
	nb[58] = q[2];
	nb[59] = q[0];
	nb[60] = q[12];
	nb[61] = q[11];
	nb[62] = q[10];
	nb[63] = q[12];
	nb[64] = q[10];
	nb[65] = q[1];
	nb[66] = q[8];
	nb[67] = q[13];
	nb[68] = q[4];
	nb[69] = q[5];
	nb[70] = q[7];
	nb[71] = q[8];
	nb[72] = q[13];
	nb[73] = q[3];
	nb[74] = q[10];
	nb[75] = q[6];
	nb[76] = q[0];
	nb[77] = q[11];
	nb[78] = q[8];
	nb[79] = q[0];
	nb[80] = q[7];
	nb[81] = q[2];
	nb[82] = q[4];
	res[0] = q[11];
	res[1] = q[2];
	res[2] = q[1];
	res[3] = q[4];
	// Leaf function
	_computeModule(0, 4, 94, 49, 0, 4, 0);
	acquire(4, anc, 83, nb);
	Recompute (res, 0, anc, 4, 94, 49){
		CNOT( q[2], q[4] );
		CNOT( q[0], q[7] );
		Toffoli( q[11], anc[3], q[8] );
		Toffoli( q[6], anc[1], q[0] );
		CNOT( q[10], anc[3] );
		CNOT( q[13], q[3] );
		Toffoli( q[5], q[7], q[8] );
		CNOT( anc[3], q[4] );
		CNOT( q[8], q[13] );
		CNOT( q[10], q[1] );
		Toffoli( anc[2], q[12], anc[0] );
		CNOT( q[11], q[10] );
		Toffoli( q[0], q[12], anc[0] );
		CNOT( q[5], q[2] );
		Toffoli( anc[2], q[4], q[1] );
		CNOT( q[11], q[6] );
		CNOT( q[4], anc[0] );
		CNOT( q[9], q[12] );
		Toffoli( q[1], q[10], q[12] );
		Toffoli( anc[1], q[5], q[13] );
		Toffoli( q[9], q[11], anc[1] );
		Toffoli( q[6], q[9], q[5] );
		CNOT( q[9], anc[0] );
		Toffoli( q[5], q[12], q[13] );
		Toffoli( q[5], q[9], q[8] );
		Toffoli( anc[1], q[9], q[3] );
		CNOT( anc[1], q[1] );
		CNOT( q[10], anc[1] );
		Toffoli( q[3], q[5], q[10] );
		CNOT( q[4], q[2] );
		CNOT( q[1], q[11] );
		CNOT( anc[0], anc[3] );
		Toffoli( q[1], anc[0], anc[2] );
		Toffoli( anc[1], q[5], anc[0] );
		Toffoli( anc[1], q[0], q[1] );
		CNOT( q[6], anc[0] );
		Toffoli( q[2], q[3], q[6] );
		CNOT( q[9], q[7] );
		CNOT( anc[2], q[5] );
		Toffoli( q[4], anc[3], q[11] );
		CNOT( q[8], q[5] );
		CNOT( q[7], q[5] );
		Toffoli( q[3], q[11], q[10] );
		CNOT( anc[2], anc[1] );
		Toffoli( q[9], q[0], anc[0] );
	}
	Restore {
		CNOT( q[4], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( anc[3], res[2] );
		CNOT( q[3], res[3] );
	}
	Unrecompute {
		Toffoli( q[9], q[0], anc[0] );
		CNOT( anc[2], anc[1] );
		Toffoli( q[3], q[11], q[10] );
		CNOT( q[7], q[5] );
		CNOT( q[8], q[5] );
		Toffoli( q[4], anc[3], q[11] );
		CNOT( anc[2], q[5] );
		CNOT( q[9], q[7] );
		Toffoli( q[2], q[3], q[6] );
		CNOT( q[6], anc[0] );
		Toffoli( anc[1], q[0], q[1] );
		Toffoli( anc[1], q[5], anc[0] );
		Toffoli( q[1], anc[0], anc[2] );
		CNOT( anc[0], anc[3] );
		CNOT( q[1], q[11] );
		CNOT( q[4], q[2] );
		Toffoli( q[3], q[5], q[10] );
		CNOT( q[10], anc[1] );
		CNOT( anc[1], q[1] );
		Toffoli( anc[1], q[9], q[3] );
		Toffoli( q[5], q[9], q[8] );
		Toffoli( q[5], q[12], q[13] );
		CNOT( q[9], anc[0] );
		Toffoli( q[6], q[9], q[5] );
		Toffoli( q[9], q[11], anc[1] );
		Toffoli( anc[1], q[5], q[13] );
		Toffoli( q[1], q[10], q[12] );
		CNOT( q[9], q[12] );
		CNOT( q[4], anc[0] );
		CNOT( q[11], q[6] );
		Toffoli( anc[2], q[4], q[1] );
		CNOT( q[5], q[2] );
		Toffoli( q[0], q[12], anc[0] );
		CNOT( q[11], q[10] );
		Toffoli( anc[2], q[12], anc[0] );
		CNOT( q[10], q[1] );
		CNOT( q[8], q[13] );
		CNOT( anc[3], q[4] );
		Toffoli( q[5], q[7], q[8] );
		CNOT( q[13], q[3] );
		CNOT( q[10], anc[3] );
		Toffoli( q[6], anc[1], q[0] );
		Toffoli( q[11], anc[3], q[8] );
		CNOT( q[0], q[7] );
		CNOT( q[2], q[4] );
	} Refree(anc, 4) {}
}
// Function 17 with degree 0
// nq: 7, na: 14, ng: 15
void func17(qbit **q, int n) {
printf("func17\n");
fflush(stderr);
	qbit *anc[14]; // ancilla
	qbit *nb[12]; // interacting bits
	qbit *res[3];
	nb[0] = q[2];
	nb[1] = q[2];
	nb[2] = q[3];
	nb[3] = q[4];
	nb[4] = q[0];
	nb[5] = q[1];
	nb[6] = q[5];
	nb[7] = q[3];
	nb[8] = q[2];
	nb[9] = q[1];
	nb[10] = q[2];
	nb[11] = q[2];
	res[0] = q[0];
	res[1] = q[4];
	res[2] = q[2];
	// Leaf function
	Compute (0, 14, 33, 18, 0, 4, 0) {
		acquire(14, anc, 12, nb);
		Toffoli( anc[3], q[2], anc[13] );
		Toffoli( anc[4], anc[9], anc[10] );
		CNOT( q[2], anc[0] );
		Toffoli( anc[7], anc[12], q[3] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[3], anc[5], anc[10] );
		Toffoli( anc[4], anc[11], q[4] );
		CNOT( anc[9], anc[3] );
		CNOT( anc[10], q[0] );
		CNOT( q[1], anc[6] );
		CNOT( anc[3], q[5] );
		Toffoli( anc[3], q[3], anc[5] );
		CNOT( q[2], anc[10] );
		CNOT( q[1], q[2] );
		Toffoli( q[2], anc[9], anc[3] );
	}
	Store {
		CNOT( anc[11], res[0] );
		CNOT( q[6], res[1] );
		CNOT( anc[10], res[2] );
	}
	Uncompute(res, 0, anc, 14, 33, 18){
		Toffoli( q[2], anc[9], anc[3] );
		CNOT( q[1], q[2] );
		CNOT( q[2], anc[10] );
		Toffoli( anc[3], q[3], anc[5] );
		CNOT( anc[3], q[5] );
		CNOT( q[1], anc[6] );
		CNOT( anc[10], q[0] );
		CNOT( anc[9], anc[3] );
		Toffoli( anc[4], anc[11], q[4] );
		Toffoli( anc[3], anc[5], anc[10] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[7], anc[12], q[3] );
		CNOT( q[2], anc[0] );
		Toffoli( anc[4], anc[9], anc[10] );
		Toffoli( anc[3], q[2], anc[13] );
	} Free(anc, 14) {}
}
// Function 17 with degree 0
// nq: 7, na: 14, ng: 15
void func17R(qbit **q, int n) {
printf("func17R\n");
fflush(stderr);
	qbit *anc[14]; // ancilla
	qbit *nb[12]; // interacting bits
	qbit *res[3];
	nb[0] = q[2];
	nb[1] = q[2];
	nb[2] = q[3];
	nb[3] = q[4];
	nb[4] = q[0];
	nb[5] = q[1];
	nb[6] = q[5];
	nb[7] = q[3];
	nb[8] = q[2];
	nb[9] = q[1];
	nb[10] = q[2];
	nb[11] = q[2];
	res[0] = q[0];
	res[1] = q[4];
	res[2] = q[2];
	// Leaf function
	_computeModule(0, 14, 33, 18, 0, 4, 0);
	acquire(14, anc, 12, nb);
	Recompute (res, 0, anc, 14, 33, 18){
		Toffoli( q[2], anc[9], anc[3] );
		CNOT( q[1], q[2] );
		CNOT( q[2], anc[10] );
		Toffoli( anc[3], q[3], anc[5] );
		CNOT( anc[3], q[5] );
		CNOT( q[1], anc[6] );
		CNOT( anc[10], q[0] );
		CNOT( anc[9], anc[3] );
		Toffoli( anc[4], anc[11], q[4] );
		Toffoli( anc[3], anc[5], anc[10] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[7], anc[12], q[3] );
		CNOT( q[2], anc[0] );
		Toffoli( anc[4], anc[9], anc[10] );
		Toffoli( anc[3], q[2], anc[13] );
	}
	Restore {
		CNOT( anc[11], res[0] );
		CNOT( q[6], res[1] );
		CNOT( anc[10], res[2] );
	}
	Unrecompute {
		Toffoli( anc[3], q[2], anc[13] );
		Toffoli( anc[4], anc[9], anc[10] );
		CNOT( q[2], anc[0] );
		Toffoli( anc[7], anc[12], q[3] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[3], anc[5], anc[10] );
		Toffoli( anc[4], anc[11], q[4] );
		CNOT( anc[9], anc[3] );
		CNOT( anc[10], q[0] );
		CNOT( q[1], anc[6] );
		CNOT( anc[3], q[5] );
		Toffoli( anc[3], q[3], anc[5] );
		CNOT( q[2], anc[10] );
		CNOT( q[1], q[2] );
		Toffoli( q[2], anc[9], anc[3] );
	} Refree(anc, 14) {}
}
// Function 16 with degree 0
// nq: 9, na: 5, ng: 31
void func16(qbit **q, int n) {
printf("func16\n");
fflush(stderr);
	qbit *anc[5]; // ancilla
	qbit *nb[53]; // interacting bits
	qbit *res[6];
	nb[0] = q[0];
	nb[1] = q[6];
	nb[2] = q[7];
	nb[3] = q[7];
	nb[4] = q[5];
	nb[5] = q[8];
	nb[6] = q[4];
	nb[7] = q[8];
	nb[8] = q[4];
	nb[9] = q[2];
	nb[10] = q[0];
	nb[11] = q[6];
	nb[12] = q[1];
	nb[13] = q[7];
	nb[14] = q[0];
	nb[15] = q[4];
	nb[16] = q[4];
	nb[17] = q[2];
	nb[18] = q[1];
	nb[19] = q[3];
	nb[20] = q[0];
	nb[21] = q[1];
	nb[22] = q[1];
	nb[23] = q[3];
	nb[24] = q[0];
	nb[25] = q[6];
	nb[26] = q[8];
	nb[27] = q[6];
	nb[28] = q[6];
	nb[29] = q[3];
	nb[30] = q[7];
	nb[31] = q[5];
	nb[32] = q[8];
	nb[33] = q[5];
	nb[34] = q[1];
	nb[35] = q[6];
	nb[36] = q[8];
	nb[37] = q[2];
	nb[38] = q[1];
	nb[39] = q[2];
	nb[40] = q[3];
	nb[41] = q[7];
	nb[42] = q[5];
	nb[43] = q[4];
	nb[44] = q[7];
	nb[45] = q[6];
	nb[46] = q[5];
	nb[47] = q[0];
	nb[48] = q[1];
	nb[49] = q[4];
	nb[50] = q[1];
	nb[51] = q[2];
	nb[52] = q[6];
	res[0] = q[1];
	res[1] = q[3];
	res[2] = q[0];
	res[3] = q[2];
	res[4] = q[5];
	res[5] = q[4];
	// Leaf function
	Compute (0, 5, 68, 37, 0, 4, 0) {
		acquire(5, anc, 53, nb);
		CNOT( anc[0], q[0] );
		Toffoli( anc[2], q[6], q[7] );
		Toffoli( anc[2], q[7], q[5] );
		Toffoli( anc[0], q[8], anc[4] );
		Toffoli( q[4], anc[4], q[8] );
		Toffoli( anc[2], q[4], q[2] );
		CNOT( q[0], anc[0] );
		Toffoli( q[6], anc[1], q[1] );
		Toffoli( q[7], anc[4], q[0] );
		CNOT( q[4], anc[3] );
		Toffoli( q[4], anc[3], q[2] );
		Toffoli( q[1], anc[2], anc[0] );
		Toffoli( q[3], q[0], q[1] );
		CNOT( q[1], anc[1] );
		Toffoli( q[3], anc[3], q[0] );
		CNOT( anc[2], q[6] );
		CNOT( anc[0], q[8] );
		Toffoli( q[6], anc[3], anc[1] );
		CNOT( q[6], q[3] );
		CNOT( q[7], q[5] );
		Toffoli( q[8], q[5], anc[2] );
		CNOT( q[1], q[6] );
		CNOT( q[8], q[2] );
		Toffoli( q[1], q[2], anc[0] );
		Toffoli( q[3], q[7], q[5] );
		CNOT( anc[3], q[4] );
		Toffoli( q[7], q[6], anc[3] );
		CNOT( q[5], q[0] );
		CNOT( q[1], q[4] );
		CNOT( q[1], anc[1] );
		Toffoli( q[2], q[6], anc[2] );
	}
	Store {
		CNOT( anc[4], res[0] );
		CNOT( q[7], res[1] );
		CNOT( q[5], res[2] );
		CNOT( anc[0], res[3] );
		CNOT( q[3], res[4] );
		CNOT( q[8], res[5] );
	}
	Uncompute(res, 0, anc, 5, 68, 37){
		Toffoli( q[2], q[6], anc[2] );
		CNOT( q[1], anc[1] );
		CNOT( q[1], q[4] );
		CNOT( q[5], q[0] );
		Toffoli( q[7], q[6], anc[3] );
		CNOT( anc[3], q[4] );
		Toffoli( q[3], q[7], q[5] );
		Toffoli( q[1], q[2], anc[0] );
		CNOT( q[8], q[2] );
		CNOT( q[1], q[6] );
		Toffoli( q[8], q[5], anc[2] );
		CNOT( q[7], q[5] );
		CNOT( q[6], q[3] );
		Toffoli( q[6], anc[3], anc[1] );
		CNOT( anc[0], q[8] );
		CNOT( anc[2], q[6] );
		Toffoli( q[3], anc[3], q[0] );
		CNOT( q[1], anc[1] );
		Toffoli( q[3], q[0], q[1] );
		Toffoli( q[1], anc[2], anc[0] );
		Toffoli( q[4], anc[3], q[2] );
		CNOT( q[4], anc[3] );
		Toffoli( q[7], anc[4], q[0] );
		Toffoli( q[6], anc[1], q[1] );
		CNOT( q[0], anc[0] );
		Toffoli( anc[2], q[4], q[2] );
		Toffoli( q[4], anc[4], q[8] );
		Toffoli( anc[0], q[8], anc[4] );
		Toffoli( anc[2], q[7], q[5] );
		Toffoli( anc[2], q[6], q[7] );
		CNOT( anc[0], q[0] );
	} Free(anc, 5) {}
}
// Function 16 with degree 0
// nq: 9, na: 5, ng: 31
void func16R(qbit **q, int n) {
printf("func16R\n");
fflush(stderr);
	qbit *anc[5]; // ancilla
	qbit *nb[53]; // interacting bits
	qbit *res[6];
	nb[0] = q[0];
	nb[1] = q[6];
	nb[2] = q[7];
	nb[3] = q[7];
	nb[4] = q[5];
	nb[5] = q[8];
	nb[6] = q[4];
	nb[7] = q[8];
	nb[8] = q[4];
	nb[9] = q[2];
	nb[10] = q[0];
	nb[11] = q[6];
	nb[12] = q[1];
	nb[13] = q[7];
	nb[14] = q[0];
	nb[15] = q[4];
	nb[16] = q[4];
	nb[17] = q[2];
	nb[18] = q[1];
	nb[19] = q[3];
	nb[20] = q[0];
	nb[21] = q[1];
	nb[22] = q[1];
	nb[23] = q[3];
	nb[24] = q[0];
	nb[25] = q[6];
	nb[26] = q[8];
	nb[27] = q[6];
	nb[28] = q[6];
	nb[29] = q[3];
	nb[30] = q[7];
	nb[31] = q[5];
	nb[32] = q[8];
	nb[33] = q[5];
	nb[34] = q[1];
	nb[35] = q[6];
	nb[36] = q[8];
	nb[37] = q[2];
	nb[38] = q[1];
	nb[39] = q[2];
	nb[40] = q[3];
	nb[41] = q[7];
	nb[42] = q[5];
	nb[43] = q[4];
	nb[44] = q[7];
	nb[45] = q[6];
	nb[46] = q[5];
	nb[47] = q[0];
	nb[48] = q[1];
	nb[49] = q[4];
	nb[50] = q[1];
	nb[51] = q[2];
	nb[52] = q[6];
	res[0] = q[1];
	res[1] = q[3];
	res[2] = q[0];
	res[3] = q[2];
	res[4] = q[5];
	res[5] = q[4];
	// Leaf function
	_computeModule(0, 5, 68, 37, 0, 4, 0);
	acquire(5, anc, 53, nb);
	Recompute (res, 0, anc, 5, 68, 37){
		Toffoli( q[2], q[6], anc[2] );
		CNOT( q[1], anc[1] );
		CNOT( q[1], q[4] );
		CNOT( q[5], q[0] );
		Toffoli( q[7], q[6], anc[3] );
		CNOT( anc[3], q[4] );
		Toffoli( q[3], q[7], q[5] );
		Toffoli( q[1], q[2], anc[0] );
		CNOT( q[8], q[2] );
		CNOT( q[1], q[6] );
		Toffoli( q[8], q[5], anc[2] );
		CNOT( q[7], q[5] );
		CNOT( q[6], q[3] );
		Toffoli( q[6], anc[3], anc[1] );
		CNOT( anc[0], q[8] );
		CNOT( anc[2], q[6] );
		Toffoli( q[3], anc[3], q[0] );
		CNOT( q[1], anc[1] );
		Toffoli( q[3], q[0], q[1] );
		Toffoli( q[1], anc[2], anc[0] );
		Toffoli( q[4], anc[3], q[2] );
		CNOT( q[4], anc[3] );
		Toffoli( q[7], anc[4], q[0] );
		Toffoli( q[6], anc[1], q[1] );
		CNOT( q[0], anc[0] );
		Toffoli( anc[2], q[4], q[2] );
		Toffoli( q[4], anc[4], q[8] );
		Toffoli( anc[0], q[8], anc[4] );
		Toffoli( anc[2], q[7], q[5] );
		Toffoli( anc[2], q[6], q[7] );
		CNOT( anc[0], q[0] );
	}
	Restore {
		CNOT( anc[4], res[0] );
		CNOT( q[7], res[1] );
		CNOT( q[5], res[2] );
		CNOT( anc[0], res[3] );
		CNOT( q[3], res[4] );
		CNOT( q[8], res[5] );
	}
	Unrecompute {
		CNOT( anc[0], q[0] );
		Toffoli( anc[2], q[6], q[7] );
		Toffoli( anc[2], q[7], q[5] );
		Toffoli( anc[0], q[8], anc[4] );
		Toffoli( q[4], anc[4], q[8] );
		Toffoli( anc[2], q[4], q[2] );
		CNOT( q[0], anc[0] );
		Toffoli( q[6], anc[1], q[1] );
		Toffoli( q[7], anc[4], q[0] );
		CNOT( q[4], anc[3] );
		Toffoli( q[4], anc[3], q[2] );
		Toffoli( q[1], anc[2], anc[0] );
		Toffoli( q[3], q[0], q[1] );
		CNOT( q[1], anc[1] );
		Toffoli( q[3], anc[3], q[0] );
		CNOT( anc[2], q[6] );
		CNOT( anc[0], q[8] );
		Toffoli( q[6], anc[3], anc[1] );
		CNOT( q[6], q[3] );
		CNOT( q[7], q[5] );
		Toffoli( q[8], q[5], anc[2] );
		CNOT( q[1], q[6] );
		CNOT( q[8], q[2] );
		Toffoli( q[1], q[2], anc[0] );
		Toffoli( q[3], q[7], q[5] );
		CNOT( anc[3], q[4] );
		Toffoli( q[7], q[6], anc[3] );
		CNOT( q[5], q[0] );
		CNOT( q[1], q[4] );
		CNOT( q[1], anc[1] );
		Toffoli( q[2], q[6], anc[2] );
	} Refree(anc, 5) {}
}
// Function 15 with degree 2
// nq: 4, na: 15, ng: 40
void func15(qbit **q, int n) {
printf("func15\n");
fflush(stderr);
	qbit *anc[15]; // ancilla
	qbit *nb[17]; // interacting bits
	qbit *res[2];
	qbit *nq0[14];
	qbit *nq1[10];
	nb[0] = q[1];
	nb[1] = q[2];
	nb[2] = q[1];
	nb[3] = q[2];
	nb[4] = q[1];
	nb[5] = q[1];
	nb[6] = q[2];
	nb[7] = q[2];
	nb[8] = q[3];
	nb[9] = q[0];
	nb[10] = q[2];
	nb[11] = q[2];
	nb[12] = q[1];
	nb[13] = q[2];
	nb[14] = q[2];
	nb[15] = q[1];
	nb[16] = q[1];
	res[0] = q[1];
	res[1] = q[3];
	// Non-leaf function
	nq0[0] = anc[12];
	nq0[1] = q[1];
	nq0[2] = anc[14];
	nq0[3] = anc[9];
	nq0[4] = anc[11];
	nq0[5] = q[2];
	nq0[6] = q[0];
	nq0[7] = anc[3];
	nq0[8] = anc[0];
	nq0[9] = anc[8];
	nq0[10] = q[3];
	nq0[11] = anc[10];
	nq0[12] = anc[7];
	nq0[13] = anc[6];
	nq1[0] = anc[12];
	nq1[1] = anc[3];
	nq1[2] = anc[8];
	nq1[3] = anc[11];
	nq1[4] = anc[4];
	nq1[5] = anc[2];
	nq1[6] = q[0];
	nq1[7] = anc[13];
	nq1[8] = anc[0];
	nq1[9] = q[1];
	Compute (0, 15, 82, 42, 2, 4, 0){
		acquire(15, anc, 17, nb);
		CNOT( q[2], anc[14] );
		CNOT( anc[13], anc[6] );
		Toffoli( anc[14], q[1], anc[3] );
		Toffoli( q[1], anc[13], anc[8] );
		Toffoli( anc[2], anc[6], anc[3] );
		Toffoli( anc[12], anc[11], anc[7] );
		Toffoli( anc[8], q[1], anc[0] );
		Toffoli( anc[5], q[2], anc[8] );
		CNOT( q[2], anc[7] );
		Toffoli( anc[0], anc[14], anc[1] );
		Toffoli( anc[1], anc[7], anc[0] );
		CNOT( anc[12], anc[6] );
		func47(nq0, 14);
		CNOT( anc[14], anc[8] );
		Toffoli( anc[4], anc[8], q[2] );
		Toffoli( anc[13], anc[5], anc[11] );
		CNOT( anc[12], anc[14] );
		CNOT( anc[9], anc[6] );
		CNOT( q[2], anc[7] );
		CNOT( anc[12], q[1] );
		Toffoli( anc[4], anc[13], anc[6] );
		CNOT( anc[3], anc[4] );
		Toffoli( anc[9], anc[4], anc[6] );
		CNOT( anc[8], q[2] );
		CNOT( anc[3], anc[14] );
		Toffoli( anc[5], q[1], anc[6] );
		Toffoli( anc[12], anc[8], anc[6] );
		Toffoli( anc[5], anc[2], anc[4] );
		CNOT( anc[3], anc[11] );
		func48(nq1, 10);
		Toffoli( anc[0], anc[11], anc[2] );
		Toffoli( anc[4], q[2], anc[11] );
		CNOT( anc[8], anc[12] );
		CNOT( anc[7], anc[1] );
		CNOT( anc[5], q[1] );
		Toffoli( anc[14], anc[9], anc[0] );
		CNOT( anc[11], anc[6] );
		CNOT( anc[8], anc[7] );
		Toffoli( anc[0], anc[2], anc[7] );
		CNOT( anc[14], q[1] );
		Toffoli( q[2], q[3], q[0] );
		CNOT( anc[14], anc[7] );
	}
	Store {
		CNOT( anc[5], res[0] );
		CNOT( anc[8], res[1] );
	}
	Uncompute(res, 0, anc, 15, 82, 42){
		CNOT( anc[14], anc[7] );
		Toffoli( q[2], q[3], q[0] );
		CNOT( anc[14], q[1] );
		Toffoli( anc[0], anc[2], anc[7] );
		CNOT( anc[8], anc[7] );
		CNOT( anc[11], anc[6] );
		Toffoli( anc[14], anc[9], anc[0] );
		CNOT( anc[5], q[1] );
		CNOT( anc[7], anc[1] );
		CNOT( anc[8], anc[12] );
		Toffoli( anc[4], q[2], anc[11] );
		Toffoli( anc[0], anc[11], anc[2] );
		func48R(nq1, 10);
		CNOT( anc[3], anc[11] );
		Toffoli( anc[5], anc[2], anc[4] );
		Toffoli( anc[12], anc[8], anc[6] );
		Toffoli( anc[5], q[1], anc[6] );
		CNOT( anc[3], anc[14] );
		CNOT( anc[8], q[2] );
		Toffoli( anc[9], anc[4], anc[6] );
		CNOT( anc[3], anc[4] );
		Toffoli( anc[4], anc[13], anc[6] );
		CNOT( anc[12], q[1] );
		CNOT( q[2], anc[7] );
		CNOT( anc[9], anc[6] );
		CNOT( anc[12], anc[14] );
		Toffoli( anc[13], anc[5], anc[11] );
		Toffoli( anc[4], anc[8], q[2] );
		CNOT( anc[14], anc[8] );
		func47R(nq0, 14);
		CNOT( anc[12], anc[6] );
		Toffoli( anc[1], anc[7], anc[0] );
		Toffoli( anc[0], anc[14], anc[1] );
		CNOT( q[2], anc[7] );
		Toffoli( anc[5], q[2], anc[8] );
		Toffoli( anc[8], q[1], anc[0] );
		Toffoli( anc[12], anc[11], anc[7] );
		Toffoli( anc[2], anc[6], anc[3] );
		Toffoli( q[1], anc[13], anc[8] );
		Toffoli( anc[14], q[1], anc[3] );
		CNOT( anc[13], anc[6] );
		CNOT( q[2], anc[14] );
	} Free(anc, 15) {}
}
// Function 15 with degree 2
// nq: 4, na: 15, ng: 40
void func15R(qbit **q, int n) {
printf("func15R\n");
fflush(stderr);
	qbit *anc[15]; // ancilla
	qbit *nb[17]; // interacting bits
	qbit *res[2];
	qbit *nq0[14];
	qbit *nq1[10];
	nb[0] = q[1];
	nb[1] = q[2];
	nb[2] = q[1];
	nb[3] = q[2];
	nb[4] = q[1];
	nb[5] = q[1];
	nb[6] = q[2];
	nb[7] = q[2];
	nb[8] = q[3];
	nb[9] = q[0];
	nb[10] = q[2];
	nb[11] = q[2];
	nb[12] = q[1];
	nb[13] = q[2];
	nb[14] = q[2];
	nb[15] = q[1];
	nb[16] = q[1];
	res[0] = q[1];
	res[1] = q[3];
	// Non-leaf function
	nq0[0] = anc[12];
	nq0[1] = q[1];
	nq0[2] = anc[14];
	nq0[3] = anc[9];
	nq0[4] = anc[11];
	nq0[5] = q[2];
	nq0[6] = q[0];
	nq0[7] = anc[3];
	nq0[8] = anc[0];
	nq0[9] = anc[8];
	nq0[10] = q[3];
	nq0[11] = anc[10];
	nq0[12] = anc[7];
	nq0[13] = anc[6];
	nq1[0] = anc[12];
	nq1[1] = anc[3];
	nq1[2] = anc[8];
	nq1[3] = anc[11];
	nq1[4] = anc[4];
	nq1[5] = anc[2];
	nq1[6] = q[0];
	nq1[7] = anc[13];
	nq1[8] = anc[0];
	nq1[9] = q[1];
	_computeModule(0, 15, 82, 42, 2, 4, 0);
	acquire(15, anc, 17, nb);
	Recompute(res, 0, anc, 15, 82, 42){
		CNOT( q[2], anc[14] );
		CNOT( anc[13], anc[6] );
		Toffoli( anc[14], q[1], anc[3] );
		Toffoli( q[1], anc[13], anc[8] );
		Toffoli( anc[2], anc[6], anc[3] );
		Toffoli( anc[12], anc[11], anc[7] );
		Toffoli( anc[8], q[1], anc[0] );
		Toffoli( anc[5], q[2], anc[8] );
		CNOT( q[2], anc[7] );
		Toffoli( anc[0], anc[14], anc[1] );
		Toffoli( anc[1], anc[7], anc[0] );
		CNOT( anc[12], anc[6] );
		func47(nq0, 14);
		CNOT( anc[14], anc[8] );
		Toffoli( anc[4], anc[8], q[2] );
		Toffoli( anc[13], anc[5], anc[11] );
		CNOT( anc[12], anc[14] );
		CNOT( anc[9], anc[6] );
		CNOT( q[2], anc[7] );
		CNOT( anc[12], q[1] );
		Toffoli( anc[4], anc[13], anc[6] );
		CNOT( anc[3], anc[4] );
		Toffoli( anc[9], anc[4], anc[6] );
		CNOT( anc[8], q[2] );
		CNOT( anc[3], anc[14] );
		Toffoli( anc[5], q[1], anc[6] );
		Toffoli( anc[12], anc[8], anc[6] );
		Toffoli( anc[5], anc[2], anc[4] );
		CNOT( anc[3], anc[11] );
		func48(nq1, 10);
		Toffoli( anc[0], anc[11], anc[2] );
		Toffoli( anc[4], q[2], anc[11] );
		CNOT( anc[8], anc[12] );
		CNOT( anc[7], anc[1] );
		CNOT( anc[5], q[1] );
		Toffoli( anc[14], anc[9], anc[0] );
		CNOT( anc[11], anc[6] );
		CNOT( anc[8], anc[7] );
		Toffoli( anc[0], anc[2], anc[7] );
		CNOT( anc[14], q[1] );
		Toffoli( q[2], q[3], q[0] );
		CNOT( anc[14], anc[7] );
	}
	Restore {
		CNOT( anc[5], res[0] );
		CNOT( anc[8], res[1] );
	}
	Unrecompute {
		CNOT( anc[14], anc[7] );
		Toffoli( q[2], q[3], q[0] );
		CNOT( anc[14], q[1] );
		Toffoli( anc[0], anc[2], anc[7] );
		CNOT( anc[8], anc[7] );
		CNOT( anc[11], anc[6] );
		Toffoli( anc[14], anc[9], anc[0] );
		CNOT( anc[5], q[1] );
		CNOT( anc[7], anc[1] );
		CNOT( anc[8], anc[12] );
		Toffoli( anc[4], q[2], anc[11] );
		Toffoli( anc[0], anc[11], anc[2] );
		func48R(nq1, 10);
		CNOT( anc[3], anc[11] );
		Toffoli( anc[5], anc[2], anc[4] );
		Toffoli( anc[12], anc[8], anc[6] );
		Toffoli( anc[5], q[1], anc[6] );
		CNOT( anc[3], anc[14] );
		CNOT( anc[8], q[2] );
		Toffoli( anc[9], anc[4], anc[6] );
		CNOT( anc[3], anc[4] );
		Toffoli( anc[4], anc[13], anc[6] );
		CNOT( anc[12], q[1] );
		CNOT( q[2], anc[7] );
		CNOT( anc[9], anc[6] );
		CNOT( anc[12], anc[14] );
		Toffoli( anc[13], anc[5], anc[11] );
		Toffoli( anc[4], anc[8], q[2] );
		CNOT( anc[14], anc[8] );
		func47R(nq0, 14);
		CNOT( anc[12], anc[6] );
		Toffoli( anc[1], anc[7], anc[0] );
		Toffoli( anc[0], anc[14], anc[1] );
		CNOT( q[2], anc[7] );
		Toffoli( anc[5], q[2], anc[8] );
		Toffoli( anc[8], q[1], anc[0] );
		Toffoli( anc[12], anc[11], anc[7] );
		Toffoli( anc[2], anc[6], anc[3] );
		Toffoli( q[1], anc[13], anc[8] );
		Toffoli( anc[14], q[1], anc[3] );
		CNOT( anc[13], anc[6] );
		CNOT( q[2], anc[14] );
	} Refree(anc, 15) {}
}
// Function 14 with degree 4
// nq: 7, na: 16, ng: 41
void func14(qbit **q, int n) {
printf("func14\n");
fflush(stderr);
	qbit *anc[16]; // ancilla
	qbit *nb[37]; // interacting bits
	qbit *res[3];
	qbit *nq0[10];
	qbit *nq1[3];
	qbit *nq2[7];
	qbit *nq3[13];
	nb[0] = q[1];
	nb[1] = q[6];
	nb[2] = q[3];
	nb[3] = q[1];
	nb[4] = q[0];
	nb[5] = q[5];
	nb[6] = q[4];
	nb[7] = q[3];
	nb[8] = q[5];
	nb[9] = q[0];
	nb[10] = q[4];
	nb[11] = q[4];
	nb[12] = q[1];
	nb[13] = q[5];
	nb[14] = q[2];
	nb[15] = q[2];
	nb[16] = q[6];
	nb[17] = q[6];
	nb[18] = q[2];
	nb[19] = q[1];
	nb[20] = q[2];
	nb[21] = q[4];
	nb[22] = q[6];
	nb[23] = q[4];
	nb[24] = q[1];
	nb[25] = q[1];
	nb[26] = q[6];
	nb[27] = q[3];
	nb[28] = q[5];
	nb[29] = q[6];
	nb[30] = q[2];
	nb[31] = q[6];
	nb[32] = q[5];
	nb[33] = q[1];
	nb[34] = q[0];
	nb[35] = q[2];
	nb[36] = q[4];
	res[0] = q[1];
	res[1] = q[2];
	res[2] = q[6];
	// Non-leaf function
	nq0[0] = q[4];
	nq0[1] = q[0];
	nq0[2] = anc[1];
	nq0[3] = anc[11];
	nq0[4] = anc[15];
	nq0[5] = anc[3];
	nq0[6] = anc[14];
	nq0[7] = q[1];
	nq0[8] = anc[8];
	nq0[9] = q[6];
	nq1[0] = anc[15];
	nq1[1] = anc[0];
	nq1[2] = q[2];
	nq2[0] = anc[6];
	nq2[1] = q[0];
	nq2[2] = anc[2];
	nq2[3] = anc[10];
	nq2[4] = anc[14];
	nq2[5] = anc[7];
	nq2[6] = anc[8];
	nq3[0] = q[1];
	nq3[1] = anc[13];
	nq3[2] = q[0];
	nq3[3] = anc[1];
	nq3[4] = anc[10];
	nq3[5] = anc[15];
	nq3[6] = anc[8];
	nq3[7] = anc[5];
	nq3[8] = anc[7];
	nq3[9] = anc[6];
	nq3[10] = q[3];
	nq3[11] = anc[2];
	nq3[12] = q[4];
	Compute (0, 16, 85, 44, 4, 3, 0){
		acquire(16, anc, 37, nb);
		CNOT( anc[9], anc[2] );
		Toffoli( anc[8], anc[7], anc[15] );
		Toffoli( anc[6], q[6], q[2] );
		CNOT( anc[3], anc[2] );
		Toffoli( q[6], anc[15], anc[6] );
		Toffoli( q[4], anc[12], anc[13] );
		func43(nq0, 10);
		Toffoli( anc[3], anc[9], q[6] );
		CNOT( anc[0], anc[3] );
		Toffoli( q[4], q[6], anc[0] );
		Toffoli( q[4], anc[7], anc[0] );
		Toffoli( anc[4], anc[8], anc[15] );
		Toffoli( q[3], q[5], q[0] );
		CNOT( anc[11], anc[13] );
		CNOT( anc[0], anc[8] );
		CNOT( anc[12], q[4] );
		func46(nq3, 13);
		Toffoli( anc[9], anc[4], q[4] );
		CNOT( q[3], q[1] );
		Toffoli( anc[15], q[1], anc[1] );
		Toffoli( anc[9], anc[4], anc[15] );
		func45(nq2, 7);
		Toffoli( anc[14], anc[8], anc[13] );
		Toffoli( anc[14], q[1], anc[13] );
		CNOT( anc[15], q[2] );
		CNOT( q[6], anc[2] );
		CNOT( q[5], anc[14] );
		CNOT( q[0], q[5] );
		func44(nq1, 3);
		CNOT( anc[3], q[3] );
		Toffoli( q[4], anc[11], anc[8] );
		CNOT( anc[8], anc[11] );
		CNOT( anc[2], anc[1] );
		CNOT( q[5], anc[5] );
		Toffoli( anc[10], anc[1], anc[3] );
		Toffoli( anc[6], anc[8], anc[13] );
		CNOT( q[5], q[2] );
		CNOT( anc[9], anc[13] );
		CNOT( q[1], q[0] );
		Toffoli( q[6], q[2], anc[1] );
		CNOT( anc[3], q[1] );
		Toffoli( q[1], anc[13], q[2] );
		Toffoli( anc[1], q[1], q[6] );
		CNOT( anc[3], anc[1] );
		CNOT( anc[0], q[2] );
	}
	Store {
		CNOT( anc[6], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( anc[4], res[2] );
	}
	Uncompute(res, 0, anc, 16, 85, 44){
		CNOT( anc[0], q[2] );
		CNOT( anc[3], anc[1] );
		Toffoli( anc[1], q[1], q[6] );
		Toffoli( q[1], anc[13], q[2] );
		CNOT( anc[3], q[1] );
		Toffoli( q[6], q[2], anc[1] );
		CNOT( q[1], q[0] );
		CNOT( anc[9], anc[13] );
		CNOT( q[5], q[2] );
		Toffoli( anc[6], anc[8], anc[13] );
		Toffoli( anc[10], anc[1], anc[3] );
		CNOT( q[5], anc[5] );
		CNOT( anc[2], anc[1] );
		CNOT( anc[8], anc[11] );
		Toffoli( q[4], anc[11], anc[8] );
		CNOT( anc[3], q[3] );
		func44R(nq1, 3);
		CNOT( q[0], q[5] );
		CNOT( q[5], anc[14] );
		CNOT( q[6], anc[2] );
		CNOT( anc[15], q[2] );
		Toffoli( anc[14], q[1], anc[13] );
		Toffoli( anc[14], anc[8], anc[13] );
		func45R(nq2, 7);
		Toffoli( anc[9], anc[4], anc[15] );
		Toffoli( anc[15], q[1], anc[1] );
		CNOT( q[3], q[1] );
		Toffoli( anc[9], anc[4], q[4] );
		func46R(nq3, 13);
		CNOT( anc[12], q[4] );
		CNOT( anc[0], anc[8] );
		CNOT( anc[11], anc[13] );
		Toffoli( q[3], q[5], q[0] );
		Toffoli( anc[4], anc[8], anc[15] );
		Toffoli( q[4], anc[7], anc[0] );
		Toffoli( q[4], q[6], anc[0] );
		CNOT( anc[0], anc[3] );
		Toffoli( anc[3], anc[9], q[6] );
		func43R(nq0, 10);
		Toffoli( q[4], anc[12], anc[13] );
		Toffoli( q[6], anc[15], anc[6] );
		CNOT( anc[3], anc[2] );
		Toffoli( anc[6], q[6], q[2] );
		Toffoli( anc[8], anc[7], anc[15] );
		CNOT( anc[9], anc[2] );
	} Free(anc, 16) {}
}
// Function 14 with degree 4
// nq: 7, na: 16, ng: 41
void func14R(qbit **q, int n) {
printf("func14R\n");
fflush(stderr);
	qbit *anc[16]; // ancilla
	qbit *nb[37]; // interacting bits
	qbit *res[3];
	qbit *nq0[10];
	qbit *nq1[3];
	qbit *nq2[7];
	qbit *nq3[13];
	nb[0] = q[1];
	nb[1] = q[6];
	nb[2] = q[3];
	nb[3] = q[1];
	nb[4] = q[0];
	nb[5] = q[5];
	nb[6] = q[4];
	nb[7] = q[3];
	nb[8] = q[5];
	nb[9] = q[0];
	nb[10] = q[4];
	nb[11] = q[4];
	nb[12] = q[1];
	nb[13] = q[5];
	nb[14] = q[2];
	nb[15] = q[2];
	nb[16] = q[6];
	nb[17] = q[6];
	nb[18] = q[2];
	nb[19] = q[1];
	nb[20] = q[2];
	nb[21] = q[4];
	nb[22] = q[6];
	nb[23] = q[4];
	nb[24] = q[1];
	nb[25] = q[1];
	nb[26] = q[6];
	nb[27] = q[3];
	nb[28] = q[5];
	nb[29] = q[6];
	nb[30] = q[2];
	nb[31] = q[6];
	nb[32] = q[5];
	nb[33] = q[1];
	nb[34] = q[0];
	nb[35] = q[2];
	nb[36] = q[4];
	res[0] = q[1];
	res[1] = q[2];
	res[2] = q[6];
	// Non-leaf function
	nq0[0] = q[4];
	nq0[1] = q[0];
	nq0[2] = anc[1];
	nq0[3] = anc[11];
	nq0[4] = anc[15];
	nq0[5] = anc[3];
	nq0[6] = anc[14];
	nq0[7] = q[1];
	nq0[8] = anc[8];
	nq0[9] = q[6];
	nq1[0] = anc[15];
	nq1[1] = anc[0];
	nq1[2] = q[2];
	nq2[0] = anc[6];
	nq2[1] = q[0];
	nq2[2] = anc[2];
	nq2[3] = anc[10];
	nq2[4] = anc[14];
	nq2[5] = anc[7];
	nq2[6] = anc[8];
	nq3[0] = q[1];
	nq3[1] = anc[13];
	nq3[2] = q[0];
	nq3[3] = anc[1];
	nq3[4] = anc[10];
	nq3[5] = anc[15];
	nq3[6] = anc[8];
	nq3[7] = anc[5];
	nq3[8] = anc[7];
	nq3[9] = anc[6];
	nq3[10] = q[3];
	nq3[11] = anc[2];
	nq3[12] = q[4];
	_computeModule(0, 16, 85, 44, 4, 3, 0);
	acquire(16, anc, 37, nb);
	Recompute(res, 0, anc, 16, 85, 44){
		CNOT( anc[9], anc[2] );
		Toffoli( anc[8], anc[7], anc[15] );
		Toffoli( anc[6], q[6], q[2] );
		CNOT( anc[3], anc[2] );
		Toffoli( q[6], anc[15], anc[6] );
		Toffoli( q[4], anc[12], anc[13] );
		func43(nq0, 10);
		Toffoli( anc[3], anc[9], q[6] );
		CNOT( anc[0], anc[3] );
		Toffoli( q[4], q[6], anc[0] );
		Toffoli( q[4], anc[7], anc[0] );
		Toffoli( anc[4], anc[8], anc[15] );
		Toffoli( q[3], q[5], q[0] );
		CNOT( anc[11], anc[13] );
		CNOT( anc[0], anc[8] );
		CNOT( anc[12], q[4] );
		func46(nq3, 13);
		Toffoli( anc[9], anc[4], q[4] );
		CNOT( q[3], q[1] );
		Toffoli( anc[15], q[1], anc[1] );
		Toffoli( anc[9], anc[4], anc[15] );
		func45(nq2, 7);
		Toffoli( anc[14], anc[8], anc[13] );
		Toffoli( anc[14], q[1], anc[13] );
		CNOT( anc[15], q[2] );
		CNOT( q[6], anc[2] );
		CNOT( q[5], anc[14] );
		CNOT( q[0], q[5] );
		func44(nq1, 3);
		CNOT( anc[3], q[3] );
		Toffoli( q[4], anc[11], anc[8] );
		CNOT( anc[8], anc[11] );
		CNOT( anc[2], anc[1] );
		CNOT( q[5], anc[5] );
		Toffoli( anc[10], anc[1], anc[3] );
		Toffoli( anc[6], anc[8], anc[13] );
		CNOT( q[5], q[2] );
		CNOT( anc[9], anc[13] );
		CNOT( q[1], q[0] );
		Toffoli( q[6], q[2], anc[1] );
		CNOT( anc[3], q[1] );
		Toffoli( q[1], anc[13], q[2] );
		Toffoli( anc[1], q[1], q[6] );
		CNOT( anc[3], anc[1] );
		CNOT( anc[0], q[2] );
	}
	Restore {
		CNOT( anc[6], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( anc[4], res[2] );
	}
	Unrecompute {
		CNOT( anc[0], q[2] );
		CNOT( anc[3], anc[1] );
		Toffoli( anc[1], q[1], q[6] );
		Toffoli( q[1], anc[13], q[2] );
		CNOT( anc[3], q[1] );
		Toffoli( q[6], q[2], anc[1] );
		CNOT( q[1], q[0] );
		CNOT( anc[9], anc[13] );
		CNOT( q[5], q[2] );
		Toffoli( anc[6], anc[8], anc[13] );
		Toffoli( anc[10], anc[1], anc[3] );
		CNOT( q[5], anc[5] );
		CNOT( anc[2], anc[1] );
		CNOT( anc[8], anc[11] );
		Toffoli( q[4], anc[11], anc[8] );
		CNOT( anc[3], q[3] );
		func44R(nq1, 3);
		CNOT( q[0], q[5] );
		CNOT( q[5], anc[14] );
		CNOT( q[6], anc[2] );
		CNOT( anc[15], q[2] );
		Toffoli( anc[14], q[1], anc[13] );
		Toffoli( anc[14], anc[8], anc[13] );
		func45R(nq2, 7);
		Toffoli( anc[9], anc[4], anc[15] );
		Toffoli( anc[15], q[1], anc[1] );
		CNOT( q[3], q[1] );
		Toffoli( anc[9], anc[4], q[4] );
		func46R(nq3, 13);
		CNOT( anc[12], q[4] );
		CNOT( anc[0], anc[8] );
		CNOT( anc[11], anc[13] );
		Toffoli( q[3], q[5], q[0] );
		Toffoli( anc[4], anc[8], anc[15] );
		Toffoli( q[4], anc[7], anc[0] );
		Toffoli( q[4], q[6], anc[0] );
		CNOT( anc[0], anc[3] );
		Toffoli( anc[3], anc[9], q[6] );
		func43R(nq0, 10);
		Toffoli( q[4], anc[12], anc[13] );
		Toffoli( q[6], anc[15], anc[6] );
		CNOT( anc[3], anc[2] );
		Toffoli( anc[6], q[6], q[2] );
		Toffoli( anc[8], anc[7], anc[15] );
		CNOT( anc[9], anc[2] );
	} Refree(anc, 16) {}
}
// Function 13 with degree 3
// nq: 12, na: 13, ng: 17
void func13(qbit **q, int n) {
printf("func13\n");
fflush(stderr);
	qbit *anc[13]; // ancilla
	qbit *nb[18]; // interacting bits
	qbit *res[2];
	qbit *nq0[11];
	qbit *nq1[11];
	qbit *nq2[13];
	nb[0] = q[8];
	nb[1] = q[8];
	nb[2] = q[7];
	nb[3] = q[1];
	nb[4] = q[4];
	nb[5] = q[7];
	nb[6] = q[4];
	nb[7] = q[0];
	nb[8] = q[6];
	nb[9] = q[9];
	nb[10] = q[8];
	nb[11] = q[2];
	nb[12] = q[0];
	nb[13] = q[3];
	nb[14] = q[10];
	nb[15] = q[2];
	nb[16] = q[1];
	nb[17] = q[7];
	res[0] = q[2];
	res[1] = q[10];
	// Non-leaf function
	nq0[0] = q[5];
	nq0[1] = anc[5];
	nq0[2] = q[3];
	nq0[3] = q[10];
	nq0[4] = q[6];
	nq0[5] = q[11];
	nq0[6] = q[9];
	nq0[7] = anc[3];
	nq0[8] = anc[1];
	nq0[9] = anc[4];
	nq0[10] = q[4];
	nq1[0] = q[1];
	nq1[1] = anc[0];
	nq1[2] = q[2];
	nq1[3] = q[11];
	nq1[4] = anc[3];
	nq1[5] = anc[12];
	nq1[6] = anc[7];
	nq1[7] = q[9];
	nq1[8] = q[0];
	nq1[9] = q[6];
	nq1[10] = q[8];
	nq2[0] = anc[8];
	nq2[1] = anc[4];
	nq2[2] = anc[6];
	nq2[3] = q[2];
	nq2[4] = q[1];
	nq2[5] = q[3];
	nq2[6] = anc[9];
	nq2[7] = q[8];
	nq2[8] = q[11];
	nq2[9] = anc[0];
	nq2[10] = q[4];
	nq2[11] = anc[1];
	nq2[12] = anc[10];
	Compute (0, 13, 36, 19, 3, 3, 0){
		acquire(13, anc, 18, nb);
		Toffoli( anc[5], anc[11], q[4] );
		func42(nq2, 13);
		CNOT( anc[3], anc[5] );
		Toffoli( q[4], q[7], anc[1] );
		Toffoli( anc[0], q[10], anc[12] );
		CNOT( q[8], q[7] );
		Toffoli( anc[1], q[7], anc[10] );
		CNOT( q[2], anc[6] );
		func41(nq1, 11);
		Toffoli( q[9], anc[0], anc[4] );
		CNOT( anc[11], q[0] );
		Toffoli( q[8], anc[8], anc[5] );
		CNOT( q[0], q[3] );
		Toffoli( anc[8], q[1], anc[10] );
		CNOT( anc[12], anc[1] );
		Toffoli( anc[11], q[8], q[2] );
		func40(nq0, 11);
		CNOT( anc[4], anc[7] );
		Toffoli( q[1], anc[0], anc[4] );
		CNOT( q[6], anc[12] );
	}
	Store {
		CNOT( anc[3], res[0] );
		CNOT( q[0], res[1] );
	}
	Uncompute(res, 0, anc, 13, 36, 19){
		CNOT( q[6], anc[12] );
		Toffoli( q[1], anc[0], anc[4] );
		CNOT( anc[4], anc[7] );
		func40R(nq0, 11);
		Toffoli( anc[11], q[8], q[2] );
		CNOT( anc[12], anc[1] );
		Toffoli( anc[8], q[1], anc[10] );
		CNOT( q[0], q[3] );
		Toffoli( q[8], anc[8], anc[5] );
		CNOT( anc[11], q[0] );
		Toffoli( q[9], anc[0], anc[4] );
		func41R(nq1, 11);
		CNOT( q[2], anc[6] );
		Toffoli( anc[1], q[7], anc[10] );
		CNOT( q[8], q[7] );
		Toffoli( anc[0], q[10], anc[12] );
		Toffoli( q[4], q[7], anc[1] );
		CNOT( anc[3], anc[5] );
		func42R(nq2, 13);
		Toffoli( anc[5], anc[11], q[4] );
	} Free(anc, 13) {}
}
// Function 13 with degree 3
// nq: 12, na: 13, ng: 17
void func13R(qbit **q, int n) {
printf("func13R\n");
fflush(stderr);
	qbit *anc[13]; // ancilla
	qbit *nb[18]; // interacting bits
	qbit *res[2];
	qbit *nq0[11];
	qbit *nq1[11];
	qbit *nq2[13];
	nb[0] = q[8];
	nb[1] = q[8];
	nb[2] = q[7];
	nb[3] = q[1];
	nb[4] = q[4];
	nb[5] = q[7];
	nb[6] = q[4];
	nb[7] = q[0];
	nb[8] = q[6];
	nb[9] = q[9];
	nb[10] = q[8];
	nb[11] = q[2];
	nb[12] = q[0];
	nb[13] = q[3];
	nb[14] = q[10];
	nb[15] = q[2];
	nb[16] = q[1];
	nb[17] = q[7];
	res[0] = q[2];
	res[1] = q[10];
	// Non-leaf function
	nq0[0] = q[5];
	nq0[1] = anc[5];
	nq0[2] = q[3];
	nq0[3] = q[10];
	nq0[4] = q[6];
	nq0[5] = q[11];
	nq0[6] = q[9];
	nq0[7] = anc[3];
	nq0[8] = anc[1];
	nq0[9] = anc[4];
	nq0[10] = q[4];
	nq1[0] = q[1];
	nq1[1] = anc[0];
	nq1[2] = q[2];
	nq1[3] = q[11];
	nq1[4] = anc[3];
	nq1[5] = anc[12];
	nq1[6] = anc[7];
	nq1[7] = q[9];
	nq1[8] = q[0];
	nq1[9] = q[6];
	nq1[10] = q[8];
	nq2[0] = anc[8];
	nq2[1] = anc[4];
	nq2[2] = anc[6];
	nq2[3] = q[2];
	nq2[4] = q[1];
	nq2[5] = q[3];
	nq2[6] = anc[9];
	nq2[7] = q[8];
	nq2[8] = q[11];
	nq2[9] = anc[0];
	nq2[10] = q[4];
	nq2[11] = anc[1];
	nq2[12] = anc[10];
	_computeModule(0, 13, 36, 19, 3, 3, 0);
	acquire(13, anc, 18, nb);
	Recompute(res, 0, anc, 13, 36, 19){
		Toffoli( anc[5], anc[11], q[4] );
		func42(nq2, 13);
		CNOT( anc[3], anc[5] );
		Toffoli( q[4], q[7], anc[1] );
		Toffoli( anc[0], q[10], anc[12] );
		CNOT( q[8], q[7] );
		Toffoli( anc[1], q[7], anc[10] );
		CNOT( q[2], anc[6] );
		func41(nq1, 11);
		Toffoli( q[9], anc[0], anc[4] );
		CNOT( anc[11], q[0] );
		Toffoli( q[8], anc[8], anc[5] );
		CNOT( q[0], q[3] );
		Toffoli( anc[8], q[1], anc[10] );
		CNOT( anc[12], anc[1] );
		Toffoli( anc[11], q[8], q[2] );
		func40(nq0, 11);
		CNOT( anc[4], anc[7] );
		Toffoli( q[1], anc[0], anc[4] );
		CNOT( q[6], anc[12] );
	}
	Restore {
		CNOT( anc[3], res[0] );
		CNOT( q[0], res[1] );
	}
	Unrecompute {
		CNOT( q[6], anc[12] );
		Toffoli( q[1], anc[0], anc[4] );
		CNOT( anc[4], anc[7] );
		func40R(nq0, 11);
		Toffoli( anc[11], q[8], q[2] );
		CNOT( anc[12], anc[1] );
		Toffoli( anc[8], q[1], anc[10] );
		CNOT( q[0], q[3] );
		Toffoli( q[8], anc[8], anc[5] );
		CNOT( anc[11], q[0] );
		Toffoli( q[9], anc[0], anc[4] );
		func41R(nq1, 11);
		CNOT( q[2], anc[6] );
		Toffoli( anc[1], q[7], anc[10] );
		CNOT( q[8], q[7] );
		Toffoli( anc[0], q[10], anc[12] );
		Toffoli( q[4], q[7], anc[1] );
		CNOT( anc[3], anc[5] );
		func42R(nq2, 13);
		Toffoli( anc[5], anc[11], q[4] );
	} Refree(anc, 13) {}
}
// Function 12 with degree 1
// nq: 7, na: 3, ng: 6
void func12(qbit **q, int n) {
printf("func12\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[11]; // interacting bits
	qbit *res[1];
	qbit *nq0[7];
	nb[0] = q[3];
	nb[1] = q[0];
	nb[2] = q[1];
	nb[3] = q[1];
	nb[4] = q[5];
	nb[5] = q[1];
	nb[6] = q[0];
	nb[7] = q[1];
	nb[8] = q[0];
	nb[9] = q[2];
	nb[10] = q[6];
	res[0] = q[1];
	// Non-leaf function
	nq0[0] = q[6];
	nq0[1] = q[1];
	nq0[2] = q[5];
	nq0[3] = q[2];
	nq0[4] = q[4];
	nq0[5] = anc[2];
	nq0[6] = q[3];
	Compute (0, 3, 13, 7, 1, 3, 0){
		acquire(3, anc, 11, nb);
		Toffoli( anc[2], q[5], q[1] );
		Toffoli( q[3], q[0], q[1] );
		CNOT( q[0], q[1] );
		Toffoli( q[0], q[2], q[6] );
		CNOT( anc[1], anc[2] );
		func39(nq0, 7);
		Toffoli( anc[0], q[1], anc[1] );
	}
	Store {
		CNOT( q[0], res[0] );
	}
	Uncompute(res, 0, anc, 3, 13, 7){
		Toffoli( anc[0], q[1], anc[1] );
		func39R(nq0, 7);
		CNOT( anc[1], anc[2] );
		Toffoli( q[0], q[2], q[6] );
		CNOT( q[0], q[1] );
		Toffoli( q[3], q[0], q[1] );
		Toffoli( anc[2], q[5], q[1] );
	} Free(anc, 3) {}
}
// Function 12 with degree 1
// nq: 7, na: 3, ng: 6
void func12R(qbit **q, int n) {
printf("func12R\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[11]; // interacting bits
	qbit *res[1];
	qbit *nq0[7];
	nb[0] = q[3];
	nb[1] = q[0];
	nb[2] = q[1];
	nb[3] = q[1];
	nb[4] = q[5];
	nb[5] = q[1];
	nb[6] = q[0];
	nb[7] = q[1];
	nb[8] = q[0];
	nb[9] = q[2];
	nb[10] = q[6];
	res[0] = q[1];
	// Non-leaf function
	nq0[0] = q[6];
	nq0[1] = q[1];
	nq0[2] = q[5];
	nq0[3] = q[2];
	nq0[4] = q[4];
	nq0[5] = anc[2];
	nq0[6] = q[3];
	_computeModule(0, 3, 13, 7, 1, 3, 0);
	acquire(3, anc, 11, nb);
	Recompute(res, 0, anc, 3, 13, 7){
		Toffoli( anc[2], q[5], q[1] );
		Toffoli( q[3], q[0], q[1] );
		CNOT( q[0], q[1] );
		Toffoli( q[0], q[2], q[6] );
		CNOT( anc[1], anc[2] );
		func39(nq0, 7);
		Toffoli( anc[0], q[1], anc[1] );
	}
	Restore {
		CNOT( q[0], res[0] );
	}
	Unrecompute {
		Toffoli( anc[0], q[1], anc[1] );
		func39R(nq0, 7);
		CNOT( anc[1], anc[2] );
		Toffoli( q[0], q[2], q[6] );
		CNOT( q[0], q[1] );
		Toffoli( q[3], q[0], q[1] );
		Toffoli( anc[2], q[5], q[1] );
	} Refree(anc, 3) {}
}
// Function 11 with degree 2
// nq: 6, na: 3, ng: 8
void func11(qbit **q, int n) {
printf("func11\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[16]; // interacting bits
	qbit *res[1];
	qbit *nq0[6];
	qbit *nq1[4];
	nb[0] = q[3];
	nb[1] = q[4];
	nb[2] = q[2];
	nb[3] = q[5];
	nb[4] = q[0];
	nb[5] = q[0];
	nb[6] = q[5];
	nb[7] = q[0];
	nb[8] = q[1];
	nb[9] = q[1];
	nb[10] = q[3];
	nb[11] = q[5];
	nb[12] = q[4];
	nb[13] = q[1];
	nb[14] = q[1];
	nb[15] = q[4];
	res[0] = q[2];
	// Non-leaf function
	nq0[0] = q[5];
	nq0[1] = q[3];
	nq0[2] = anc[2];
	nq0[3] = q[4];
	nq0[4] = anc[1];
	nq0[5] = q[1];
	nq1[0] = q[3];
	nq1[1] = anc[2];
	nq1[2] = q[5];
	nq1[3] = q[1];
	Compute (0, 3, 17, 9, 2, 4, 0){
		acquire(3, anc, 16, nb);
		CNOT( q[0], q[5] );
		Toffoli( q[3], q[4], q[2] );
		CNOT( q[5], q[0] );
		Toffoli( anc[1], q[1], q[4] );
		func37(nq0, 6);
		Toffoli( q[1], anc[2], anc[1] );
		Toffoli( q[0], anc[2], q[1] );
		func38(nq1, 4);
		Toffoli( q[5], q[4], q[1] );
		Toffoli( q[3], anc[0], anc[2] );
	}
	Store {
		CNOT( q[1], res[0] );
	}
	Uncompute(res, 0, anc, 3, 17, 9){
		Toffoli( q[3], anc[0], anc[2] );
		Toffoli( q[5], q[4], q[1] );
		func38R(nq1, 4);
		Toffoli( q[0], anc[2], q[1] );
		Toffoli( q[1], anc[2], anc[1] );
		func37R(nq0, 6);
		Toffoli( anc[1], q[1], q[4] );
		CNOT( q[5], q[0] );
		Toffoli( q[3], q[4], q[2] );
		CNOT( q[0], q[5] );
	} Free(anc, 3) {}
}
// Function 11 with degree 2
// nq: 6, na: 3, ng: 8
void func11R(qbit **q, int n) {
printf("func11R\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[16]; // interacting bits
	qbit *res[1];
	qbit *nq0[6];
	qbit *nq1[4];
	nb[0] = q[3];
	nb[1] = q[4];
	nb[2] = q[2];
	nb[3] = q[5];
	nb[4] = q[0];
	nb[5] = q[0];
	nb[6] = q[5];
	nb[7] = q[0];
	nb[8] = q[1];
	nb[9] = q[1];
	nb[10] = q[3];
	nb[11] = q[5];
	nb[12] = q[4];
	nb[13] = q[1];
	nb[14] = q[1];
	nb[15] = q[4];
	res[0] = q[2];
	// Non-leaf function
	nq0[0] = q[5];
	nq0[1] = q[3];
	nq0[2] = anc[2];
	nq0[3] = q[4];
	nq0[4] = anc[1];
	nq0[5] = q[1];
	nq1[0] = q[3];
	nq1[1] = anc[2];
	nq1[2] = q[5];
	nq1[3] = q[1];
	_computeModule(0, 3, 17, 9, 2, 4, 0);
	acquire(3, anc, 16, nb);
	Recompute(res, 0, anc, 3, 17, 9){
		CNOT( q[0], q[5] );
		Toffoli( q[3], q[4], q[2] );
		CNOT( q[5], q[0] );
		Toffoli( anc[1], q[1], q[4] );
		func37(nq0, 6);
		Toffoli( q[1], anc[2], anc[1] );
		Toffoli( q[0], anc[2], q[1] );
		func38(nq1, 4);
		Toffoli( q[5], q[4], q[1] );
		Toffoli( q[3], anc[0], anc[2] );
	}
	Restore {
		CNOT( q[1], res[0] );
	}
	Unrecompute {
		Toffoli( q[3], anc[0], anc[2] );
		Toffoli( q[5], q[4], q[1] );
		func38R(nq1, 4);
		Toffoli( q[0], anc[2], q[1] );
		Toffoli( q[1], anc[2], anc[1] );
		func37R(nq0, 6);
		Toffoli( anc[1], q[1], q[4] );
		CNOT( q[5], q[0] );
		Toffoli( q[3], q[4], q[2] );
		CNOT( q[0], q[5] );
	} Refree(anc, 3) {}
}
// Function 10 with degree 3
// nq: 5, na: 9, ng: 23
void func10(qbit **q, int n) {
printf("func10\n");
fflush(stderr);
	qbit *anc[9]; // ancilla
	qbit *nb[16]; // interacting bits
	qbit *res[4];
	qbit *nq0[5];
	qbit *nq1[10];
	qbit *nq2[8];
	nb[0] = q[1];
	nb[1] = q[2];
	nb[2] = q[3];
	nb[3] = q[1];
	nb[4] = q[3];
	nb[5] = q[1];
	nb[6] = q[3];
	nb[7] = q[1];
	nb[8] = q[4];
	nb[9] = q[4];
	nb[10] = q[3];
	nb[11] = q[1];
	nb[12] = q[0];
	nb[13] = q[1];
	nb[14] = q[0];
	nb[15] = q[1];
	res[0] = q[3];
	res[1] = q[0];
	res[2] = q[1];
	res[3] = q[4];
	// Non-leaf function
	nq0[0] = anc[6];
	nq0[1] = q[0];
	nq0[2] = q[2];
	nq0[3] = q[1];
	nq0[4] = anc[1];
	nq1[0] = anc[0];
	nq1[1] = anc[7];
	nq1[2] = anc[1];
	nq1[3] = anc[8];
	nq1[4] = q[1];
	nq1[5] = anc[5];
	nq1[6] = anc[4];
	nq1[7] = q[3];
	nq1[8] = q[2];
	nq1[9] = anc[6];
	nq2[0] = anc[6];
	nq2[1] = anc[7];
	nq2[2] = anc[8];
	nq2[3] = anc[5];
	nq2[4] = q[0];
	nq2[5] = anc[4];
	nq2[6] = anc[3];
	nq2[7] = q[1];
	Compute (0, 9, 50, 27, 3, 4, 0){
		acquire(9, anc, 16, nb);
		Toffoli( anc[5], anc[7], anc[3] );
		CNOT( anc[0], q[1] );
		Toffoli( q[0], q[1], anc[1] );
		CNOT( anc[7], anc[4] );
		CNOT( anc[1], anc[2] );
		Toffoli( anc[2], q[1], anc[3] );
		CNOT( q[1], anc[0] );
		Toffoli( anc[4], anc[2], anc[3] );
		CNOT( q[3], anc[3] );
		func36(nq2, 8);
		Toffoli( anc[4], anc[3], anc[2] );
		CNOT( anc[8], anc[5] );
		Toffoli( anc[0], anc[8], anc[2] );
		CNOT( q[1], anc[7] );
		Toffoli( q[0], anc[7], anc[0] );
		Toffoli( anc[8], anc[6], q[4] );
		Toffoli( anc[7], q[1], anc[2] );
		Toffoli( anc[7], anc[6], q[3] );
		CNOT( anc[0], anc[4] );
		CNOT( q[4], q[3] );
		CNOT( anc[5], anc[6] );
		Toffoli( anc[4], q[3], q[1] );
		Toffoli( anc[8], anc[5], anc[2] );
		func35(nq1, 10);
		CNOT( q[2], anc[3] );
		func34(nq0, 5);
	}
	Store {
		CNOT( anc[2], res[0] );
		CNOT( q[1], res[1] );
		CNOT( q[3], res[2] );
		CNOT( anc[0], res[3] );
	}
	Uncompute(res, 0, anc, 9, 50, 27){
		func34R(nq0, 5);
		CNOT( q[2], anc[3] );
		func35R(nq1, 10);
		Toffoli( anc[8], anc[5], anc[2] );
		Toffoli( anc[4], q[3], q[1] );
		CNOT( anc[5], anc[6] );
		CNOT( q[4], q[3] );
		CNOT( anc[0], anc[4] );
		Toffoli( anc[7], anc[6], q[3] );
		Toffoli( anc[7], q[1], anc[2] );
		Toffoli( anc[8], anc[6], q[4] );
		Toffoli( q[0], anc[7], anc[0] );
		CNOT( q[1], anc[7] );
		Toffoli( anc[0], anc[8], anc[2] );
		CNOT( anc[8], anc[5] );
		Toffoli( anc[4], anc[3], anc[2] );
		func36R(nq2, 8);
		CNOT( q[3], anc[3] );
		Toffoli( anc[4], anc[2], anc[3] );
		CNOT( q[1], anc[0] );
		Toffoli( anc[2], q[1], anc[3] );
		CNOT( anc[1], anc[2] );
		CNOT( anc[7], anc[4] );
		Toffoli( q[0], q[1], anc[1] );
		CNOT( anc[0], q[1] );
		Toffoli( anc[5], anc[7], anc[3] );
	} Free(anc, 9) {}
}
// Function 10 with degree 3
// nq: 5, na: 9, ng: 23
void func10R(qbit **q, int n) {
printf("func10R\n");
fflush(stderr);
	qbit *anc[9]; // ancilla
	qbit *nb[16]; // interacting bits
	qbit *res[4];
	qbit *nq0[5];
	qbit *nq1[10];
	qbit *nq2[8];
	nb[0] = q[1];
	nb[1] = q[2];
	nb[2] = q[3];
	nb[3] = q[1];
	nb[4] = q[3];
	nb[5] = q[1];
	nb[6] = q[3];
	nb[7] = q[1];
	nb[8] = q[4];
	nb[9] = q[4];
	nb[10] = q[3];
	nb[11] = q[1];
	nb[12] = q[0];
	nb[13] = q[1];
	nb[14] = q[0];
	nb[15] = q[1];
	res[0] = q[3];
	res[1] = q[0];
	res[2] = q[1];
	res[3] = q[4];
	// Non-leaf function
	nq0[0] = anc[6];
	nq0[1] = q[0];
	nq0[2] = q[2];
	nq0[3] = q[1];
	nq0[4] = anc[1];
	nq1[0] = anc[0];
	nq1[1] = anc[7];
	nq1[2] = anc[1];
	nq1[3] = anc[8];
	nq1[4] = q[1];
	nq1[5] = anc[5];
	nq1[6] = anc[4];
	nq1[7] = q[3];
	nq1[8] = q[2];
	nq1[9] = anc[6];
	nq2[0] = anc[6];
	nq2[1] = anc[7];
	nq2[2] = anc[8];
	nq2[3] = anc[5];
	nq2[4] = q[0];
	nq2[5] = anc[4];
	nq2[6] = anc[3];
	nq2[7] = q[1];
	_computeModule(0, 9, 50, 27, 3, 4, 0);
	acquire(9, anc, 16, nb);
	Recompute(res, 0, anc, 9, 50, 27){
		Toffoli( anc[5], anc[7], anc[3] );
		CNOT( anc[0], q[1] );
		Toffoli( q[0], q[1], anc[1] );
		CNOT( anc[7], anc[4] );
		CNOT( anc[1], anc[2] );
		Toffoli( anc[2], q[1], anc[3] );
		CNOT( q[1], anc[0] );
		Toffoli( anc[4], anc[2], anc[3] );
		CNOT( q[3], anc[3] );
		func36(nq2, 8);
		Toffoli( anc[4], anc[3], anc[2] );
		CNOT( anc[8], anc[5] );
		Toffoli( anc[0], anc[8], anc[2] );
		CNOT( q[1], anc[7] );
		Toffoli( q[0], anc[7], anc[0] );
		Toffoli( anc[8], anc[6], q[4] );
		Toffoli( anc[7], q[1], anc[2] );
		Toffoli( anc[7], anc[6], q[3] );
		CNOT( anc[0], anc[4] );
		CNOT( q[4], q[3] );
		CNOT( anc[5], anc[6] );
		Toffoli( anc[4], q[3], q[1] );
		Toffoli( anc[8], anc[5], anc[2] );
		func35(nq1, 10);
		CNOT( q[2], anc[3] );
		func34(nq0, 5);
	}
	Restore {
		CNOT( anc[2], res[0] );
		CNOT( q[1], res[1] );
		CNOT( q[3], res[2] );
		CNOT( anc[0], res[3] );
	}
	Unrecompute {
		func34R(nq0, 5);
		CNOT( q[2], anc[3] );
		func35R(nq1, 10);
		Toffoli( anc[8], anc[5], anc[2] );
		Toffoli( anc[4], q[3], q[1] );
		CNOT( anc[5], anc[6] );
		CNOT( q[4], q[3] );
		CNOT( anc[0], anc[4] );
		Toffoli( anc[7], anc[6], q[3] );
		Toffoli( anc[7], q[1], anc[2] );
		Toffoli( anc[8], anc[6], q[4] );
		Toffoli( q[0], anc[7], anc[0] );
		CNOT( q[1], anc[7] );
		Toffoli( anc[0], anc[8], anc[2] );
		CNOT( anc[8], anc[5] );
		Toffoli( anc[4], anc[3], anc[2] );
		func36R(nq2, 8);
		CNOT( q[3], anc[3] );
		Toffoli( anc[4], anc[2], anc[3] );
		CNOT( q[1], anc[0] );
		Toffoli( anc[2], q[1], anc[3] );
		CNOT( anc[1], anc[2] );
		CNOT( anc[7], anc[4] );
		Toffoli( q[0], q[1], anc[1] );
		CNOT( anc[0], q[1] );
		Toffoli( anc[5], anc[7], anc[3] );
	} Refree(anc, 9) {}
}
// Function 9 with degree 4
// nq: 12, na: 2, ng: 34
void func9(qbit **q, int n) {
printf("func9\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[72]; // interacting bits
	qbit *res[5];
	qbit *nq0[12];
	qbit *nq1[13];
	qbit *nq2[6];
	qbit *nq3[12];
	nb[0] = q[11];
	nb[1] = q[0];
	nb[2] = q[7];
	nb[3] = q[6];
	nb[4] = q[1];
	nb[5] = q[2];
	nb[6] = q[8];
	nb[7] = q[7];
	nb[8] = q[0];
	nb[9] = q[8];
	nb[10] = q[4];
	nb[11] = q[5];
	nb[12] = q[6];
	nb[13] = q[0];
	nb[14] = q[5];
	nb[15] = q[3];
	nb[16] = q[8];
	nb[17] = q[6];
	nb[18] = q[11];
	nb[19] = q[0];
	nb[20] = q[8];
	nb[21] = q[4];
	nb[22] = q[4];
	nb[23] = q[6];
	nb[24] = q[10];
	nb[25] = q[9];
	nb[26] = q[5];
	nb[27] = q[6];
	nb[28] = q[3];
	nb[29] = q[6];
	nb[30] = q[11];
	nb[31] = q[10];
	nb[32] = q[7];
	nb[33] = q[4];
	nb[34] = q[4];
	nb[35] = q[11];
	nb[36] = q[6];
	nb[37] = q[8];
	nb[38] = q[9];
	nb[39] = q[10];
	nb[40] = q[3];
	nb[41] = q[5];
	nb[42] = q[3];
	nb[43] = q[1];
	nb[44] = q[4];
	nb[45] = q[1];
	nb[46] = q[2];
	nb[47] = q[9];
	nb[48] = q[1];
	nb[49] = q[0];
	nb[50] = q[11];
	nb[51] = q[10];
	nb[52] = q[7];
	nb[53] = q[3];
	nb[54] = q[5];
	nb[55] = q[1];
	nb[56] = q[11];
	nb[57] = q[8];
	nb[58] = q[9];
	nb[59] = q[0];
	nb[60] = q[2];
	nb[61] = q[10];
	nb[62] = q[5];
	nb[63] = q[3];
	nb[64] = q[3];
	nb[65] = q[8];
	nb[66] = q[0];
	nb[67] = q[4];
	nb[68] = q[10];
	nb[69] = q[11];
	nb[70] = q[9];
	nb[71] = q[11];
	res[0] = q[6];
	res[1] = q[1];
	res[2] = q[10];
	res[3] = q[9];
	res[4] = q[8];
	// Non-leaf function
	nq0[0] = q[5];
	nq0[1] = q[10];
	nq0[2] = q[8];
	nq0[3] = q[6];
	nq0[4] = q[0];
	nq0[5] = q[7];
	nq0[6] = q[3];
	nq0[7] = q[11];
	nq0[8] = q[4];
	nq0[9] = q[2];
	nq0[10] = q[9];
	nq0[11] = anc[0];
	nq1[0] = q[3];
	nq1[1] = q[4];
	nq1[2] = anc[0];
	nq1[3] = q[11];
	nq1[4] = q[2];
	nq1[5] = q[9];
	nq1[6] = q[0];
	nq1[7] = q[7];
	nq1[8] = anc[1];
	nq1[9] = q[10];
	nq1[10] = q[5];
	nq1[11] = q[6];
	nq1[12] = q[1];
	nq2[0] = anc[1];
	nq2[1] = q[4];
	nq2[2] = q[5];
	nq2[3] = q[1];
	nq2[4] = q[10];
	nq2[5] = q[6];
	nq3[0] = q[5];
	nq3[1] = q[7];
	nq3[2] = q[4];
	nq3[3] = q[1];
	nq3[4] = q[2];
	nq3[5] = q[8];
	nq3[6] = q[0];
	nq3[7] = q[9];
	nq3[8] = anc[1];
	nq3[9] = anc[0];
	nq3[10] = q[11];
	nq3[11] = q[3];
	Compute (0, 2, 73, 39, 4, 4, 0){
		acquire(2, anc, 72, nb);
		Toffoli( q[11], q[8], anc[0] );
		Toffoli( q[10], q[7], q[3] );
		func32(nq2, 6);
		CNOT( q[0], q[11] );
		CNOT( q[11], anc[1] );
		CNOT( q[4], q[10] );
		Toffoli( q[9], q[10], q[3] );
		Toffoli( q[2], q[9], q[1] );
		Toffoli( q[6], q[0], q[5] );
		CNOT( q[6], q[10] );
		Toffoli( q[11], q[6], q[8] );
		Toffoli( q[4], anc[0], q[1] );
		func30(nq0, 12);
		CNOT( q[9], q[11] );
		CNOT( q[8], q[0] );
		CNOT( q[11], q[0] );
		func31(nq1, 13);
		func33(nq3, 12);
		Toffoli( q[7], q[0], q[8] );
		Toffoli( anc[0], q[3], q[8] );
		Toffoli( q[5], q[3], q[1] );
		CNOT( q[3], q[6] );
		CNOT( q[6], anc[1] );
		Toffoli( q[10], q[5], q[3] );
		Toffoli( q[9], q[0], q[2] );
		Toffoli( anc[1], q[6], q[11] );
		Toffoli( q[0], q[8], q[4] );
		CNOT( q[4], q[5] );
		CNOT( q[1], anc[1] );
		Toffoli( anc[0], q[7], anc[1] );
		CNOT( q[4], anc[0] );
		CNOT( anc[1], q[11] );
		CNOT( anc[0], q[5] );
		Toffoli( q[10], q[7], q[4] );
		Toffoli( q[9], q[5], q[6] );
		CNOT( q[4], anc[0] );
		Toffoli( q[1], q[2], q[8] );
		Toffoli( q[3], anc[0], anc[1] );
	}
	Store {
		CNOT( q[8], res[0] );
		CNOT( q[0], res[1] );
		CNOT( q[4], res[2] );
		CNOT( q[10], res[3] );
		CNOT( q[6], res[4] );
	}
	Uncompute(res, 0, anc, 2, 73, 39){
		Toffoli( q[3], anc[0], anc[1] );
		Toffoli( q[1], q[2], q[8] );
		CNOT( q[4], anc[0] );
		Toffoli( q[9], q[5], q[6] );
		Toffoli( q[10], q[7], q[4] );
		CNOT( anc[0], q[5] );
		CNOT( anc[1], q[11] );
		CNOT( q[4], anc[0] );
		Toffoli( anc[0], q[7], anc[1] );
		CNOT( q[1], anc[1] );
		CNOT( q[4], q[5] );
		Toffoli( q[0], q[8], q[4] );
		Toffoli( anc[1], q[6], q[11] );
		Toffoli( q[9], q[0], q[2] );
		Toffoli( q[10], q[5], q[3] );
		CNOT( q[6], anc[1] );
		CNOT( q[3], q[6] );
		Toffoli( q[5], q[3], q[1] );
		Toffoli( anc[0], q[3], q[8] );
		Toffoli( q[7], q[0], q[8] );
		func33R(nq3, 12);
		func31R(nq1, 13);
		CNOT( q[11], q[0] );
		CNOT( q[8], q[0] );
		CNOT( q[9], q[11] );
		func30R(nq0, 12);
		Toffoli( q[4], anc[0], q[1] );
		Toffoli( q[11], q[6], q[8] );
		CNOT( q[6], q[10] );
		Toffoli( q[6], q[0], q[5] );
		Toffoli( q[2], q[9], q[1] );
		Toffoli( q[9], q[10], q[3] );
		CNOT( q[4], q[10] );
		CNOT( q[11], anc[1] );
		CNOT( q[0], q[11] );
		func32R(nq2, 6);
		Toffoli( q[10], q[7], q[3] );
		Toffoli( q[11], q[8], anc[0] );
	} Free(anc, 2) {}
}
// Function 9 with degree 4
// nq: 12, na: 2, ng: 34
void func9R(qbit **q, int n) {
printf("func9R\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[72]; // interacting bits
	qbit *res[5];
	qbit *nq0[12];
	qbit *nq1[13];
	qbit *nq2[6];
	qbit *nq3[12];
	nb[0] = q[11];
	nb[1] = q[0];
	nb[2] = q[7];
	nb[3] = q[6];
	nb[4] = q[1];
	nb[5] = q[2];
	nb[6] = q[8];
	nb[7] = q[7];
	nb[8] = q[0];
	nb[9] = q[8];
	nb[10] = q[4];
	nb[11] = q[5];
	nb[12] = q[6];
	nb[13] = q[0];
	nb[14] = q[5];
	nb[15] = q[3];
	nb[16] = q[8];
	nb[17] = q[6];
	nb[18] = q[11];
	nb[19] = q[0];
	nb[20] = q[8];
	nb[21] = q[4];
	nb[22] = q[4];
	nb[23] = q[6];
	nb[24] = q[10];
	nb[25] = q[9];
	nb[26] = q[5];
	nb[27] = q[6];
	nb[28] = q[3];
	nb[29] = q[6];
	nb[30] = q[11];
	nb[31] = q[10];
	nb[32] = q[7];
	nb[33] = q[4];
	nb[34] = q[4];
	nb[35] = q[11];
	nb[36] = q[6];
	nb[37] = q[8];
	nb[38] = q[9];
	nb[39] = q[10];
	nb[40] = q[3];
	nb[41] = q[5];
	nb[42] = q[3];
	nb[43] = q[1];
	nb[44] = q[4];
	nb[45] = q[1];
	nb[46] = q[2];
	nb[47] = q[9];
	nb[48] = q[1];
	nb[49] = q[0];
	nb[50] = q[11];
	nb[51] = q[10];
	nb[52] = q[7];
	nb[53] = q[3];
	nb[54] = q[5];
	nb[55] = q[1];
	nb[56] = q[11];
	nb[57] = q[8];
	nb[58] = q[9];
	nb[59] = q[0];
	nb[60] = q[2];
	nb[61] = q[10];
	nb[62] = q[5];
	nb[63] = q[3];
	nb[64] = q[3];
	nb[65] = q[8];
	nb[66] = q[0];
	nb[67] = q[4];
	nb[68] = q[10];
	nb[69] = q[11];
	nb[70] = q[9];
	nb[71] = q[11];
	res[0] = q[6];
	res[1] = q[1];
	res[2] = q[10];
	res[3] = q[9];
	res[4] = q[8];
	// Non-leaf function
	nq0[0] = q[5];
	nq0[1] = q[10];
	nq0[2] = q[8];
	nq0[3] = q[6];
	nq0[4] = q[0];
	nq0[5] = q[7];
	nq0[6] = q[3];
	nq0[7] = q[11];
	nq0[8] = q[4];
	nq0[9] = q[2];
	nq0[10] = q[9];
	nq0[11] = anc[0];
	nq1[0] = q[3];
	nq1[1] = q[4];
	nq1[2] = anc[0];
	nq1[3] = q[11];
	nq1[4] = q[2];
	nq1[5] = q[9];
	nq1[6] = q[0];
	nq1[7] = q[7];
	nq1[8] = anc[1];
	nq1[9] = q[10];
	nq1[10] = q[5];
	nq1[11] = q[6];
	nq1[12] = q[1];
	nq2[0] = anc[1];
	nq2[1] = q[4];
	nq2[2] = q[5];
	nq2[3] = q[1];
	nq2[4] = q[10];
	nq2[5] = q[6];
	nq3[0] = q[5];
	nq3[1] = q[7];
	nq3[2] = q[4];
	nq3[3] = q[1];
	nq3[4] = q[2];
	nq3[5] = q[8];
	nq3[6] = q[0];
	nq3[7] = q[9];
	nq3[8] = anc[1];
	nq3[9] = anc[0];
	nq3[10] = q[11];
	nq3[11] = q[3];
	_computeModule(0, 2, 73, 39, 4, 4, 0);
	acquire(2, anc, 72, nb);
	Recompute(res, 0, anc, 2, 73, 39){
		Toffoli( q[11], q[8], anc[0] );
		Toffoli( q[10], q[7], q[3] );
		func32(nq2, 6);
		CNOT( q[0], q[11] );
		CNOT( q[11], anc[1] );
		CNOT( q[4], q[10] );
		Toffoli( q[9], q[10], q[3] );
		Toffoli( q[2], q[9], q[1] );
		Toffoli( q[6], q[0], q[5] );
		CNOT( q[6], q[10] );
		Toffoli( q[11], q[6], q[8] );
		Toffoli( q[4], anc[0], q[1] );
		func30(nq0, 12);
		CNOT( q[9], q[11] );
		CNOT( q[8], q[0] );
		CNOT( q[11], q[0] );
		func31(nq1, 13);
		func33(nq3, 12);
		Toffoli( q[7], q[0], q[8] );
		Toffoli( anc[0], q[3], q[8] );
		Toffoli( q[5], q[3], q[1] );
		CNOT( q[3], q[6] );
		CNOT( q[6], anc[1] );
		Toffoli( q[10], q[5], q[3] );
		Toffoli( q[9], q[0], q[2] );
		Toffoli( anc[1], q[6], q[11] );
		Toffoli( q[0], q[8], q[4] );
		CNOT( q[4], q[5] );
		CNOT( q[1], anc[1] );
		Toffoli( anc[0], q[7], anc[1] );
		CNOT( q[4], anc[0] );
		CNOT( anc[1], q[11] );
		CNOT( anc[0], q[5] );
		Toffoli( q[10], q[7], q[4] );
		Toffoli( q[9], q[5], q[6] );
		CNOT( q[4], anc[0] );
		Toffoli( q[1], q[2], q[8] );
		Toffoli( q[3], anc[0], anc[1] );
	}
	Restore {
		CNOT( q[8], res[0] );
		CNOT( q[0], res[1] );
		CNOT( q[4], res[2] );
		CNOT( q[10], res[3] );
		CNOT( q[6], res[4] );
	}
	Unrecompute {
		Toffoli( q[3], anc[0], anc[1] );
		Toffoli( q[1], q[2], q[8] );
		CNOT( q[4], anc[0] );
		Toffoli( q[9], q[5], q[6] );
		Toffoli( q[10], q[7], q[4] );
		CNOT( anc[0], q[5] );
		CNOT( anc[1], q[11] );
		CNOT( q[4], anc[0] );
		Toffoli( anc[0], q[7], anc[1] );
		CNOT( q[1], anc[1] );
		CNOT( q[4], q[5] );
		Toffoli( q[0], q[8], q[4] );
		Toffoli( anc[1], q[6], q[11] );
		Toffoli( q[9], q[0], q[2] );
		Toffoli( q[10], q[5], q[3] );
		CNOT( q[6], anc[1] );
		CNOT( q[3], q[6] );
		Toffoli( q[5], q[3], q[1] );
		Toffoli( anc[0], q[3], q[8] );
		Toffoli( q[7], q[0], q[8] );
		func33R(nq3, 12);
		func31R(nq1, 13);
		CNOT( q[11], q[0] );
		CNOT( q[8], q[0] );
		CNOT( q[9], q[11] );
		func30R(nq0, 12);
		Toffoli( q[4], anc[0], q[1] );
		Toffoli( q[11], q[6], q[8] );
		CNOT( q[6], q[10] );
		Toffoli( q[6], q[0], q[5] );
		Toffoli( q[2], q[9], q[1] );
		Toffoli( q[9], q[10], q[3] );
		CNOT( q[4], q[10] );
		CNOT( q[11], anc[1] );
		CNOT( q[0], q[11] );
		func32R(nq2, 6);
		Toffoli( q[10], q[7], q[3] );
		Toffoli( q[11], q[8], anc[0] );
	} Refree(anc, 2) {}
}
// Function 8 with degree 3
// nq: 13, na: 9, ng: 42
void func8(qbit **q, int n) {
printf("func8\n");
fflush(stderr);
	qbit *anc[9]; // ancilla
	qbit *nb[58]; // interacting bits
	qbit *res[9];
	qbit *nq0[11];
	qbit *nq1[3];
	qbit *nq2[11];
	nb[0] = q[11];
	nb[1] = q[4];
	nb[2] = q[1];
	nb[3] = q[5];
	nb[4] = q[0];
	nb[5] = q[11];
	nb[6] = q[3];
	nb[7] = q[0];
	nb[8] = q[8];
	nb[9] = q[1];
	nb[10] = q[6];
	nb[11] = q[3];
	nb[12] = q[1];
	nb[13] = q[3];
	nb[14] = q[2];
	nb[15] = q[10];
	nb[16] = q[3];
	nb[17] = q[5];
	nb[18] = q[4];
	nb[19] = q[6];
	nb[20] = q[5];
	nb[21] = q[9];
	nb[22] = q[4];
	nb[23] = q[1];
	nb[24] = q[8];
	nb[25] = q[9];
	nb[26] = q[2];
	nb[27] = q[7];
	nb[28] = q[2];
	nb[29] = q[10];
	nb[30] = q[7];
	nb[31] = q[1];
	nb[32] = q[8];
	nb[33] = q[3];
	nb[34] = q[12];
	nb[35] = q[10];
	nb[36] = q[10];
	nb[37] = q[7];
	nb[38] = q[10];
	nb[39] = q[2];
	nb[40] = q[6];
	nb[41] = q[6];
	nb[42] = q[1];
	nb[43] = q[5];
	nb[44] = q[0];
	nb[45] = q[5];
	nb[46] = q[7];
	nb[47] = q[4];
	nb[48] = q[2];
	nb[49] = q[3];
	nb[50] = q[4];
	nb[51] = q[6];
	nb[52] = q[1];
	nb[53] = q[1];
	nb[54] = q[12];
	nb[55] = q[11];
	nb[56] = q[3];
	nb[57] = q[6];
	res[0] = q[6];
	res[1] = q[4];
	res[2] = q[0];
	res[3] = q[5];
	res[4] = q[2];
	res[5] = q[10];
	res[6] = q[7];
	res[7] = q[9];
	res[8] = q[8];
	// Non-leaf function
	nq0[0] = q[12];
	nq0[1] = q[1];
	nq0[2] = q[9];
	nq0[3] = anc[5];
	nq0[4] = q[5];
	nq0[5] = anc[8];
	nq0[6] = q[2];
	nq0[7] = anc[7];
	nq0[8] = anc[1];
	nq0[9] = q[6];
	nq0[10] = q[8];
	nq1[0] = q[8];
	nq1[1] = q[4];
	nq1[2] = anc[3];
	nq2[0] = q[4];
	nq2[1] = q[7];
	nq2[2] = anc[2];
	nq2[3] = q[10];
	nq2[4] = anc[8];
	nq2[5] = q[6];
	nq2[6] = anc[0];
	nq2[7] = q[5];
	nq2[8] = q[11];
	nq2[9] = anc[7];
	nq2[10] = anc[3];
	Compute (0, 9, 93, 51, 3, 4, 0){
		acquire(9, anc, 58, nb);
		CNOT( q[2], anc[1] );
		CNOT( q[9], anc[5] );
		Toffoli( anc[1], q[7], anc[2] );
		Toffoli( q[3], anc[5], anc[1] );
		Toffoli( q[6], q[5], q[9] );
		CNOT( anc[8], q[7] );
		Toffoli( anc[8], anc[5], q[5] );
		CNOT( q[1], q[5] );
		Toffoli( q[4], q[6], q[1] );
		Toffoli( anc[8], q[4], anc[7] );
		CNOT( q[2], q[10] );
		Toffoli( anc[2], q[1], q[8] );
		func27(nq0, 11);
		CNOT( anc[7], q[4] );
		Toffoli( q[4], anc[5], q[1] );
		CNOT( q[3], q[5] );
		Toffoli( anc[2], anc[0], anc[4] );
		CNOT( q[6], q[3] );
		CNOT( q[1], q[3] );
		Toffoli( anc[2], q[11], anc[4] );
		Toffoli( anc[4], q[1], q[8] );
		Toffoli( q[11], q[3], q[6] );
		Toffoli( anc[7], q[10], anc[1] );
		CNOT( anc[4], anc[8] );
		CNOT( q[3], anc[2] );
		func28(nq1, 3);
		Toffoli( anc[3], anc[1], anc[8] );
		Toffoli( anc[8], anc[2], anc[7] );
		func29(nq2, 11);
		Toffoli( q[10], q[2], q[6] );
		CNOT( anc[2], anc[7] );
		Toffoli( anc[7], anc[6], q[4] );
		CNOT( q[12], anc[2] );
		CNOT( anc[0], anc[5] );
		Toffoli( q[0], q[8], q[1] );
		Toffoli( q[11], anc[5], anc[3] );
		Toffoli( q[5], anc[5], q[0] );
		CNOT( q[2], q[7] );
		Toffoli( anc[4], q[6], anc[1] );
		CNOT( q[10], anc[2] );
		Toffoli( anc[3], anc[5], q[0] );
		CNOT( q[2], anc[1] );
		Toffoli( anc[1], anc[0], q[1] );
		CNOT( q[10], q[7] );
		Toffoli( q[3], anc[4], q[12] );
	}
	Store {
		CNOT( anc[5], res[0] );
		CNOT( q[9], res[1] );
		CNOT( q[6], res[2] );
		CNOT( q[11], res[3] );
		CNOT( q[5], res[4] );
		CNOT( anc[8], res[5] );
		CNOT( q[12], res[6] );
		CNOT( q[2], res[7] );
		CNOT( q[0], res[8] );
	}
	Uncompute(res, 0, anc, 9, 93, 51){
		Toffoli( q[3], anc[4], q[12] );
		CNOT( q[10], q[7] );
		Toffoli( anc[1], anc[0], q[1] );
		CNOT( q[2], anc[1] );
		Toffoli( anc[3], anc[5], q[0] );
		CNOT( q[10], anc[2] );
		Toffoli( anc[4], q[6], anc[1] );
		CNOT( q[2], q[7] );
		Toffoli( q[5], anc[5], q[0] );
		Toffoli( q[11], anc[5], anc[3] );
		Toffoli( q[0], q[8], q[1] );
		CNOT( anc[0], anc[5] );
		CNOT( q[12], anc[2] );
		Toffoli( anc[7], anc[6], q[4] );
		CNOT( anc[2], anc[7] );
		Toffoli( q[10], q[2], q[6] );
		func29R(nq2, 11);
		Toffoli( anc[8], anc[2], anc[7] );
		Toffoli( anc[3], anc[1], anc[8] );
		func28R(nq1, 3);
		CNOT( q[3], anc[2] );
		CNOT( anc[4], anc[8] );
		Toffoli( anc[7], q[10], anc[1] );
		Toffoli( q[11], q[3], q[6] );
		Toffoli( anc[4], q[1], q[8] );
		Toffoli( anc[2], q[11], anc[4] );
		CNOT( q[1], q[3] );
		CNOT( q[6], q[3] );
		Toffoli( anc[2], anc[0], anc[4] );
		CNOT( q[3], q[5] );
		Toffoli( q[4], anc[5], q[1] );
		CNOT( anc[7], q[4] );
		func27R(nq0, 11);
		Toffoli( anc[2], q[1], q[8] );
		CNOT( q[2], q[10] );
		Toffoli( anc[8], q[4], anc[7] );
		Toffoli( q[4], q[6], q[1] );
		CNOT( q[1], q[5] );
		Toffoli( anc[8], anc[5], q[5] );
		CNOT( anc[8], q[7] );
		Toffoli( q[6], q[5], q[9] );
		Toffoli( q[3], anc[5], anc[1] );
		Toffoli( anc[1], q[7], anc[2] );
		CNOT( q[9], anc[5] );
		CNOT( q[2], anc[1] );
	} Free(anc, 9) {}
}
// Function 8 with degree 3
// nq: 13, na: 9, ng: 42
void func8R(qbit **q, int n) {
printf("func8R\n");
fflush(stderr);
	qbit *anc[9]; // ancilla
	qbit *nb[58]; // interacting bits
	qbit *res[9];
	qbit *nq0[11];
	qbit *nq1[3];
	qbit *nq2[11];
	nb[0] = q[11];
	nb[1] = q[4];
	nb[2] = q[1];
	nb[3] = q[5];
	nb[4] = q[0];
	nb[5] = q[11];
	nb[6] = q[3];
	nb[7] = q[0];
	nb[8] = q[8];
	nb[9] = q[1];
	nb[10] = q[6];
	nb[11] = q[3];
	nb[12] = q[1];
	nb[13] = q[3];
	nb[14] = q[2];
	nb[15] = q[10];
	nb[16] = q[3];
	nb[17] = q[5];
	nb[18] = q[4];
	nb[19] = q[6];
	nb[20] = q[5];
	nb[21] = q[9];
	nb[22] = q[4];
	nb[23] = q[1];
	nb[24] = q[8];
	nb[25] = q[9];
	nb[26] = q[2];
	nb[27] = q[7];
	nb[28] = q[2];
	nb[29] = q[10];
	nb[30] = q[7];
	nb[31] = q[1];
	nb[32] = q[8];
	nb[33] = q[3];
	nb[34] = q[12];
	nb[35] = q[10];
	nb[36] = q[10];
	nb[37] = q[7];
	nb[38] = q[10];
	nb[39] = q[2];
	nb[40] = q[6];
	nb[41] = q[6];
	nb[42] = q[1];
	nb[43] = q[5];
	nb[44] = q[0];
	nb[45] = q[5];
	nb[46] = q[7];
	nb[47] = q[4];
	nb[48] = q[2];
	nb[49] = q[3];
	nb[50] = q[4];
	nb[51] = q[6];
	nb[52] = q[1];
	nb[53] = q[1];
	nb[54] = q[12];
	nb[55] = q[11];
	nb[56] = q[3];
	nb[57] = q[6];
	res[0] = q[6];
	res[1] = q[4];
	res[2] = q[0];
	res[3] = q[5];
	res[4] = q[2];
	res[5] = q[10];
	res[6] = q[7];
	res[7] = q[9];
	res[8] = q[8];
	// Non-leaf function
	nq0[0] = q[12];
	nq0[1] = q[1];
	nq0[2] = q[9];
	nq0[3] = anc[5];
	nq0[4] = q[5];
	nq0[5] = anc[8];
	nq0[6] = q[2];
	nq0[7] = anc[7];
	nq0[8] = anc[1];
	nq0[9] = q[6];
	nq0[10] = q[8];
	nq1[0] = q[8];
	nq1[1] = q[4];
	nq1[2] = anc[3];
	nq2[0] = q[4];
	nq2[1] = q[7];
	nq2[2] = anc[2];
	nq2[3] = q[10];
	nq2[4] = anc[8];
	nq2[5] = q[6];
	nq2[6] = anc[0];
	nq2[7] = q[5];
	nq2[8] = q[11];
	nq2[9] = anc[7];
	nq2[10] = anc[3];
	_computeModule(0, 9, 93, 51, 3, 4, 0);
	acquire(9, anc, 58, nb);
	Recompute(res, 0, anc, 9, 93, 51){
		CNOT( q[2], anc[1] );
		CNOT( q[9], anc[5] );
		Toffoli( anc[1], q[7], anc[2] );
		Toffoli( q[3], anc[5], anc[1] );
		Toffoli( q[6], q[5], q[9] );
		CNOT( anc[8], q[7] );
		Toffoli( anc[8], anc[5], q[5] );
		CNOT( q[1], q[5] );
		Toffoli( q[4], q[6], q[1] );
		Toffoli( anc[8], q[4], anc[7] );
		CNOT( q[2], q[10] );
		Toffoli( anc[2], q[1], q[8] );
		func27(nq0, 11);
		CNOT( anc[7], q[4] );
		Toffoli( q[4], anc[5], q[1] );
		CNOT( q[3], q[5] );
		Toffoli( anc[2], anc[0], anc[4] );
		CNOT( q[6], q[3] );
		CNOT( q[1], q[3] );
		Toffoli( anc[2], q[11], anc[4] );
		Toffoli( anc[4], q[1], q[8] );
		Toffoli( q[11], q[3], q[6] );
		Toffoli( anc[7], q[10], anc[1] );
		CNOT( anc[4], anc[8] );
		CNOT( q[3], anc[2] );
		func28(nq1, 3);
		Toffoli( anc[3], anc[1], anc[8] );
		Toffoli( anc[8], anc[2], anc[7] );
		func29(nq2, 11);
		Toffoli( q[10], q[2], q[6] );
		CNOT( anc[2], anc[7] );
		Toffoli( anc[7], anc[6], q[4] );
		CNOT( q[12], anc[2] );
		CNOT( anc[0], anc[5] );
		Toffoli( q[0], q[8], q[1] );
		Toffoli( q[11], anc[5], anc[3] );
		Toffoli( q[5], anc[5], q[0] );
		CNOT( q[2], q[7] );
		Toffoli( anc[4], q[6], anc[1] );
		CNOT( q[10], anc[2] );
		Toffoli( anc[3], anc[5], q[0] );
		CNOT( q[2], anc[1] );
		Toffoli( anc[1], anc[0], q[1] );
		CNOT( q[10], q[7] );
		Toffoli( q[3], anc[4], q[12] );
	}
	Restore {
		CNOT( anc[5], res[0] );
		CNOT( q[9], res[1] );
		CNOT( q[6], res[2] );
		CNOT( q[11], res[3] );
		CNOT( q[5], res[4] );
		CNOT( anc[8], res[5] );
		CNOT( q[12], res[6] );
		CNOT( q[2], res[7] );
		CNOT( q[0], res[8] );
	}
	Unrecompute {
		Toffoli( q[3], anc[4], q[12] );
		CNOT( q[10], q[7] );
		Toffoli( anc[1], anc[0], q[1] );
		CNOT( q[2], anc[1] );
		Toffoli( anc[3], anc[5], q[0] );
		CNOT( q[10], anc[2] );
		Toffoli( anc[4], q[6], anc[1] );
		CNOT( q[2], q[7] );
		Toffoli( q[5], anc[5], q[0] );
		Toffoli( q[11], anc[5], anc[3] );
		Toffoli( q[0], q[8], q[1] );
		CNOT( anc[0], anc[5] );
		CNOT( q[12], anc[2] );
		Toffoli( anc[7], anc[6], q[4] );
		CNOT( anc[2], anc[7] );
		Toffoli( q[10], q[2], q[6] );
		func29R(nq2, 11);
		Toffoli( anc[8], anc[2], anc[7] );
		Toffoli( anc[3], anc[1], anc[8] );
		func28R(nq1, 3);
		CNOT( q[3], anc[2] );
		CNOT( anc[4], anc[8] );
		Toffoli( anc[7], q[10], anc[1] );
		Toffoli( q[11], q[3], q[6] );
		Toffoli( anc[4], q[1], q[8] );
		Toffoli( anc[2], q[11], anc[4] );
		CNOT( q[1], q[3] );
		CNOT( q[6], q[3] );
		Toffoli( anc[2], anc[0], anc[4] );
		CNOT( q[3], q[5] );
		Toffoli( q[4], anc[5], q[1] );
		CNOT( anc[7], q[4] );
		func27R(nq0, 11);
		Toffoli( anc[2], q[1], q[8] );
		CNOT( q[2], q[10] );
		Toffoli( anc[8], q[4], anc[7] );
		Toffoli( q[4], q[6], q[1] );
		CNOT( q[1], q[5] );
		Toffoli( anc[8], anc[5], q[5] );
		CNOT( anc[8], q[7] );
		Toffoli( q[6], q[5], q[9] );
		Toffoli( q[3], anc[5], anc[1] );
		Toffoli( anc[1], q[7], anc[2] );
		CNOT( q[9], anc[5] );
		CNOT( q[2], anc[1] );
	} Refree(anc, 9) {}
}
// Function 7 with degree 4
// nq: 15, na: 5, ng: 4
void func7(qbit **q, int n) {
printf("func7\n");
fflush(stderr);
	qbit *anc[5]; // ancilla
	qbit *nb[5]; // interacting bits
	qbit *res[3];
	qbit *nq0[10];
	qbit *nq1[11];
	qbit *nq2[3];
	qbit *nq3[3];
	nb[0] = q[11];
	nb[1] = q[1];
	nb[2] = q[5];
	nb[3] = q[2];
	nb[4] = q[14];
	res[0] = q[2];
	res[1] = q[7];
	res[2] = q[5];
	// Non-leaf function
	nq0[0] = q[9];
	nq0[1] = q[1];
	nq0[2] = q[2];
	nq0[3] = q[4];
	nq0[4] = anc[3];
	nq0[5] = q[12];
	nq0[6] = q[10];
	nq0[7] = q[7];
	nq0[8] = q[14];
	nq0[9] = q[13];
	nq1[0] = q[11];
	nq1[1] = q[7];
	nq1[2] = q[0];
	nq1[3] = q[6];
	nq1[4] = q[1];
	nq1[5] = q[8];
	nq1[6] = q[4];
	nq1[7] = q[3];
	nq1[8] = q[2];
	nq1[9] = q[5];
	nq1[10] = q[12];
	nq2[0] = q[6];
	nq2[1] = anc[1];
	nq2[2] = anc[4];
	nq3[0] = q[1];
	nq3[1] = q[13];
	nq3[2] = q[6];
	Compute (0, 5, 11, 7, 4, 3, 0){
		acquire(5, anc, 5, nb);
		func26(nq3, 3);
		Toffoli( anc[0], q[1], anc[4] );
		CNOT( q[5], anc[3] );
		func25(nq2, 3);
		CNOT( q[2], q[14] );
		CNOT( q[11], anc[1] );
		func23(nq0, 10);
		func24(nq1, 11);
	}
	Store {
		CNOT( q[7], res[0] );
		CNOT( q[11], res[1] );
		CNOT( q[0], res[2] );
	}
	Uncompute(res, 0, anc, 5, 11, 7){
		func24R(nq1, 11);
		func23R(nq0, 10);
		CNOT( q[11], anc[1] );
		CNOT( q[2], q[14] );
		func25R(nq2, 3);
		CNOT( q[5], anc[3] );
		Toffoli( anc[0], q[1], anc[4] );
		func26R(nq3, 3);
	} Free(anc, 5) {}
}
// Function 7 with degree 4
// nq: 15, na: 5, ng: 4
void func7R(qbit **q, int n) {
printf("func7R\n");
fflush(stderr);
	qbit *anc[5]; // ancilla
	qbit *nb[5]; // interacting bits
	qbit *res[3];
	qbit *nq0[10];
	qbit *nq1[11];
	qbit *nq2[3];
	qbit *nq3[3];
	nb[0] = q[11];
	nb[1] = q[1];
	nb[2] = q[5];
	nb[3] = q[2];
	nb[4] = q[14];
	res[0] = q[2];
	res[1] = q[7];
	res[2] = q[5];
	// Non-leaf function
	nq0[0] = q[9];
	nq0[1] = q[1];
	nq0[2] = q[2];
	nq0[3] = q[4];
	nq0[4] = anc[3];
	nq0[5] = q[12];
	nq0[6] = q[10];
	nq0[7] = q[7];
	nq0[8] = q[14];
	nq0[9] = q[13];
	nq1[0] = q[11];
	nq1[1] = q[7];
	nq1[2] = q[0];
	nq1[3] = q[6];
	nq1[4] = q[1];
	nq1[5] = q[8];
	nq1[6] = q[4];
	nq1[7] = q[3];
	nq1[8] = q[2];
	nq1[9] = q[5];
	nq1[10] = q[12];
	nq2[0] = q[6];
	nq2[1] = anc[1];
	nq2[2] = anc[4];
	nq3[0] = q[1];
	nq3[1] = q[13];
	nq3[2] = q[6];
	_computeModule(0, 5, 11, 7, 4, 3, 0);
	acquire(5, anc, 5, nb);
	Recompute(res, 0, anc, 5, 11, 7){
		func26(nq3, 3);
		Toffoli( anc[0], q[1], anc[4] );
		CNOT( q[5], anc[3] );
		func25(nq2, 3);
		CNOT( q[2], q[14] );
		CNOT( q[11], anc[1] );
		func23(nq0, 10);
		func24(nq1, 11);
	}
	Restore {
		CNOT( q[7], res[0] );
		CNOT( q[11], res[1] );
		CNOT( q[0], res[2] );
	}
	Unrecompute {
		func24R(nq1, 11);
		func23R(nq0, 10);
		CNOT( q[11], anc[1] );
		CNOT( q[2], q[14] );
		func25R(nq2, 3);
		CNOT( q[5], anc[3] );
		Toffoli( anc[0], q[1], anc[4] );
		func26R(nq3, 3);
	} Refree(anc, 5) {}
}
// Function 6 with degree 4
// nq: 15, na: 9, ng: 48
void func6(qbit **q, int n) {
printf("func6\n");
fflush(stderr);
	qbit *anc[9]; // ancilla
	qbit *nb[79]; // interacting bits
	qbit *res[1];
	qbit *nq0[9];
	qbit *nq1[8];
	qbit *nq2[7];
	qbit *nq3[4];
	nb[0] = q[4];
	nb[1] = q[7];
	nb[2] = q[10];
	nb[3] = q[0];
	nb[4] = q[1];
	nb[5] = q[6];
	nb[6] = q[13];
	nb[7] = q[4];
	nb[8] = q[9];
	nb[9] = q[7];
	nb[10] = q[12];
	nb[11] = q[3];
	nb[12] = q[6];
	nb[13] = q[9];
	nb[14] = q[13];
	nb[15] = q[10];
	nb[16] = q[7];
	nb[17] = q[13];
	nb[18] = q[1];
	nb[19] = q[7];
	nb[20] = q[10];
	nb[21] = q[12];
	nb[22] = q[7];
	nb[23] = q[3];
	nb[24] = q[8];
	nb[25] = q[4];
	nb[26] = q[0];
	nb[27] = q[2];
	nb[28] = q[0];
	nb[29] = q[9];
	nb[30] = q[8];
	nb[31] = q[6];
	nb[32] = q[13];
	nb[33] = q[4];
	nb[34] = q[6];
	nb[35] = q[3];
	nb[36] = q[8];
	nb[37] = q[5];
	nb[38] = q[7];
	nb[39] = q[8];
	nb[40] = q[11];
	nb[41] = q[14];
	nb[42] = q[9];
	nb[43] = q[4];
	nb[44] = q[12];
	nb[45] = q[9];
	nb[46] = q[8];
	nb[47] = q[2];
	nb[48] = q[6];
	nb[49] = q[14];
	nb[50] = q[3];
	nb[51] = q[13];
	nb[52] = q[14];
	nb[53] = q[11];
	nb[54] = q[1];
	nb[55] = q[4];
	nb[56] = q[10];
	nb[57] = q[12];
	nb[58] = q[10];
	nb[59] = q[13];
	nb[60] = q[4];
	nb[61] = q[8];
	nb[62] = q[7];
	nb[63] = q[13];
	nb[64] = q[7];
	nb[65] = q[13];
	nb[66] = q[8];
	nb[67] = q[12];
	nb[68] = q[13];
	nb[69] = q[5];
	nb[70] = q[7];
	nb[71] = q[0];
	nb[72] = q[7];
	nb[73] = q[1];
	nb[74] = q[9];
	nb[75] = q[8];
	nb[76] = q[14];
	nb[77] = q[5];
	nb[78] = q[1];
	res[0] = q[8];
	// Non-leaf function
	nq0[0] = anc[5];
	nq0[1] = anc[6];
	nq0[2] = q[13];
	nq0[3] = q[3];
	nq0[4] = q[6];
	nq0[5] = anc[8];
	nq0[6] = anc[0];
	nq0[7] = anc[2];
	nq0[8] = anc[3];
	nq1[0] = anc[8];
	nq1[1] = anc[4];
	nq1[2] = anc[2];
	nq1[3] = q[4];
	nq1[4] = anc[0];
	nq1[5] = q[11];
	nq1[6] = anc[1];
	nq1[7] = q[0];
	nq2[0] = q[7];
	nq2[1] = q[12];
	nq2[2] = anc[1];
	nq2[3] = anc[7];
	nq2[4] = q[10];
	nq2[5] = q[9];
	nq2[6] = q[14];
	nq3[0] = q[4];
	nq3[1] = q[13];
	nq3[2] = q[7];
	nq3[3] = q[1];
	Compute (0, 9, 97, 49, 4, 3, 0){
		acquire(9, anc, 79, nb);
		Toffoli( q[4], q[9], q[7] );
		Toffoli( anc[3], anc[0], q[14] );
		CNOT( q[7], anc[5] );
		func19(nq0, 9);
		func22(nq3, 4);
		Toffoli( anc[2], q[10], q[0] );
		CNOT( anc[7], q[6] );
		CNOT( anc[7], q[10] );
		CNOT( q[13], q[10] );
		Toffoli( q[7], anc[1], anc[2] );
		CNOT( q[12], q[9] );
		CNOT( q[12], q[3] );
		Toffoli( anc[1], q[9], anc[4] );
		CNOT( q[7], q[0] );
		CNOT( q[0], q[2] );
		CNOT( q[4], anc[5] );
		CNOT( q[9], q[8] );
		Toffoli( anc[8], anc[4], q[12] );
		CNOT( q[7], anc[7] );
		Toffoli( q[14], q[3], anc[2] );
		CNOT( q[6], anc[6] );
		Toffoli( anc[6], anc[3], q[1] );
		CNOT( q[13], q[4] );
		Toffoli( q[6], anc[1], anc[3] );
		Toffoli( anc[0], anc[5], q[4] );
		CNOT( q[12], q[10] );
		CNOT( q[3], q[8] );
		CNOT( anc[8], q[8] );
		Toffoli( q[7], anc[4], q[13] );
		func21(nq2, 7);
		Toffoli( anc[1], q[13], q[1] );
		CNOT( anc[2], q[6] );
		CNOT( q[11], q[14] );
		Toffoli( q[13], anc[6], q[14] );
		Toffoli( anc[1], q[8], q[2] );
		Toffoli( q[5], q[7], q[8] );
		Toffoli( q[9], anc[4], q[4] );
		Toffoli( q[0], q[9], q[8] );
		Toffoli( anc[2], anc[3], anc[4] );
		CNOT( q[12], q[7] );
		Toffoli( q[13], q[5], anc[3] );
		CNOT( anc[5], anc[6] );
		CNOT( q[7], anc[0] );
		func20(nq1, 8);
		Toffoli( q[3], anc[5], q[8] );
		Toffoli( anc[5], q[11], q[1] );
		Toffoli( q[4], q[10], anc[2] );
		CNOT( q[1], anc[2] );
		Toffoli( q[6], q[13], anc[2] );
		Toffoli( q[8], q[7], q[13] );
		Toffoli( q[13], q[4], anc[8] );
		CNOT( q[5], q[1] );
	}
	Store {
		CNOT( anc[0], res[0] );
	}
	Uncompute(res, 0, anc, 9, 97, 49){
		CNOT( q[5], q[1] );
		Toffoli( q[13], q[4], anc[8] );
		Toffoli( q[8], q[7], q[13] );
		Toffoli( q[6], q[13], anc[2] );
		CNOT( q[1], anc[2] );
		Toffoli( q[4], q[10], anc[2] );
		Toffoli( anc[5], q[11], q[1] );
		Toffoli( q[3], anc[5], q[8] );
		func20R(nq1, 8);
		CNOT( q[7], anc[0] );
		CNOT( anc[5], anc[6] );
		Toffoli( q[13], q[5], anc[3] );
		CNOT( q[12], q[7] );
		Toffoli( anc[2], anc[3], anc[4] );
		Toffoli( q[0], q[9], q[8] );
		Toffoli( q[9], anc[4], q[4] );
		Toffoli( q[5], q[7], q[8] );
		Toffoli( anc[1], q[8], q[2] );
		Toffoli( q[13], anc[6], q[14] );
		CNOT( q[11], q[14] );
		CNOT( anc[2], q[6] );
		Toffoli( anc[1], q[13], q[1] );
		func21R(nq2, 7);
		Toffoli( q[7], anc[4], q[13] );
		CNOT( anc[8], q[8] );
		CNOT( q[3], q[8] );
		CNOT( q[12], q[10] );
		Toffoli( anc[0], anc[5], q[4] );
		Toffoli( q[6], anc[1], anc[3] );
		CNOT( q[13], q[4] );
		Toffoli( anc[6], anc[3], q[1] );
		CNOT( q[6], anc[6] );
		Toffoli( q[14], q[3], anc[2] );
		CNOT( q[7], anc[7] );
		Toffoli( anc[8], anc[4], q[12] );
		CNOT( q[9], q[8] );
		CNOT( q[4], anc[5] );
		CNOT( q[0], q[2] );
		CNOT( q[7], q[0] );
		Toffoli( anc[1], q[9], anc[4] );
		CNOT( q[12], q[3] );
		CNOT( q[12], q[9] );
		Toffoli( q[7], anc[1], anc[2] );
		CNOT( q[13], q[10] );
		CNOT( anc[7], q[10] );
		CNOT( anc[7], q[6] );
		Toffoli( anc[2], q[10], q[0] );
		func22R(nq3, 4);
		func19R(nq0, 9);
		CNOT( q[7], anc[5] );
		Toffoli( anc[3], anc[0], q[14] );
		Toffoli( q[4], q[9], q[7] );
	} Free(anc, 9) {}
}
// Function 6 with degree 4
// nq: 15, na: 9, ng: 48
void func6R(qbit **q, int n) {
printf("func6R\n");
fflush(stderr);
	qbit *anc[9]; // ancilla
	qbit *nb[79]; // interacting bits
	qbit *res[1];
	qbit *nq0[9];
	qbit *nq1[8];
	qbit *nq2[7];
	qbit *nq3[4];
	nb[0] = q[4];
	nb[1] = q[7];
	nb[2] = q[10];
	nb[3] = q[0];
	nb[4] = q[1];
	nb[5] = q[6];
	nb[6] = q[13];
	nb[7] = q[4];
	nb[8] = q[9];
	nb[9] = q[7];
	nb[10] = q[12];
	nb[11] = q[3];
	nb[12] = q[6];
	nb[13] = q[9];
	nb[14] = q[13];
	nb[15] = q[10];
	nb[16] = q[7];
	nb[17] = q[13];
	nb[18] = q[1];
	nb[19] = q[7];
	nb[20] = q[10];
	nb[21] = q[12];
	nb[22] = q[7];
	nb[23] = q[3];
	nb[24] = q[8];
	nb[25] = q[4];
	nb[26] = q[0];
	nb[27] = q[2];
	nb[28] = q[0];
	nb[29] = q[9];
	nb[30] = q[8];
	nb[31] = q[6];
	nb[32] = q[13];
	nb[33] = q[4];
	nb[34] = q[6];
	nb[35] = q[3];
	nb[36] = q[8];
	nb[37] = q[5];
	nb[38] = q[7];
	nb[39] = q[8];
	nb[40] = q[11];
	nb[41] = q[14];
	nb[42] = q[9];
	nb[43] = q[4];
	nb[44] = q[12];
	nb[45] = q[9];
	nb[46] = q[8];
	nb[47] = q[2];
	nb[48] = q[6];
	nb[49] = q[14];
	nb[50] = q[3];
	nb[51] = q[13];
	nb[52] = q[14];
	nb[53] = q[11];
	nb[54] = q[1];
	nb[55] = q[4];
	nb[56] = q[10];
	nb[57] = q[12];
	nb[58] = q[10];
	nb[59] = q[13];
	nb[60] = q[4];
	nb[61] = q[8];
	nb[62] = q[7];
	nb[63] = q[13];
	nb[64] = q[7];
	nb[65] = q[13];
	nb[66] = q[8];
	nb[67] = q[12];
	nb[68] = q[13];
	nb[69] = q[5];
	nb[70] = q[7];
	nb[71] = q[0];
	nb[72] = q[7];
	nb[73] = q[1];
	nb[74] = q[9];
	nb[75] = q[8];
	nb[76] = q[14];
	nb[77] = q[5];
	nb[78] = q[1];
	res[0] = q[8];
	// Non-leaf function
	nq0[0] = anc[5];
	nq0[1] = anc[6];
	nq0[2] = q[13];
	nq0[3] = q[3];
	nq0[4] = q[6];
	nq0[5] = anc[8];
	nq0[6] = anc[0];
	nq0[7] = anc[2];
	nq0[8] = anc[3];
	nq1[0] = anc[8];
	nq1[1] = anc[4];
	nq1[2] = anc[2];
	nq1[3] = q[4];
	nq1[4] = anc[0];
	nq1[5] = q[11];
	nq1[6] = anc[1];
	nq1[7] = q[0];
	nq2[0] = q[7];
	nq2[1] = q[12];
	nq2[2] = anc[1];
	nq2[3] = anc[7];
	nq2[4] = q[10];
	nq2[5] = q[9];
	nq2[6] = q[14];
	nq3[0] = q[4];
	nq3[1] = q[13];
	nq3[2] = q[7];
	nq3[3] = q[1];
	_computeModule(0, 9, 97, 49, 4, 3, 0);
	acquire(9, anc, 79, nb);
	Recompute(res, 0, anc, 9, 97, 49){
		Toffoli( q[4], q[9], q[7] );
		Toffoli( anc[3], anc[0], q[14] );
		CNOT( q[7], anc[5] );
		func19(nq0, 9);
		func22(nq3, 4);
		Toffoli( anc[2], q[10], q[0] );
		CNOT( anc[7], q[6] );
		CNOT( anc[7], q[10] );
		CNOT( q[13], q[10] );
		Toffoli( q[7], anc[1], anc[2] );
		CNOT( q[12], q[9] );
		CNOT( q[12], q[3] );
		Toffoli( anc[1], q[9], anc[4] );
		CNOT( q[7], q[0] );
		CNOT( q[0], q[2] );
		CNOT( q[4], anc[5] );
		CNOT( q[9], q[8] );
		Toffoli( anc[8], anc[4], q[12] );
		CNOT( q[7], anc[7] );
		Toffoli( q[14], q[3], anc[2] );
		CNOT( q[6], anc[6] );
		Toffoli( anc[6], anc[3], q[1] );
		CNOT( q[13], q[4] );
		Toffoli( q[6], anc[1], anc[3] );
		Toffoli( anc[0], anc[5], q[4] );
		CNOT( q[12], q[10] );
		CNOT( q[3], q[8] );
		CNOT( anc[8], q[8] );
		Toffoli( q[7], anc[4], q[13] );
		func21(nq2, 7);
		Toffoli( anc[1], q[13], q[1] );
		CNOT( anc[2], q[6] );
		CNOT( q[11], q[14] );
		Toffoli( q[13], anc[6], q[14] );
		Toffoli( anc[1], q[8], q[2] );
		Toffoli( q[5], q[7], q[8] );
		Toffoli( q[9], anc[4], q[4] );
		Toffoli( q[0], q[9], q[8] );
		Toffoli( anc[2], anc[3], anc[4] );
		CNOT( q[12], q[7] );
		Toffoli( q[13], q[5], anc[3] );
		CNOT( anc[5], anc[6] );
		CNOT( q[7], anc[0] );
		func20(nq1, 8);
		Toffoli( q[3], anc[5], q[8] );
		Toffoli( anc[5], q[11], q[1] );
		Toffoli( q[4], q[10], anc[2] );
		CNOT( q[1], anc[2] );
		Toffoli( q[6], q[13], anc[2] );
		Toffoli( q[8], q[7], q[13] );
		Toffoli( q[13], q[4], anc[8] );
		CNOT( q[5], q[1] );
	}
	Restore {
		CNOT( anc[0], res[0] );
	}
	Unrecompute {
		CNOT( q[5], q[1] );
		Toffoli( q[13], q[4], anc[8] );
		Toffoli( q[8], q[7], q[13] );
		Toffoli( q[6], q[13], anc[2] );
		CNOT( q[1], anc[2] );
		Toffoli( q[4], q[10], anc[2] );
		Toffoli( anc[5], q[11], q[1] );
		Toffoli( q[3], anc[5], q[8] );
		func20R(nq1, 8);
		CNOT( q[7], anc[0] );
		CNOT( anc[5], anc[6] );
		Toffoli( q[13], q[5], anc[3] );
		CNOT( q[12], q[7] );
		Toffoli( anc[2], anc[3], anc[4] );
		Toffoli( q[0], q[9], q[8] );
		Toffoli( q[9], anc[4], q[4] );
		Toffoli( q[5], q[7], q[8] );
		Toffoli( anc[1], q[8], q[2] );
		Toffoli( q[13], anc[6], q[14] );
		CNOT( q[11], q[14] );
		CNOT( anc[2], q[6] );
		Toffoli( anc[1], q[13], q[1] );
		func21R(nq2, 7);
		Toffoli( q[7], anc[4], q[13] );
		CNOT( anc[8], q[8] );
		CNOT( q[3], q[8] );
		CNOT( q[12], q[10] );
		Toffoli( anc[0], anc[5], q[4] );
		Toffoli( q[6], anc[1], anc[3] );
		CNOT( q[13], q[4] );
		Toffoli( anc[6], anc[3], q[1] );
		CNOT( q[6], anc[6] );
		Toffoli( q[14], q[3], anc[2] );
		CNOT( q[7], anc[7] );
		Toffoli( anc[8], anc[4], q[12] );
		CNOT( q[9], q[8] );
		CNOT( q[4], anc[5] );
		CNOT( q[0], q[2] );
		CNOT( q[7], q[0] );
		Toffoli( anc[1], q[9], anc[4] );
		CNOT( q[12], q[3] );
		CNOT( q[12], q[9] );
		Toffoli( q[7], anc[1], anc[2] );
		CNOT( q[13], q[10] );
		CNOT( anc[7], q[10] );
		CNOT( anc[7], q[6] );
		Toffoli( anc[2], q[10], q[0] );
		func22R(nq3, 4);
		func19R(nq0, 9);
		CNOT( q[7], anc[5] );
		Toffoli( anc[3], anc[0], q[14] );
		Toffoli( q[4], q[9], q[7] );
	} Refree(anc, 9) {}
}
// Function 5 with degree 4
// nq: 9, na: 6, ng: 56
void func5(qbit **q, int n) {
printf("func5\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[91]; // interacting bits
	qbit *res[5];
	qbit *nq0[4];
	qbit *nq1[9];
	qbit *nq2[7];
	qbit *nq3[14];
	nb[0] = q[7];
	nb[1] = q[2];
	nb[2] = q[3];
	nb[3] = q[4];
	nb[4] = q[4];
	nb[5] = q[2];
	nb[6] = q[7];
	nb[7] = q[7];
	nb[8] = q[2];
	nb[9] = q[8];
	nb[10] = q[4];
	nb[11] = q[1];
	nb[12] = q[1];
	nb[13] = q[6];
	nb[14] = q[2];
	nb[15] = q[3];
	nb[16] = q[1];
	nb[17] = q[8];
	nb[18] = q[4];
	nb[19] = q[5];
	nb[20] = q[8];
	nb[21] = q[5];
	nb[22] = q[7];
	nb[23] = q[6];
	nb[24] = q[2];
	nb[25] = q[0];
	nb[26] = q[3];
	nb[27] = q[8];
	nb[28] = q[0];
	nb[29] = q[0];
	nb[30] = q[8];
	nb[31] = q[5];
	nb[32] = q[5];
	nb[33] = q[8];
	nb[34] = q[7];
	nb[35] = q[3];
	nb[36] = q[5];
	nb[37] = q[6];
	nb[38] = q[1];
	nb[39] = q[2];
	nb[40] = q[1];
	nb[41] = q[4];
	nb[42] = q[0];
	nb[43] = q[5];
	nb[44] = q[1];
	nb[45] = q[3];
	nb[46] = q[3];
	nb[47] = q[5];
	nb[48] = q[0];
	nb[49] = q[2];
	nb[50] = q[7];
	nb[51] = q[6];
	nb[52] = q[2];
	nb[53] = q[7];
	nb[54] = q[2];
	nb[55] = q[6];
	nb[56] = q[7];
	nb[57] = q[5];
	nb[58] = q[6];
	nb[59] = q[5];
	nb[60] = q[1];
	nb[61] = q[8];
	nb[62] = q[7];
	nb[63] = q[0];
	nb[64] = q[6];
	nb[65] = q[5];
	nb[66] = q[8];
	nb[67] = q[5];
	nb[68] = q[0];
	nb[69] = q[8];
	nb[70] = q[1];
	nb[71] = q[3];
	nb[72] = q[5];
	nb[73] = q[2];
	nb[74] = q[3];
	nb[75] = q[1];
	nb[76] = q[3];
	nb[77] = q[8];
	nb[78] = q[0];
	nb[79] = q[7];
	nb[80] = q[8];
	nb[81] = q[8];
	nb[82] = q[3];
	nb[83] = q[1];
	nb[84] = q[8];
	nb[85] = q[6];
	nb[86] = q[1];
	nb[87] = q[5];
	nb[88] = q[4];
	nb[89] = q[5];
	nb[90] = q[4];
	res[0] = q[3];
	res[1] = q[8];
	res[2] = q[2];
	res[3] = q[7];
	res[4] = q[0];
	// Non-leaf function
	nq0[0] = anc[0];
	nq0[1] = q[4];
	nq0[2] = anc[3];
	nq0[3] = anc[5];
	nq1[0] = q[6];
	nq1[1] = anc[4];
	nq1[2] = q[4];
	nq1[3] = q[0];
	nq1[4] = q[7];
	nq1[5] = q[5];
	nq1[6] = anc[5];
	nq1[7] = q[1];
	nq1[8] = q[3];
	nq2[0] = q[3];
	nq2[1] = q[1];
	nq2[2] = q[6];
	nq2[3] = anc[5];
	nq2[4] = q[4];
	nq2[5] = anc[4];
	nq2[6] = q[2];
	nq3[0] = q[3];
	nq3[1] = q[7];
	nq3[2] = anc[4];
	nq3[3] = anc[0];
	nq3[4] = anc[2];
	nq3[5] = q[2];
	nq3[6] = q[0];
	nq3[7] = anc[1];
	nq3[8] = q[1];
	nq3[9] = q[8];
	nq3[10] = q[4];
	nq3[11] = anc[5];
	nq3[12] = q[5];
	nq3[13] = q[6];
	Compute (0, 6, 117, 61, 4, 3, 0){
		acquire(6, anc, 91, nb);
		Toffoli( anc[2], q[1], q[8] );
		Toffoli( anc[2], q[8], q[3] );
		func16(nq1, 9);
		CNOT( q[4], anc[1] );
		CNOT( q[6], q[2] );
		Toffoli( anc[1], anc[4], q[1] );
		Toffoli( q[3], anc[3], q[1] );
		Toffoli( anc[1], anc[5], q[8] );
		func18(nq3, 14);
		CNOT( q[5], anc[5] );
		CNOT( anc[1], q[2] );
		CNOT( q[2], q[0] );
		Toffoli( q[5], q[8], q[7] );
		CNOT( q[5], q[4] );
		func15(nq0, 4);
		Toffoli( q[1], q[4], q[0] );
		Toffoli( q[8], q[6], q[1] );
		Toffoli( q[0], q[8], q[5] );
		Toffoli( q[2], q[3], q[1] );
		Toffoli( anc[5], q[6], q[5] );
		Toffoli( q[0], q[7], q[8] );
		Toffoli( q[2], anc[3], q[7] );
		Toffoli( q[8], q[5], anc[0] );
		Toffoli( anc[3], q[3], anc[5] );
		CNOT( q[5], anc[2] );
		Toffoli( q[0], anc[5], q[2] );
		func17(nq2, 7);
		CNOT( anc[4], q[1] );
		CNOT( q[6], q[5] );
		Toffoli( anc[2], q[3], q[8] );
		CNOT( anc[4], anc[1] );
		CNOT( anc[4], anc[2] );
		CNOT( q[3], anc[0] );
		CNOT( q[8], anc[4] );
		CNOT( q[3], anc[1] );
		Toffoli( anc[5], q[0], q[8] );
		CNOT( anc[3], q[0] );
		Toffoli( q[8], q[4], q[1] );
		Toffoli( q[7], anc[5], q[2] );
		CNOT( q[7], q[2] );
		CNOT( q[3], q[5] );
		CNOT( q[3], q[5] );
		Toffoli( anc[1], q[7], q[0] );
		CNOT( anc[0], q[4] );
		Toffoli( anc[1], q[7], anc[3] );
		CNOT( q[1], anc[1] );
		Toffoli( q[6], anc[4], anc[3] );
		Toffoli( anc[4], q[5], q[7] );
		Toffoli( q[2], anc[0], anc[1] );
		Toffoli( q[6], anc[2], q[7] );
		CNOT( anc[5], q[3] );
		CNOT( anc[4], q[2] );
		CNOT( anc[0], q[7] );
		CNOT( anc[3], q[5] );
		Toffoli( q[8], q[4], q[5] );
		Toffoli( anc[3], q[5], q[4] );
		CNOT( anc[3], anc[5] );
		Toffoli( anc[4], anc[2], q[1] );
		CNOT( anc[0], q[6] );
		Toffoli( anc[3], q[1], q[6] );
	}
	Store {
		CNOT( q[4], res[0] );
		CNOT( anc[1], res[1] );
		CNOT( q[7], res[2] );
		CNOT( q[5], res[3] );
		CNOT( anc[5], res[4] );
	}
	Uncompute(res, 0, anc, 6, 117, 61){
		Toffoli( anc[3], q[1], q[6] );
		CNOT( anc[0], q[6] );
		Toffoli( anc[4], anc[2], q[1] );
		CNOT( anc[3], anc[5] );
		Toffoli( anc[3], q[5], q[4] );
		Toffoli( q[8], q[4], q[5] );
		CNOT( anc[3], q[5] );
		CNOT( anc[0], q[7] );
		CNOT( anc[4], q[2] );
		CNOT( anc[5], q[3] );
		Toffoli( q[6], anc[2], q[7] );
		Toffoli( q[2], anc[0], anc[1] );
		Toffoli( anc[4], q[5], q[7] );
		Toffoli( q[6], anc[4], anc[3] );
		CNOT( q[1], anc[1] );
		Toffoli( anc[1], q[7], anc[3] );
		CNOT( anc[0], q[4] );
		Toffoli( anc[1], q[7], q[0] );
		CNOT( q[3], q[5] );
		CNOT( q[3], q[5] );
		CNOT( q[7], q[2] );
		Toffoli( q[7], anc[5], q[2] );
		Toffoli( q[8], q[4], q[1] );
		CNOT( anc[3], q[0] );
		Toffoli( anc[5], q[0], q[8] );
		CNOT( q[3], anc[1] );
		CNOT( q[8], anc[4] );
		CNOT( q[3], anc[0] );
		CNOT( anc[4], anc[2] );
		CNOT( anc[4], anc[1] );
		Toffoli( anc[2], q[3], q[8] );
		CNOT( q[6], q[5] );
		CNOT( anc[4], q[1] );
		func17R(nq2, 7);
		Toffoli( q[0], anc[5], q[2] );
		CNOT( q[5], anc[2] );
		Toffoli( anc[3], q[3], anc[5] );
		Toffoli( q[8], q[5], anc[0] );
		Toffoli( q[2], anc[3], q[7] );
		Toffoli( q[0], q[7], q[8] );
		Toffoli( anc[5], q[6], q[5] );
		Toffoli( q[2], q[3], q[1] );
		Toffoli( q[0], q[8], q[5] );
		Toffoli( q[8], q[6], q[1] );
		Toffoli( q[1], q[4], q[0] );
		func15R(nq0, 4);
		CNOT( q[5], q[4] );
		Toffoli( q[5], q[8], q[7] );
		CNOT( q[2], q[0] );
		CNOT( anc[1], q[2] );
		CNOT( q[5], anc[5] );
		func18R(nq3, 14);
		Toffoli( anc[1], anc[5], q[8] );
		Toffoli( q[3], anc[3], q[1] );
		Toffoli( anc[1], anc[4], q[1] );
		CNOT( q[6], q[2] );
		CNOT( q[4], anc[1] );
		func16R(nq1, 9);
		Toffoli( anc[2], q[8], q[3] );
		Toffoli( anc[2], q[1], q[8] );
	} Free(anc, 6) {}
}
// Function 5 with degree 4
// nq: 9, na: 6, ng: 56
void func5R(qbit **q, int n) {
printf("func5R\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[91]; // interacting bits
	qbit *res[5];
	qbit *nq0[4];
	qbit *nq1[9];
	qbit *nq2[7];
	qbit *nq3[14];
	nb[0] = q[7];
	nb[1] = q[2];
	nb[2] = q[3];
	nb[3] = q[4];
	nb[4] = q[4];
	nb[5] = q[2];
	nb[6] = q[7];
	nb[7] = q[7];
	nb[8] = q[2];
	nb[9] = q[8];
	nb[10] = q[4];
	nb[11] = q[1];
	nb[12] = q[1];
	nb[13] = q[6];
	nb[14] = q[2];
	nb[15] = q[3];
	nb[16] = q[1];
	nb[17] = q[8];
	nb[18] = q[4];
	nb[19] = q[5];
	nb[20] = q[8];
	nb[21] = q[5];
	nb[22] = q[7];
	nb[23] = q[6];
	nb[24] = q[2];
	nb[25] = q[0];
	nb[26] = q[3];
	nb[27] = q[8];
	nb[28] = q[0];
	nb[29] = q[0];
	nb[30] = q[8];
	nb[31] = q[5];
	nb[32] = q[5];
	nb[33] = q[8];
	nb[34] = q[7];
	nb[35] = q[3];
	nb[36] = q[5];
	nb[37] = q[6];
	nb[38] = q[1];
	nb[39] = q[2];
	nb[40] = q[1];
	nb[41] = q[4];
	nb[42] = q[0];
	nb[43] = q[5];
	nb[44] = q[1];
	nb[45] = q[3];
	nb[46] = q[3];
	nb[47] = q[5];
	nb[48] = q[0];
	nb[49] = q[2];
	nb[50] = q[7];
	nb[51] = q[6];
	nb[52] = q[2];
	nb[53] = q[7];
	nb[54] = q[2];
	nb[55] = q[6];
	nb[56] = q[7];
	nb[57] = q[5];
	nb[58] = q[6];
	nb[59] = q[5];
	nb[60] = q[1];
	nb[61] = q[8];
	nb[62] = q[7];
	nb[63] = q[0];
	nb[64] = q[6];
	nb[65] = q[5];
	nb[66] = q[8];
	nb[67] = q[5];
	nb[68] = q[0];
	nb[69] = q[8];
	nb[70] = q[1];
	nb[71] = q[3];
	nb[72] = q[5];
	nb[73] = q[2];
	nb[74] = q[3];
	nb[75] = q[1];
	nb[76] = q[3];
	nb[77] = q[8];
	nb[78] = q[0];
	nb[79] = q[7];
	nb[80] = q[8];
	nb[81] = q[8];
	nb[82] = q[3];
	nb[83] = q[1];
	nb[84] = q[8];
	nb[85] = q[6];
	nb[86] = q[1];
	nb[87] = q[5];
	nb[88] = q[4];
	nb[89] = q[5];
	nb[90] = q[4];
	res[0] = q[3];
	res[1] = q[8];
	res[2] = q[2];
	res[3] = q[7];
	res[4] = q[0];
	// Non-leaf function
	nq0[0] = anc[0];
	nq0[1] = q[4];
	nq0[2] = anc[3];
	nq0[3] = anc[5];
	nq1[0] = q[6];
	nq1[1] = anc[4];
	nq1[2] = q[4];
	nq1[3] = q[0];
	nq1[4] = q[7];
	nq1[5] = q[5];
	nq1[6] = anc[5];
	nq1[7] = q[1];
	nq1[8] = q[3];
	nq2[0] = q[3];
	nq2[1] = q[1];
	nq2[2] = q[6];
	nq2[3] = anc[5];
	nq2[4] = q[4];
	nq2[5] = anc[4];
	nq2[6] = q[2];
	nq3[0] = q[3];
	nq3[1] = q[7];
	nq3[2] = anc[4];
	nq3[3] = anc[0];
	nq3[4] = anc[2];
	nq3[5] = q[2];
	nq3[6] = q[0];
	nq3[7] = anc[1];
	nq3[8] = q[1];
	nq3[9] = q[8];
	nq3[10] = q[4];
	nq3[11] = anc[5];
	nq3[12] = q[5];
	nq3[13] = q[6];
	_computeModule(0, 6, 117, 61, 4, 3, 0);
	acquire(6, anc, 91, nb);
	Recompute(res, 0, anc, 6, 117, 61){
		Toffoli( anc[2], q[1], q[8] );
		Toffoli( anc[2], q[8], q[3] );
		func16(nq1, 9);
		CNOT( q[4], anc[1] );
		CNOT( q[6], q[2] );
		Toffoli( anc[1], anc[4], q[1] );
		Toffoli( q[3], anc[3], q[1] );
		Toffoli( anc[1], anc[5], q[8] );
		func18(nq3, 14);
		CNOT( q[5], anc[5] );
		CNOT( anc[1], q[2] );
		CNOT( q[2], q[0] );
		Toffoli( q[5], q[8], q[7] );
		CNOT( q[5], q[4] );
		func15(nq0, 4);
		Toffoli( q[1], q[4], q[0] );
		Toffoli( q[8], q[6], q[1] );
		Toffoli( q[0], q[8], q[5] );
		Toffoli( q[2], q[3], q[1] );
		Toffoli( anc[5], q[6], q[5] );
		Toffoli( q[0], q[7], q[8] );
		Toffoli( q[2], anc[3], q[7] );
		Toffoli( q[8], q[5], anc[0] );
		Toffoli( anc[3], q[3], anc[5] );
		CNOT( q[5], anc[2] );
		Toffoli( q[0], anc[5], q[2] );
		func17(nq2, 7);
		CNOT( anc[4], q[1] );
		CNOT( q[6], q[5] );
		Toffoli( anc[2], q[3], q[8] );
		CNOT( anc[4], anc[1] );
		CNOT( anc[4], anc[2] );
		CNOT( q[3], anc[0] );
		CNOT( q[8], anc[4] );
		CNOT( q[3], anc[1] );
		Toffoli( anc[5], q[0], q[8] );
		CNOT( anc[3], q[0] );
		Toffoli( q[8], q[4], q[1] );
		Toffoli( q[7], anc[5], q[2] );
		CNOT( q[7], q[2] );
		CNOT( q[3], q[5] );
		CNOT( q[3], q[5] );
		Toffoli( anc[1], q[7], q[0] );
		CNOT( anc[0], q[4] );
		Toffoli( anc[1], q[7], anc[3] );
		CNOT( q[1], anc[1] );
		Toffoli( q[6], anc[4], anc[3] );
		Toffoli( anc[4], q[5], q[7] );
		Toffoli( q[2], anc[0], anc[1] );
		Toffoli( q[6], anc[2], q[7] );
		CNOT( anc[5], q[3] );
		CNOT( anc[4], q[2] );
		CNOT( anc[0], q[7] );
		CNOT( anc[3], q[5] );
		Toffoli( q[8], q[4], q[5] );
		Toffoli( anc[3], q[5], q[4] );
		CNOT( anc[3], anc[5] );
		Toffoli( anc[4], anc[2], q[1] );
		CNOT( anc[0], q[6] );
		Toffoli( anc[3], q[1], q[6] );
	}
	Restore {
		CNOT( q[4], res[0] );
		CNOT( anc[1], res[1] );
		CNOT( q[7], res[2] );
		CNOT( q[5], res[3] );
		CNOT( anc[5], res[4] );
	}
	Unrecompute {
		Toffoli( anc[3], q[1], q[6] );
		CNOT( anc[0], q[6] );
		Toffoli( anc[4], anc[2], q[1] );
		CNOT( anc[3], anc[5] );
		Toffoli( anc[3], q[5], q[4] );
		Toffoli( q[8], q[4], q[5] );
		CNOT( anc[3], q[5] );
		CNOT( anc[0], q[7] );
		CNOT( anc[4], q[2] );
		CNOT( anc[5], q[3] );
		Toffoli( q[6], anc[2], q[7] );
		Toffoli( q[2], anc[0], anc[1] );
		Toffoli( anc[4], q[5], q[7] );
		Toffoli( q[6], anc[4], anc[3] );
		CNOT( q[1], anc[1] );
		Toffoli( anc[1], q[7], anc[3] );
		CNOT( anc[0], q[4] );
		Toffoli( anc[1], q[7], q[0] );
		CNOT( q[3], q[5] );
		CNOT( q[3], q[5] );
		CNOT( q[7], q[2] );
		Toffoli( q[7], anc[5], q[2] );
		Toffoli( q[8], q[4], q[1] );
		CNOT( anc[3], q[0] );
		Toffoli( anc[5], q[0], q[8] );
		CNOT( q[3], anc[1] );
		CNOT( q[8], anc[4] );
		CNOT( q[3], anc[0] );
		CNOT( anc[4], anc[2] );
		CNOT( anc[4], anc[1] );
		Toffoli( anc[2], q[3], q[8] );
		CNOT( q[6], q[5] );
		CNOT( anc[4], q[1] );
		func17R(nq2, 7);
		Toffoli( q[0], anc[5], q[2] );
		CNOT( q[5], anc[2] );
		Toffoli( anc[3], q[3], anc[5] );
		Toffoli( q[8], q[5], anc[0] );
		Toffoli( q[2], anc[3], q[7] );
		Toffoli( q[0], q[7], q[8] );
		Toffoli( anc[5], q[6], q[5] );
		Toffoli( q[2], q[3], q[1] );
		Toffoli( q[0], q[8], q[5] );
		Toffoli( q[8], q[6], q[1] );
		Toffoli( q[1], q[4], q[0] );
		func15R(nq0, 4);
		CNOT( q[5], q[4] );
		Toffoli( q[5], q[8], q[7] );
		CNOT( q[2], q[0] );
		CNOT( anc[1], q[2] );
		CNOT( q[5], anc[5] );
		func18R(nq3, 14);
		Toffoli( anc[1], anc[5], q[8] );
		Toffoli( q[3], anc[3], q[1] );
		Toffoli( anc[1], anc[4], q[1] );
		CNOT( q[6], q[2] );
		CNOT( q[4], anc[1] );
		func16R(nq1, 9);
		Toffoli( anc[2], q[8], q[3] );
		Toffoli( anc[2], q[1], q[8] );
	} Refree(anc, 6) {}
}
// Function 4 with degree 3
// nq: 8, na: 4, ng: 12
void func4(qbit **q, int n) {
printf("func4\n");
fflush(stderr);
	qbit *anc[4]; // ancilla
	qbit *nb[21]; // interacting bits
	qbit *res[2];
	qbit *nq0[7];
	qbit *nq1[12];
	qbit *nq2[7];
	nb[0] = q[7];
	nb[1] = q[3];
	nb[2] = q[0];
	nb[3] = q[7];
	nb[4] = q[5];
	nb[5] = q[6];
	nb[6] = q[6];
	nb[7] = q[3];
	nb[8] = q[4];
	nb[9] = q[6];
	nb[10] = q[6];
	nb[11] = q[7];
	nb[12] = q[5];
	nb[13] = q[1];
	nb[14] = q[5];
	nb[15] = q[2];
	nb[16] = q[2];
	nb[17] = q[6];
	nb[18] = q[0];
	nb[19] = q[5];
	nb[20] = q[0];
	res[0] = q[6];
	res[1] = q[4];
	// Non-leaf function
	nq0[0] = q[5];
	nq0[1] = anc[0];
	nq0[2] = q[6];
	nq0[3] = q[1];
	nq0[4] = q[4];
	nq0[5] = q[0];
	nq0[6] = anc[2];
	nq1[0] = q[2];
	nq1[1] = anc[1];
	nq1[2] = q[0];
	nq1[3] = q[4];
	nq1[4] = anc[3];
	nq1[5] = q[6];
	nq1[6] = anc[0];
	nq1[7] = q[7];
	nq1[8] = anc[2];
	nq1[9] = q[3];
	nq1[10] = q[1];
	nq1[11] = q[5];
	nq2[0] = anc[1];
	nq2[1] = q[4];
	nq2[2] = anc[0];
	nq2[3] = q[0];
	nq2[4] = q[7];
	nq2[5] = q[6];
	nq2[6] = q[5];
	Compute (0, 4, 26, 14, 3, 4*LOOP, 0){
		acquire(4, anc, 21, nb);
		CNOT( q[0], q[7] );
		func14(nq2, 7);
		func12(nq0, 7);
		Toffoli( q[5], anc[1], q[6] );
		func13(nq1, 12);
		CNOT( anc[3], q[6] );
		CNOT( anc[0], q[2] );
		Toffoli( anc[2], q[5], q[0] );
		CNOT( q[7], q[3] );
		Toffoli( q[0], anc[2], anc[0] );
		Toffoli( q[7], anc[1], q[5] );
		Toffoli( q[2], anc[2], q[6] );
		Toffoli( q[1], q[5], anc[3] );
		CNOT( q[4], q[6] );
		CNOT( q[6], q[3] );
	}
	Store {
		CNOT( anc[0], res[0] );
		CNOT( anc[3], res[1] );
	}
	Uncompute(res, 0, anc, 4, 26, 14){
		CNOT( q[6], q[3] );
		CNOT( q[4], q[6] );
		Toffoli( q[1], q[5], anc[3] );
		Toffoli( q[2], anc[2], q[6] );
		Toffoli( q[7], anc[1], q[5] );
		Toffoli( q[0], anc[2], anc[0] );
		CNOT( q[7], q[3] );
		Toffoli( anc[2], q[5], q[0] );
		CNOT( anc[0], q[2] );
		CNOT( anc[3], q[6] );
		func13R(nq1, 12);
		Toffoli( q[5], anc[1], q[6] );
		func12R(nq0, 7);
		func14R(nq2, 7);
		CNOT( q[0], q[7] );
	} Free(anc, 4) {}
}
// Function 4 with degree 3
// nq: 8, na: 4, ng: 12
void func4R(qbit **q, int n) {
printf("func4R\n");
fflush(stderr);
	qbit *anc[4]; // ancilla
	qbit *nb[21]; // interacting bits
	qbit *res[2];
	qbit *nq0[7];
	qbit *nq1[12];
	qbit *nq2[7];
	nb[0] = q[7];
	nb[1] = q[3];
	nb[2] = q[0];
	nb[3] = q[7];
	nb[4] = q[5];
	nb[5] = q[6];
	nb[6] = q[6];
	nb[7] = q[3];
	nb[8] = q[4];
	nb[9] = q[6];
	nb[10] = q[6];
	nb[11] = q[7];
	nb[12] = q[5];
	nb[13] = q[1];
	nb[14] = q[5];
	nb[15] = q[2];
	nb[16] = q[2];
	nb[17] = q[6];
	nb[18] = q[0];
	nb[19] = q[5];
	nb[20] = q[0];
	res[0] = q[6];
	res[1] = q[4];
	// Non-leaf function
	nq0[0] = q[5];
	nq0[1] = anc[0];
	nq0[2] = q[6];
	nq0[3] = q[1];
	nq0[4] = q[4];
	nq0[5] = q[0];
	nq0[6] = anc[2];
	nq1[0] = q[2];
	nq1[1] = anc[1];
	nq1[2] = q[0];
	nq1[3] = q[4];
	nq1[4] = anc[3];
	nq1[5] = q[6];
	nq1[6] = anc[0];
	nq1[7] = q[7];
	nq1[8] = anc[2];
	nq1[9] = q[3];
	nq1[10] = q[1];
	nq1[11] = q[5];
	nq2[0] = anc[1];
	nq2[1] = q[4];
	nq2[2] = anc[0];
	nq2[3] = q[0];
	nq2[4] = q[7];
	nq2[5] = q[6];
	nq2[6] = q[5];
	_computeModule(0, 4, 26, 14, 3, 4*LOOP, 0);
	acquire(4, anc, 21, nb);
	Recompute(res, 0, anc, 4, 26, 14){
		CNOT( q[0], q[7] );
		func14(nq2, 7);
		func12(nq0, 7);
		Toffoli( q[5], anc[1], q[6] );
		func13(nq1, 12);
		CNOT( anc[3], q[6] );
		CNOT( anc[0], q[2] );
		Toffoli( anc[2], q[5], q[0] );
		CNOT( q[7], q[3] );
		Toffoli( q[0], anc[2], anc[0] );
		Toffoli( q[7], anc[1], q[5] );
		Toffoli( q[2], anc[2], q[6] );
		Toffoli( q[1], q[5], anc[3] );
		CNOT( q[4], q[6] );
		CNOT( q[6], q[3] );
	}
	Restore {
		CNOT( anc[0], res[0] );
		CNOT( anc[3], res[1] );
	}
	Unrecompute {
		CNOT( q[6], q[3] );
		CNOT( q[4], q[6] );
		Toffoli( q[1], q[5], anc[3] );
		Toffoli( q[2], anc[2], q[6] );
		Toffoli( q[7], anc[1], q[5] );
		Toffoli( q[0], anc[2], anc[0] );
		CNOT( q[7], q[3] );
		Toffoli( anc[2], q[5], q[0] );
		CNOT( anc[0], q[2] );
		CNOT( anc[3], q[6] );
		func13R(nq1, 12);
		Toffoli( q[5], anc[1], q[6] );
		func12R(nq0, 7);
		func14R(nq2, 7);
		CNOT( q[0], q[7] );
	} Refree(anc, 4) {}
}
// Function 3 with degree 0
// nq: 6, na: 5, ng: 27
void func3(qbit **q, int n) {
printf("func3\n");
fflush(stderr);
	qbit *anc[5]; // ancilla
	qbit *nb[40]; // interacting bits
	qbit *res[3];
	nb[0] = q[5];
	nb[1] = q[3];
	nb[2] = q[3];
	nb[3] = q[2];
	nb[4] = q[5];
	nb[5] = q[5];
	nb[6] = q[2];
	nb[7] = q[2];
	nb[8] = q[5];
	nb[9] = q[2];
	nb[10] = q[0];
	nb[11] = q[4];
	nb[12] = q[5];
	nb[13] = q[2];
	nb[14] = q[4];
	nb[15] = q[5];
	nb[16] = q[2];
	nb[17] = q[1];
	nb[18] = q[4];
	nb[19] = q[3];
	nb[20] = q[0];
	nb[21] = q[4];
	nb[22] = q[1];
	nb[23] = q[4];
	nb[24] = q[2];
	nb[25] = q[1];
	nb[26] = q[0];
	nb[27] = q[4];
	nb[28] = q[1];
	nb[29] = q[2];
	nb[30] = q[4];
	nb[31] = q[5];
	nb[32] = q[3];
	nb[33] = q[2];
	nb[34] = q[4];
	nb[35] = q[3];
	nb[36] = q[1];
	nb[37] = q[5];
	nb[38] = q[1];
	nb[39] = q[4];
	res[0] = q[5];
	res[1] = q[1];
	res[2] = q[3];
	// Leaf function
	Compute (0, 5, 57, 30, 0, 4*LOOP, 0) {
		acquire(5, anc, 40, nb);
		CNOT( anc[1], anc[0] );
		Toffoli( q[5], q[3], anc[4] );
		Toffoli( q[3], q[2], q[5] );
		Toffoli( q[5], anc[0], q[2] );
		CNOT( q[2], q[5] );
		CNOT( q[2], anc[0] );
		CNOT( q[0], anc[3] );
		CNOT( anc[3], anc[4] );
		Toffoli( q[4], q[5], q[2] );
		Toffoli( anc[4], q[4], anc[0] );
		Toffoli( q[5], q[2], q[1] );
		Toffoli( anc[2], anc[3], q[4] );
		Toffoli( anc[4], anc[1], q[3] );
		CNOT( anc[4], anc[1] );
		CNOT( q[0], anc[4] );
		Toffoli( anc[0], q[4], anc[2] );
		Toffoli( q[1], q[4], anc[0] );
		CNOT( q[2], q[1] );
		Toffoli( anc[2], anc[4], q[0] );
		CNOT( anc[0], q[4] );
		Toffoli( q[1], q[2], q[4] );
		Toffoli( q[5], q[3], q[2] );
		Toffoli( q[4], q[3], anc[1] );
		CNOT( anc[1], q[1] );
		Toffoli( anc[0], anc[3], q[5] );
		Toffoli( anc[3], q[1], anc[2] );
		Toffoli( anc[2], anc[1], q[4] );
	}
	Store {
		CNOT( anc[3], res[0] );
		CNOT( q[2], res[1] );
		CNOT( anc[0], res[2] );
	}
	Uncompute(res, 0, anc, 5, 57, 30){
		Toffoli( anc[2], anc[1], q[4] );
		Toffoli( anc[3], q[1], anc[2] );
		Toffoli( anc[0], anc[3], q[5] );
		CNOT( anc[1], q[1] );
		Toffoli( q[4], q[3], anc[1] );
		Toffoli( q[5], q[3], q[2] );
		Toffoli( q[1], q[2], q[4] );
		CNOT( anc[0], q[4] );
		Toffoli( anc[2], anc[4], q[0] );
		CNOT( q[2], q[1] );
		Toffoli( q[1], q[4], anc[0] );
		Toffoli( anc[0], q[4], anc[2] );
		CNOT( q[0], anc[4] );
		CNOT( anc[4], anc[1] );
		Toffoli( anc[4], anc[1], q[3] );
		Toffoli( anc[2], anc[3], q[4] );
		Toffoli( q[5], q[2], q[1] );
		Toffoli( anc[4], q[4], anc[0] );
		Toffoli( q[4], q[5], q[2] );
		CNOT( anc[3], anc[4] );
		CNOT( q[0], anc[3] );
		CNOT( q[2], anc[0] );
		CNOT( q[2], q[5] );
		Toffoli( q[5], anc[0], q[2] );
		Toffoli( q[3], q[2], q[5] );
		Toffoli( q[5], q[3], anc[4] );
		CNOT( anc[1], anc[0] );
	} Free(anc, 5) {}
}
// Function 3 with degree 0
// nq: 6, na: 5, ng: 27
void func3R(qbit **q, int n) {
printf("func3R\n");
fflush(stderr);
	qbit *anc[5]; // ancilla
	qbit *nb[40]; // interacting bits
	qbit *res[3];
	nb[0] = q[5];
	nb[1] = q[3];
	nb[2] = q[3];
	nb[3] = q[2];
	nb[4] = q[5];
	nb[5] = q[5];
	nb[6] = q[2];
	nb[7] = q[2];
	nb[8] = q[5];
	nb[9] = q[2];
	nb[10] = q[0];
	nb[11] = q[4];
	nb[12] = q[5];
	nb[13] = q[2];
	nb[14] = q[4];
	nb[15] = q[5];
	nb[16] = q[2];
	nb[17] = q[1];
	nb[18] = q[4];
	nb[19] = q[3];
	nb[20] = q[0];
	nb[21] = q[4];
	nb[22] = q[1];
	nb[23] = q[4];
	nb[24] = q[2];
	nb[25] = q[1];
	nb[26] = q[0];
	nb[27] = q[4];
	nb[28] = q[1];
	nb[29] = q[2];
	nb[30] = q[4];
	nb[31] = q[5];
	nb[32] = q[3];
	nb[33] = q[2];
	nb[34] = q[4];
	nb[35] = q[3];
	nb[36] = q[1];
	nb[37] = q[5];
	nb[38] = q[1];
	nb[39] = q[4];
	res[0] = q[5];
	res[1] = q[1];
	res[2] = q[3];
	// Leaf function
	_computeModule(0, 5, 57, 30, 0, 4*LOOP, 0);
	acquire(5, anc, 40, nb);
	Recompute (res, 0, anc, 5, 57, 30){
		Toffoli( anc[2], anc[1], q[4] );
		Toffoli( anc[3], q[1], anc[2] );
		Toffoli( anc[0], anc[3], q[5] );
		CNOT( anc[1], q[1] );
		Toffoli( q[4], q[3], anc[1] );
		Toffoli( q[5], q[3], q[2] );
		Toffoli( q[1], q[2], q[4] );
		CNOT( anc[0], q[4] );
		Toffoli( anc[2], anc[4], q[0] );
		CNOT( q[2], q[1] );
		Toffoli( q[1], q[4], anc[0] );
		Toffoli( anc[0], q[4], anc[2] );
		CNOT( q[0], anc[4] );
		CNOT( anc[4], anc[1] );
		Toffoli( anc[4], anc[1], q[3] );
		Toffoli( anc[2], anc[3], q[4] );
		Toffoli( q[5], q[2], q[1] );
		Toffoli( anc[4], q[4], anc[0] );
		Toffoli( q[4], q[5], q[2] );
		CNOT( anc[3], anc[4] );
		CNOT( q[0], anc[3] );
		CNOT( q[2], anc[0] );
		CNOT( q[2], q[5] );
		Toffoli( q[5], anc[0], q[2] );
		Toffoli( q[3], q[2], q[5] );
		Toffoli( q[5], q[3], anc[4] );
		CNOT( anc[1], anc[0] );
	}
	Restore {
		CNOT( anc[3], res[0] );
		CNOT( q[2], res[1] );
		CNOT( anc[0], res[2] );
	}
	Unrecompute {
		CNOT( anc[1], anc[0] );
		Toffoli( q[5], q[3], anc[4] );
		Toffoli( q[3], q[2], q[5] );
		Toffoli( q[5], anc[0], q[2] );
		CNOT( q[2], q[5] );
		CNOT( q[2], anc[0] );
		CNOT( q[0], anc[3] );
		CNOT( anc[3], anc[4] );
		Toffoli( q[4], q[5], q[2] );
		Toffoli( anc[4], q[4], anc[0] );
		Toffoli( q[5], q[2], q[1] );
		Toffoli( anc[2], anc[3], q[4] );
		Toffoli( anc[4], anc[1], q[3] );
		CNOT( anc[4], anc[1] );
		CNOT( q[0], anc[4] );
		Toffoli( anc[0], q[4], anc[2] );
		Toffoli( q[1], q[4], anc[0] );
		CNOT( q[2], q[1] );
		Toffoli( anc[2], anc[4], q[0] );
		CNOT( anc[0], q[4] );
		Toffoli( q[1], q[2], q[4] );
		Toffoli( q[5], q[3], q[2] );
		Toffoli( q[4], q[3], anc[1] );
		CNOT( anc[1], q[1] );
		Toffoli( anc[0], anc[3], q[5] );
		Toffoli( anc[3], q[1], anc[2] );
		Toffoli( anc[2], anc[1], q[4] );
	} Refree(anc, 5) {}
}
// Function 2 with degree 4
// nq: 7, na: 8, ng: 17
void func2(qbit **q, int n) {
printf("func2\n");
fflush(stderr);
	qbit *anc[8]; // ancilla
	qbit *nb[13]; // interacting bits
	qbit *res[2];
	qbit *nq0[13];
	qbit *nq1[12];
	qbit *nq2[5];
	qbit *nq3[6];
	nb[0] = q[1];
	nb[1] = q[6];
	nb[2] = q[4];
	nb[3] = q[6];
	nb[4] = q[5];
	nb[5] = q[2];
	nb[6] = q[5];
	nb[7] = q[6];
	nb[8] = q[4];
	nb[9] = q[3];
	nb[10] = q[6];
	nb[11] = q[4];
	nb[12] = q[3];
	res[0] = q[1];
	res[1] = q[2];
	// Non-leaf function
	nq0[0] = q[4];
	nq0[1] = q[2];
	nq0[2] = anc[5];
	nq0[3] = anc[6];
	nq0[4] = q[5];
	nq0[5] = anc[4];
	nq0[6] = anc[0];
	nq0[7] = q[6];
	nq0[8] = q[3];
	nq0[9] = anc[1];
	nq0[10] = q[0];
	nq0[11] = anc[3];
	nq0[12] = anc[2];
	nq1[0] = anc[4];
	nq1[1] = anc[1];
	nq1[2] = q[6];
	nq1[3] = q[0];
	nq1[4] = q[2];
	nq1[5] = q[4];
	nq1[6] = anc[2];
	nq1[7] = anc[3];
	nq1[8] = anc[7];
	nq1[9] = q[3];
	nq1[10] = anc[6];
	nq1[11] = anc[5];
	nq2[0] = q[3];
	nq2[1] = q[0];
	nq2[2] = q[4];
	nq2[3] = q[2];
	nq2[4] = anc[1];
	nq3[0] = anc[5];
	nq3[1] = q[4];
	nq3[2] = anc[3];
	nq3[3] = q[1];
	nq3[4] = q[3];
	nq3[5] = q[6];
	Compute (0, 8, 36, 19, 4, 4*LOOP, 0){
		acquire(8, anc, 13, nb);
		Toffoli( anc[7], anc[5], q[1] );
		func11(nq3, 6);
		func9(nq1, 12);
		func10(nq2, 5);
		Toffoli( anc[4], anc[7], q[5] );
		CNOT( anc[0], q[6] );
		CNOT( anc[7], q[6] );
		CNOT( anc[5], anc[0] );
		CNOT( q[4], anc[1] );
		Toffoli( anc[6], anc[7], q[5] );
		Toffoli( anc[4], anc[7], q[3] );
		Toffoli( q[4], anc[1], anc[0] );
		CNOT( q[2], anc[3] );
		Toffoli( anc[5], anc[4], q[6] );
		CNOT( anc[5], anc[7] );
		CNOT( anc[7], anc[6] );
		func8(nq0, 13);
		Toffoli( q[4], anc[7], anc[1] );
		CNOT( q[3], anc[5] );
		Toffoli( anc[2], anc[0], anc[3] );
		CNOT( q[6], anc[2] );
	}
	Store {
		CNOT( anc[3], res[0] );
		CNOT( q[5], res[1] );
	}
	Uncompute(res, 0, anc, 8, 36, 19){
		CNOT( q[6], anc[2] );
		Toffoli( anc[2], anc[0], anc[3] );
		CNOT( q[3], anc[5] );
		Toffoli( q[4], anc[7], anc[1] );
		func8R(nq0, 13);
		CNOT( anc[7], anc[6] );
		CNOT( anc[5], anc[7] );
		Toffoli( anc[5], anc[4], q[6] );
		CNOT( q[2], anc[3] );
		Toffoli( q[4], anc[1], anc[0] );
		Toffoli( anc[4], anc[7], q[3] );
		Toffoli( anc[6], anc[7], q[5] );
		CNOT( q[4], anc[1] );
		CNOT( anc[5], anc[0] );
		CNOT( anc[7], q[6] );
		CNOT( anc[0], q[6] );
		Toffoli( anc[4], anc[7], q[5] );
		func10R(nq2, 5);
		func9R(nq1, 12);
		func11R(nq3, 6);
		Toffoli( anc[7], anc[5], q[1] );
	} Free(anc, 8) {}
}
// Function 2 with degree 4
// nq: 7, na: 8, ng: 17
void func2R(qbit **q, int n) {
printf("func2R\n");
fflush(stderr);
	qbit *anc[8]; // ancilla
	qbit *nb[13]; // interacting bits
	qbit *res[2];
	qbit *nq0[13];
	qbit *nq1[12];
	qbit *nq2[5];
	qbit *nq3[6];
	nb[0] = q[1];
	nb[1] = q[6];
	nb[2] = q[4];
	nb[3] = q[6];
	nb[4] = q[5];
	nb[5] = q[2];
	nb[6] = q[5];
	nb[7] = q[6];
	nb[8] = q[4];
	nb[9] = q[3];
	nb[10] = q[6];
	nb[11] = q[4];
	nb[12] = q[3];
	res[0] = q[1];
	res[1] = q[2];
	// Non-leaf function
	nq0[0] = q[4];
	nq0[1] = q[2];
	nq0[2] = anc[5];
	nq0[3] = anc[6];
	nq0[4] = q[5];
	nq0[5] = anc[4];
	nq0[6] = anc[0];
	nq0[7] = q[6];
	nq0[8] = q[3];
	nq0[9] = anc[1];
	nq0[10] = q[0];
	nq0[11] = anc[3];
	nq0[12] = anc[2];
	nq1[0] = anc[4];
	nq1[1] = anc[1];
	nq1[2] = q[6];
	nq1[3] = q[0];
	nq1[4] = q[2];
	nq1[5] = q[4];
	nq1[6] = anc[2];
	nq1[7] = anc[3];
	nq1[8] = anc[7];
	nq1[9] = q[3];
	nq1[10] = anc[6];
	nq1[11] = anc[5];
	nq2[0] = q[3];
	nq2[1] = q[0];
	nq2[2] = q[4];
	nq2[3] = q[2];
	nq2[4] = anc[1];
	nq3[0] = anc[5];
	nq3[1] = q[4];
	nq3[2] = anc[3];
	nq3[3] = q[1];
	nq3[4] = q[3];
	nq3[5] = q[6];
	_computeModule(0, 8, 36, 19, 4, 4*LOOP, 0);
	acquire(8, anc, 13, nb);
	Recompute(res, 0, anc, 8, 36, 19){
		Toffoli( anc[7], anc[5], q[1] );
		func11(nq3, 6);
		func9(nq1, 12);
		func10(nq2, 5);
		Toffoli( anc[4], anc[7], q[5] );
		CNOT( anc[0], q[6] );
		CNOT( anc[7], q[6] );
		CNOT( anc[5], anc[0] );
		CNOT( q[4], anc[1] );
		Toffoli( anc[6], anc[7], q[5] );
		Toffoli( anc[4], anc[7], q[3] );
		Toffoli( q[4], anc[1], anc[0] );
		CNOT( q[2], anc[3] );
		Toffoli( anc[5], anc[4], q[6] );
		CNOT( anc[5], anc[7] );
		CNOT( anc[7], anc[6] );
		func8(nq0, 13);
		Toffoli( q[4], anc[7], anc[1] );
		CNOT( q[3], anc[5] );
		Toffoli( anc[2], anc[0], anc[3] );
		CNOT( q[6], anc[2] );
	}
	Restore {
		CNOT( anc[3], res[0] );
		CNOT( q[5], res[1] );
	}
	Unrecompute {
		CNOT( q[6], anc[2] );
		Toffoli( anc[2], anc[0], anc[3] );
		CNOT( q[3], anc[5] );
		Toffoli( q[4], anc[7], anc[1] );
		func8R(nq0, 13);
		CNOT( anc[7], anc[6] );
		CNOT( anc[5], anc[7] );
		Toffoli( anc[5], anc[4], q[6] );
		CNOT( q[2], anc[3] );
		Toffoli( q[4], anc[1], anc[0] );
		Toffoli( anc[4], anc[7], q[3] );
		Toffoli( anc[6], anc[7], q[5] );
		CNOT( q[4], anc[1] );
		CNOT( anc[5], anc[0] );
		CNOT( anc[7], q[6] );
		CNOT( anc[0], q[6] );
		Toffoli( anc[4], anc[7], q[5] );
		func10R(nq2, 5);
		func9R(nq1, 12);
		func11R(nq3, 6);
		Toffoli( anc[7], anc[5], q[1] );
	} Refree(anc, 8) {}
}
// Function 1 with degree 3
// nq: 13, na: 9, ng: 28
void func1(qbit **q, int n) {
printf("func1\n");
fflush(stderr);
	qbit *anc[9]; // ancilla
	qbit *nb[41]; // interacting bits
	qbit *res[8];
	qbit *nq0[9];
	qbit *nq1[15];
	qbit *nq2[15];
	nb[0] = q[6];
	nb[1] = q[5];
	nb[2] = q[11];
	nb[3] = q[4];
	nb[4] = q[9];
	nb[5] = q[10];
	nb[6] = q[12];
	nb[7] = q[4];
	nb[8] = q[5];
	nb[9] = q[9];
	nb[10] = q[11];
	nb[11] = q[10];
	nb[12] = q[4];
	nb[13] = q[10];
	nb[14] = q[0];
	nb[15] = q[8];
	nb[16] = q[4];
	nb[17] = q[3];
	nb[18] = q[11];
	nb[19] = q[1];
	nb[20] = q[6];
	nb[21] = q[9];
	nb[22] = q[4];
	nb[23] = q[10];
	nb[24] = q[3];
	nb[25] = q[12];
	nb[26] = q[2];
	nb[27] = q[6];
	nb[28] = q[0];
	nb[29] = q[7];
	nb[30] = q[0];
	nb[31] = q[10];
	nb[32] = q[3];
	nb[33] = q[12];
	nb[34] = q[7];
	nb[35] = q[3];
	nb[36] = q[8];
	nb[37] = q[0];
	nb[38] = q[10];
	nb[39] = q[10];
	nb[40] = q[12];
	res[0] = q[4];
	res[1] = q[3];
	res[2] = q[0];
	res[3] = q[11];
	res[4] = q[10];
	res[5] = q[9];
	res[6] = q[6];
	res[7] = q[12];
	// Non-leaf function
	nq0[0] = q[6];
	nq0[1] = anc[0];
	nq0[2] = anc[4];
	nq0[3] = q[9];
	nq0[4] = anc[8];
	nq0[5] = anc[6];
	nq0[6] = q[11];
	nq0[7] = q[4];
	nq0[8] = anc[2];
	nq1[0] = q[5];
	nq1[1] = q[2];
	nq1[2] = q[11];
	nq1[3] = anc[0];
	nq1[4] = anc[8];
	nq1[5] = anc[4];
	nq1[6] = anc[6];
	nq1[7] = q[8];
	nq1[8] = q[3];
	nq1[9] = q[12];
	nq1[10] = q[1];
	nq1[11] = anc[2];
	nq1[12] = q[9];
	nq1[13] = q[10];
	nq1[14] = q[0];
	nq2[0] = q[8];
	nq2[1] = q[11];
	nq2[2] = anc[2];
	nq2[3] = q[3];
	nq2[4] = q[10];
	nq2[5] = q[4];
	nq2[6] = anc[8];
	nq2[7] = anc[7];
	nq2[8] = anc[4];
	nq2[9] = q[12];
	nq2[10] = q[6];
	nq2[11] = anc[3];
	nq2[12] = anc[1];
	nq2[13] = q[5];
	nq2[14] = anc[5];
	Compute (0, 9, 64, 36, 3, 4*LOOP, 0){
		acquire(9, anc, 41, nb);
		CNOT( q[12], q[4] );
		Toffoli( anc[5], anc[6], anc[2] );
		func7(nq2, 15);
		Toffoli( anc[2], q[0], q[10] );
		Toffoli( q[0], q[10], q[3] );
		CNOT( anc[7], q[3] );
		CNOT( q[1], anc[2] );
		CNOT( q[9], q[10] );
		CNOT( q[4], anc[2] );
		CNOT( anc[2], q[12] );
		Toffoli( anc[8], q[10], anc[3] );
		Toffoli( anc[1], q[0], q[7] );
		CNOT( q[8], anc[8] );
		Toffoli( q[12], q[2], q[6] );
		CNOT( q[10], q[3] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[5], anc[3], q[5] );
		Toffoli( q[6], q[9], q[4] );
		Toffoli( anc[6], anc[4], q[6] );
		func6(nq1, 15);
		Toffoli( anc[8], anc[1], q[10] );
		CNOT( q[12], anc[6] );
		CNOT( q[10], anc[0] );
		Toffoli( q[11], q[4], anc[2] );
		Toffoli( q[0], q[8], anc[7] );
		CNOT( anc[8], q[7] );
		CNOT( anc[4], anc[6] );
		CNOT( anc[5], q[11] );
		Toffoli( q[4], q[3], anc[8] );
		func5(nq0, 9);
		Toffoli( q[5], q[9], q[11] );
	}
	Store {
		CNOT( q[8], res[0] );
		CNOT( q[6], res[1] );
		CNOT( anc[2], res[2] );
		CNOT( anc[8], res[3] );
		CNOT( q[9], res[4] );
		CNOT( anc[0], res[5] );
		CNOT( q[1], res[6] );
		CNOT( q[4], res[7] );
	}
	Uncompute(res, 0, anc, 9, 64, 36){
		Toffoli( q[5], q[9], q[11] );
		func5R(nq0, 9);
		Toffoli( q[4], q[3], anc[8] );
		CNOT( anc[5], q[11] );
		CNOT( anc[4], anc[6] );
		CNOT( anc[8], q[7] );
		Toffoli( q[0], q[8], anc[7] );
		Toffoli( q[11], q[4], anc[2] );
		CNOT( q[10], anc[0] );
		CNOT( q[12], anc[6] );
		Toffoli( anc[8], anc[1], q[10] );
		func6R(nq1, 15);
		Toffoli( anc[6], anc[4], q[6] );
		Toffoli( q[6], q[9], q[4] );
		Toffoli( anc[5], anc[3], q[5] );
		CNOT( anc[2], anc[6] );
		CNOT( q[10], q[3] );
		Toffoli( q[12], q[2], q[6] );
		CNOT( q[8], anc[8] );
		Toffoli( anc[1], q[0], q[7] );
		Toffoli( anc[8], q[10], anc[3] );
		CNOT( anc[2], q[12] );
		CNOT( q[4], anc[2] );
		CNOT( q[9], q[10] );
		CNOT( q[1], anc[2] );
		CNOT( anc[7], q[3] );
		Toffoli( q[0], q[10], q[3] );
		Toffoli( anc[2], q[0], q[10] );
		func7R(nq2, 15);
		Toffoli( anc[5], anc[6], anc[2] );
		CNOT( q[12], q[4] );
	} Free(anc, 9) {}
}
// Function 1 with degree 3
// nq: 13, na: 9, ng: 28
void func1R(qbit **q, int n) {
printf("func1R\n");
fflush(stderr);
	qbit *anc[9]; // ancilla
	qbit *nb[41]; // interacting bits
	qbit *res[8];
	qbit *nq0[9];
	qbit *nq1[15];
	qbit *nq2[15];
	nb[0] = q[6];
	nb[1] = q[5];
	nb[2] = q[11];
	nb[3] = q[4];
	nb[4] = q[9];
	nb[5] = q[10];
	nb[6] = q[12];
	nb[7] = q[4];
	nb[8] = q[5];
	nb[9] = q[9];
	nb[10] = q[11];
	nb[11] = q[10];
	nb[12] = q[4];
	nb[13] = q[10];
	nb[14] = q[0];
	nb[15] = q[8];
	nb[16] = q[4];
	nb[17] = q[3];
	nb[18] = q[11];
	nb[19] = q[1];
	nb[20] = q[6];
	nb[21] = q[9];
	nb[22] = q[4];
	nb[23] = q[10];
	nb[24] = q[3];
	nb[25] = q[12];
	nb[26] = q[2];
	nb[27] = q[6];
	nb[28] = q[0];
	nb[29] = q[7];
	nb[30] = q[0];
	nb[31] = q[10];
	nb[32] = q[3];
	nb[33] = q[12];
	nb[34] = q[7];
	nb[35] = q[3];
	nb[36] = q[8];
	nb[37] = q[0];
	nb[38] = q[10];
	nb[39] = q[10];
	nb[40] = q[12];
	res[0] = q[4];
	res[1] = q[3];
	res[2] = q[0];
	res[3] = q[11];
	res[4] = q[10];
	res[5] = q[9];
	res[6] = q[6];
	res[7] = q[12];
	// Non-leaf function
	nq0[0] = q[6];
	nq0[1] = anc[0];
	nq0[2] = anc[4];
	nq0[3] = q[9];
	nq0[4] = anc[8];
	nq0[5] = anc[6];
	nq0[6] = q[11];
	nq0[7] = q[4];
	nq0[8] = anc[2];
	nq1[0] = q[5];
	nq1[1] = q[2];
	nq1[2] = q[11];
	nq1[3] = anc[0];
	nq1[4] = anc[8];
	nq1[5] = anc[4];
	nq1[6] = anc[6];
	nq1[7] = q[8];
	nq1[8] = q[3];
	nq1[9] = q[12];
	nq1[10] = q[1];
	nq1[11] = anc[2];
	nq1[12] = q[9];
	nq1[13] = q[10];
	nq1[14] = q[0];
	nq2[0] = q[8];
	nq2[1] = q[11];
	nq2[2] = anc[2];
	nq2[3] = q[3];
	nq2[4] = q[10];
	nq2[5] = q[4];
	nq2[6] = anc[8];
	nq2[7] = anc[7];
	nq2[8] = anc[4];
	nq2[9] = q[12];
	nq2[10] = q[6];
	nq2[11] = anc[3];
	nq2[12] = anc[1];
	nq2[13] = q[5];
	nq2[14] = anc[5];
	_computeModule(0, 9, 64, 36, 3, 4*LOOP, 0);
	acquire(9, anc, 41, nb);
	Recompute(res, 0, anc, 9, 64, 36){
		CNOT( q[12], q[4] );
		Toffoli( anc[5], anc[6], anc[2] );
		func7(nq2, 15);
		Toffoli( anc[2], q[0], q[10] );
		Toffoli( q[0], q[10], q[3] );
		CNOT( anc[7], q[3] );
		CNOT( q[1], anc[2] );
		CNOT( q[9], q[10] );
		CNOT( q[4], anc[2] );
		CNOT( anc[2], q[12] );
		Toffoli( anc[8], q[10], anc[3] );
		Toffoli( anc[1], q[0], q[7] );
		CNOT( q[8], anc[8] );
		Toffoli( q[12], q[2], q[6] );
		CNOT( q[10], q[3] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[5], anc[3], q[5] );
		Toffoli( q[6], q[9], q[4] );
		Toffoli( anc[6], anc[4], q[6] );
		func6(nq1, 15);
		Toffoli( anc[8], anc[1], q[10] );
		CNOT( q[12], anc[6] );
		CNOT( q[10], anc[0] );
		Toffoli( q[11], q[4], anc[2] );
		Toffoli( q[0], q[8], anc[7] );
		CNOT( anc[8], q[7] );
		CNOT( anc[4], anc[6] );
		CNOT( anc[5], q[11] );
		Toffoli( q[4], q[3], anc[8] );
		func5(nq0, 9);
		Toffoli( q[5], q[9], q[11] );
	}
	Restore {
		CNOT( q[8], res[0] );
		CNOT( q[6], res[1] );
		CNOT( anc[2], res[2] );
		CNOT( anc[8], res[3] );
		CNOT( q[9], res[4] );
		CNOT( anc[0], res[5] );
		CNOT( q[1], res[6] );
		CNOT( q[4], res[7] );
	}
	Unrecompute {
		Toffoli( q[5], q[9], q[11] );
		func5R(nq0, 9);
		Toffoli( q[4], q[3], anc[8] );
		CNOT( anc[5], q[11] );
		CNOT( anc[4], anc[6] );
		CNOT( anc[8], q[7] );
		Toffoli( q[0], q[8], anc[7] );
		Toffoli( q[11], q[4], anc[2] );
		CNOT( q[10], anc[0] );
		CNOT( q[12], anc[6] );
		Toffoli( anc[8], anc[1], q[10] );
		func6R(nq1, 15);
		Toffoli( anc[6], anc[4], q[6] );
		Toffoli( q[6], q[9], q[4] );
		Toffoli( anc[5], anc[3], q[5] );
		CNOT( anc[2], anc[6] );
		CNOT( q[10], q[3] );
		Toffoli( q[12], q[2], q[6] );
		CNOT( q[8], anc[8] );
		Toffoli( anc[1], q[0], q[7] );
		Toffoli( anc[8], q[10], anc[3] );
		CNOT( anc[2], q[12] );
		CNOT( q[4], anc[2] );
		CNOT( q[9], q[10] );
		CNOT( q[1], anc[2] );
		CNOT( anc[7], q[3] );
		Toffoli( q[0], q[10], q[3] );
		Toffoli( anc[2], q[0], q[10] );
		func7R(nq2, 15);
		Toffoli( anc[5], anc[6], anc[2] );
		CNOT( q[12], q[4] );
	} Refree(anc, 9) {}
}
// main function
int main() {
	qbit *new[16];
	acquire(16, new, 0, NULL);
	// Intialize inputs
	X (new[1]);
	X (new[10]);
	X (new[2]);
	X (new[3]);
	X (new[8]);
	X (new[7]);
	X (new[15]);
	X (new[5]);
	X (new[11]);
	X (new[4]);
	X (new[9]);
	X (new[14]);
	X (new[6]);
	X (new[13]);
	// Start computation
	qbit *nq0[13];
	qbit *nq1[7];
	qbit *nq2[6];
	qbit *nq3[8];
	nq0[0] = new[8];
	nq0[1] = new[4];
	nq0[2] = new[7];
	nq0[3] = new[3];
	nq0[4] = new[12];
	nq0[5] = new[10];
	nq0[6] = new[13];
	nq0[7] = new[6];
	nq0[8] = new[1];
	nq0[9] = new[14];
	nq0[10] = new[15];
	nq0[11] = new[11];
	nq0[12] = new[0];
	nq1[0] = new[1];
	nq1[1] = new[11];
	nq1[2] = new[3];
	nq1[3] = new[5];
	nq1[4] = new[10];
	nq1[5] = new[0];
	nq1[6] = new[13];
	nq2[0] = new[7];
	nq2[1] = new[9];
	nq2[2] = new[1];
	nq2[3] = new[11];
	nq2[4] = new[8];
	nq2[5] = new[14];
	nq3[0] = new[1];
	nq3[1] = new[6];
	nq3[2] = new[11];
	nq3[3] = new[12];
	nq3[4] = new[2];
	nq3[5] = new[10];
	nq3[6] = new[8];
	nq3[7] = new[0];
	for (int i = 0; i < LOOP; i++){
		func1(nq0, 13);
		func2(nq1, 7);
		func3(nq2, 6);
		func4(nq3, 8);
	}
	return 0;
}
