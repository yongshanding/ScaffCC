#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "qalloc.h"
#include "uncompute.h"

#define B 2 // base
#define LOGB 2 // num bits of base
#define M 55 // modulo
#define LOGM 6 // num bits of modulo
#define N1 6 // top
#define N2 6 // bottom = logm

void helper(qbit **top, int n0, qbit **bot, int n2) {
	qbit *anc[N2];
	acquire(N2, anc, 0, NULL);
	CNOT(top[0], bot[0]);
	for (int i = 0; i < N2; i++) {
		CNOT(bot[i], anc[i]);
	}
	CNOT(anc[N2-1], top[0]);
	Free(top, 1, anc, 2, N2+1) {
		release(top, 1, anc, 2, NULL);
	} Nofree {}
}


/* Computes map from |top>|0> to |top>|f(top)>, where f(y) = b^y % m */
int main() {
	int b = B;
	int m = M;
	int logm = LOGM;
	int n1 = N1;
	int n2 = N2;
	qbit *new[N1+N2];
	acquire(N1+N2, new, 0, NULL);
	qbit **top = &new[0]; // N1
	qbit **bot = &new[N1]; // N2
	Toffoli(top[0], top[1], bot[0]);
	for (int i = 0; i < N1; i++) {
		printf("iter%d\n", i);
		//ctrlModExp(top[i], i, bot, n2, b, m);
		helper(&top[i], 1, bot, N2);
		//Free(top, N1, bot, N2, 1) {
		//	//CNOT(top[0], top[1]);
		//	//Toffoli(top[0], top[1], bot[0]);
		//	//declare_free(bot, N2);
		//}
		//Nofree {}
	}
	return 0;
	
}

