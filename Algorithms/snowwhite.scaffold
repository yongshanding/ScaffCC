// Scaffold file synthesized by para-bench.py
// qubits: 16 ancilla: 8 gates: 16 levels: 5 degrees: 2 loops: 32
#include "qalloc.h"
#include "uncompute.h"
#define LOOP 32
// Call list: 1,2;3,4;5;;6;7,8;9;;;10;11,12
// Function 12 with degree 0
// nq: 7, na: 6, ng: 8
void func12(qbit **q, int n) {
printf("func12\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[12]; // interacting bits
	qbit *res[5];
	nb[0] = q[3];
	nb[1] = q[4];
	nb[2] = q[6];
	nb[3] = q[6];
	nb[4] = q[0];
	nb[5] = q[1];
	nb[6] = q[3];
	nb[7] = q[2];
	nb[8] = q[6];
	nb[9] = q[4];
	nb[10] = q[2];
	nb[11] = q[4];
	res[0] = q[5];
	res[1] = q[0];
	res[2] = q[6];
	res[3] = q[3];
	res[4] = q[4];
	// Leaf function
	Compute (0, 6, 21, 13, 0, 2, 0) {
		acquire(6, anc, 12, nb);
		Toffoli( q[3], q[4], anc[2] );
		CNOT( anc[1], q[6] );
		Toffoli( q[6], q[0], q[1] );
		CNOT( anc[2], anc[4] );
		CNOT( q[3], q[2] );
		Toffoli( anc[2], q[6], q[4] );
		Toffoli( anc[2], anc[5], q[2] );
		Toffoli( anc[2], anc[3], q[4] );
	}
	Store {
		CNOT( anc[3], res[0] );
		CNOT( anc[1], res[1] );
		CNOT( anc[4], res[2] );
		CNOT( anc[0], res[3] );
		CNOT( q[3], res[4] );
	}
	Uncompute(res, 0, anc, 6, 21, 13){
		Toffoli( anc[2], anc[3], q[4] );
		Toffoli( anc[2], anc[5], q[2] );
		Toffoli( anc[2], q[6], q[4] );
		CNOT( q[3], q[2] );
		CNOT( anc[2], anc[4] );
		Toffoli( q[6], q[0], q[1] );
		CNOT( anc[1], q[6] );
		Toffoli( q[3], q[4], anc[2] );
	} Free(anc, 6) {}
}
// Function 12 with degree 0
// nq: 7, na: 6, ng: 8
void func12R(qbit **q, int n) {
printf("func12R\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[12]; // interacting bits
	qbit *res[5];
	nb[0] = q[3];
	nb[1] = q[4];
	nb[2] = q[6];
	nb[3] = q[6];
	nb[4] = q[0];
	nb[5] = q[1];
	nb[6] = q[3];
	nb[7] = q[2];
	nb[8] = q[6];
	nb[9] = q[4];
	nb[10] = q[2];
	nb[11] = q[4];
	res[0] = q[5];
	res[1] = q[0];
	res[2] = q[6];
	res[3] = q[3];
	res[4] = q[4];
	// Leaf function
	_computeModule(0, 6, 21, 13, 0, 2, 0);
	acquire(6, anc, 12, nb);
	Recompute (res, 0, anc, 6, 21, 13){
		Toffoli( anc[2], anc[3], q[4] );
		Toffoli( anc[2], anc[5], q[2] );
		Toffoli( anc[2], q[6], q[4] );
		CNOT( q[3], q[2] );
		CNOT( anc[2], anc[4] );
		Toffoli( q[6], q[0], q[1] );
		CNOT( anc[1], q[6] );
		Toffoli( q[3], q[4], anc[2] );
	}
	Restore {
		CNOT( anc[3], res[0] );
		CNOT( anc[1], res[1] );
		CNOT( anc[4], res[2] );
		CNOT( anc[0], res[3] );
		CNOT( q[3], res[4] );
	}
	Unrecompute {
		Toffoli( q[3], q[4], anc[2] );
		CNOT( anc[1], q[6] );
		Toffoli( q[6], q[0], q[1] );
		CNOT( anc[2], anc[4] );
		CNOT( q[3], q[2] );
		Toffoli( anc[2], q[6], q[4] );
		Toffoli( anc[2], anc[5], q[2] );
		Toffoli( anc[2], anc[3], q[4] );
	} Refree(anc, 6) {}
}
// Function 11 with degree 0
// nq: 7, na: 6, ng: 9
void func11(qbit **q, int n) {
printf("func11\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[9]; // interacting bits
	qbit *res[4];
	nb[0] = q[6];
	nb[1] = q[1];
	nb[2] = q[4];
	nb[3] = q[2];
	nb[4] = q[6];
	nb[5] = q[2];
	nb[6] = q[1];
	nb[7] = q[5];
	nb[8] = q[0];
	res[0] = q[6];
	res[1] = q[3];
	res[2] = q[1];
	res[3] = q[4];
	// Leaf function
	Compute (0, 6, 22, 13, 0, 2, 0) {
		acquire(6, anc, 9, nb);
		Toffoli( anc[0], q[6], anc[1] );
		Toffoli( anc[4], q[1], anc[3] );
		Toffoli( q[4], anc[2], q[2] );
		CNOT( anc[2], anc[4] );
		CNOT( q[6], q[2] );
		Toffoli( anc[3], q[1], q[5] );
		CNOT( anc[3], anc[5] );
		CNOT( anc[4], anc[2] );
		CNOT( anc[3], q[0] );
	}
	Store {
		CNOT( anc[1], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( anc[3], res[2] );
		CNOT( q[6], res[3] );
	}
	Uncompute(res, 0, anc, 6, 22, 13){
		CNOT( anc[3], q[0] );
		CNOT( anc[4], anc[2] );
		CNOT( anc[3], anc[5] );
		Toffoli( anc[3], q[1], q[5] );
		CNOT( q[6], q[2] );
		CNOT( anc[2], anc[4] );
		Toffoli( q[4], anc[2], q[2] );
		Toffoli( anc[4], q[1], anc[3] );
		Toffoli( anc[0], q[6], anc[1] );
	} Free(anc, 6) {}
}
// Function 11 with degree 0
// nq: 7, na: 6, ng: 9
void func11R(qbit **q, int n) {
printf("func11R\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[9]; // interacting bits
	qbit *res[4];
	nb[0] = q[6];
	nb[1] = q[1];
	nb[2] = q[4];
	nb[3] = q[2];
	nb[4] = q[6];
	nb[5] = q[2];
	nb[6] = q[1];
	nb[7] = q[5];
	nb[8] = q[0];
	res[0] = q[6];
	res[1] = q[3];
	res[2] = q[1];
	res[3] = q[4];
	// Leaf function
	_computeModule(0, 6, 22, 13, 0, 2, 0);
	acquire(6, anc, 9, nb);
	Recompute (res, 0, anc, 6, 22, 13){
		CNOT( anc[3], q[0] );
		CNOT( anc[4], anc[2] );
		CNOT( anc[3], anc[5] );
		Toffoli( anc[3], q[1], q[5] );
		CNOT( q[6], q[2] );
		CNOT( anc[2], anc[4] );
		Toffoli( q[4], anc[2], q[2] );
		Toffoli( anc[4], q[1], anc[3] );
		Toffoli( anc[0], q[6], anc[1] );
	}
	Restore {
		CNOT( anc[1], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( anc[3], res[2] );
		CNOT( q[6], res[3] );
	}
	Unrecompute {
		Toffoli( anc[0], q[6], anc[1] );
		Toffoli( anc[4], q[1], anc[3] );
		Toffoli( q[4], anc[2], q[2] );
		CNOT( anc[2], anc[4] );
		CNOT( q[6], q[2] );
		Toffoli( anc[3], q[1], q[5] );
		CNOT( anc[3], anc[5] );
		CNOT( anc[4], anc[2] );
		CNOT( anc[3], q[0] );
	} Refree(anc, 6) {}
}
// Function 10 with degree 2
// nq: 12, na: 2, ng: 9
void func10(qbit **q, int n) {
printf("func10\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[22]; // interacting bits
	qbit *res[4];
	qbit *nq0[7];
	qbit *nq1[7];
	nb[0] = q[2];
	nb[1] = q[10];
	nb[2] = q[4];
	nb[3] = q[8];
	nb[4] = q[3];
	nb[5] = q[9];
	nb[6] = q[4];
	nb[7] = q[10];
	nb[8] = q[2];
	nb[9] = q[8];
	nb[10] = q[6];
	nb[11] = q[7];
	nb[12] = q[11];
	nb[13] = q[5];
	nb[14] = q[11];
	nb[15] = q[8];
	nb[16] = q[5];
	nb[17] = q[1];
	nb[18] = q[11];
	nb[19] = q[10];
	nb[20] = q[9];
	nb[21] = q[3];
	res[0] = q[8];
	res[1] = q[7];
	res[2] = q[3];
	res[3] = q[1];
	// Non-leaf function
	Compute (0, 2, 22, 13, 2, 1, 0){
		acquire(2, anc, 22, nb);
	nq0[0] = q[0];
	nq0[1] = q[10];
	nq0[2] = q[9];
	nq0[3] = q[7];
	nq0[4] = q[8];
	nq0[5] = q[1];
	nq0[6] = anc[0];
	nq1[0] = q[11];
	nq1[1] = q[6];
	nq1[2] = anc[1];
	nq1[3] = q[3];
	nq1[4] = q[2];
	nq1[5] = q[5];
	nq1[6] = q[4];
		func11(nq0, 7);
		Toffoli( q[4], q[10], q[2] );
		CNOT( q[9], q[3] );
		CNOT( q[8], q[6] );
		CNOT( anc[1], q[9] );
		Toffoli( q[4], q[8], q[3] );
		func12(nq1, 7);
		Toffoli( q[7], q[11], q[5] );
		Toffoli( q[2], anc[0], q[10] );
		Toffoli( q[1], q[11], q[10] );
		Toffoli( q[11], q[8], q[5] );
	}
	Store {
		CNOT( q[5], res[0] );
		CNOT( q[8], res[1] );
		CNOT( q[9], res[2] );
		CNOT( q[2], res[3] );
	}
	Uncompute(res, 0, anc, 2, 22, 13){
		Toffoli( q[11], q[8], q[5] );
		Toffoli( q[1], q[11], q[10] );
		Toffoli( q[2], anc[0], q[10] );
		Toffoli( q[7], q[11], q[5] );
		func12R(nq1, 7);
		Toffoli( q[4], q[8], q[3] );
		CNOT( anc[1], q[9] );
		CNOT( q[8], q[6] );
		CNOT( q[9], q[3] );
		Toffoli( q[4], q[10], q[2] );
		func11R(nq0, 7);
	} Free(anc, 2) {}
}
// Function 10 with degree 2
// nq: 12, na: 2, ng: 9
void func10R(qbit **q, int n) {
printf("func10R\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[22]; // interacting bits
	qbit *res[4];
	qbit *nq0[7];
	qbit *nq1[7];
	nb[0] = q[2];
	nb[1] = q[10];
	nb[2] = q[4];
	nb[3] = q[8];
	nb[4] = q[3];
	nb[5] = q[9];
	nb[6] = q[4];
	nb[7] = q[10];
	nb[8] = q[2];
	nb[9] = q[8];
	nb[10] = q[6];
	nb[11] = q[7];
	nb[12] = q[11];
	nb[13] = q[5];
	nb[14] = q[11];
	nb[15] = q[8];
	nb[16] = q[5];
	nb[17] = q[1];
	nb[18] = q[11];
	nb[19] = q[10];
	nb[20] = q[9];
	nb[21] = q[3];
	res[0] = q[8];
	res[1] = q[7];
	res[2] = q[3];
	res[3] = q[1];
	// Non-leaf function
	_computeModule(0, 2, 22, 13, 2, 1, 0);
	acquire(2, anc, 22, nb);
	nq0[0] = q[0];
	nq0[1] = q[10];
	nq0[2] = q[9];
	nq0[3] = q[7];
	nq0[4] = q[8];
	nq0[5] = q[1];
	nq0[6] = anc[0];
	nq1[0] = q[11];
	nq1[1] = q[6];
	nq1[2] = anc[1];
	nq1[3] = q[3];
	nq1[4] = q[2];
	nq1[5] = q[5];
	nq1[6] = q[4];
	Recompute(res, 0, anc, 2, 22, 13){
		func11(nq0, 7);
		Toffoli( q[4], q[10], q[2] );
		CNOT( q[9], q[3] );
		CNOT( q[8], q[6] );
		CNOT( anc[1], q[9] );
		Toffoli( q[4], q[8], q[3] );
		func12(nq1, 7);
		Toffoli( q[7], q[11], q[5] );
		Toffoli( q[2], anc[0], q[10] );
		Toffoli( q[1], q[11], q[10] );
		Toffoli( q[11], q[8], q[5] );
	}
	Restore {
		CNOT( q[5], res[0] );
		CNOT( q[8], res[1] );
		CNOT( q[9], res[2] );
		CNOT( q[2], res[3] );
	}
	Unrecompute {
		Toffoli( q[11], q[8], q[5] );
		Toffoli( q[1], q[11], q[10] );
		Toffoli( q[2], anc[0], q[10] );
		Toffoli( q[7], q[11], q[5] );
		func12R(nq1, 7);
		Toffoli( q[4], q[8], q[3] );
		CNOT( anc[1], q[9] );
		CNOT( q[8], q[6] );
		CNOT( q[9], q[3] );
		Toffoli( q[4], q[10], q[2] );
		func11R(nq0, 7);
	} Refree(anc, 2) {}
}
// Function 9 with degree 1
// nq: 6, na: 6, ng: 9
void func9(qbit **q, int n) {
printf("func9\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[10]; // interacting bits
	qbit *res[3];
	qbit *nq0[12];
	nb[0] = q[3];
	nb[1] = q[2];
	nb[2] = q[2];
	nb[3] = q[1];
	nb[4] = q[5];
	nb[5] = q[4];
	nb[6] = q[3];
	nb[7] = q[5];
	nb[8] = q[3];
	nb[9] = q[4];
	res[0] = q[2];
	res[1] = q[4];
	res[2] = q[0];
	// Non-leaf function
	Compute (0, 6, 21, 12, 1, 1, 0){
		acquire(6, anc, 10, nb);
	nq0[0] = anc[0];
	nq0[1] = q[0];
	nq0[2] = anc[3];
	nq0[3] = q[1];
	nq0[4] = q[2];
	nq0[5] = q[4];
	nq0[6] = anc[2];
	nq0[7] = anc[4];
	nq0[8] = q[5];
	nq0[9] = anc[5];
	nq0[10] = anc[1];
	nq0[11] = q[3];
		Toffoli( anc[4], anc[1], anc[3] );
		Toffoli( anc[0], anc[5], q[4] );
		Toffoli( anc[3], anc[4], anc[0] );
		Toffoli( q[1], q[5], q[4] );
		Toffoli( anc[5], anc[2], anc[1] );
		CNOT( q[3], q[5] );
		Toffoli( q[3], anc[4], q[2] );
		func10(nq0, 12);
		Toffoli( q[2], anc[0], anc[2] );
		Toffoli( anc[4], q[3], anc[0] );
	}
	Store {
		CNOT( q[3], res[0] );
		CNOT( anc[4], res[1] );
		CNOT( anc[4], res[2] );
	}
	Uncompute(res, 0, anc, 6, 21, 12){
		Toffoli( anc[4], q[3], anc[0] );
		Toffoli( q[2], anc[0], anc[2] );
		func10R(nq0, 12);
		Toffoli( q[3], anc[4], q[2] );
		CNOT( q[3], q[5] );
		Toffoli( anc[5], anc[2], anc[1] );
		Toffoli( q[1], q[5], q[4] );
		Toffoli( anc[3], anc[4], anc[0] );
		Toffoli( anc[0], anc[5], q[4] );
		Toffoli( anc[4], anc[1], anc[3] );
	} Free(anc, 6) {}
}
// Function 9 with degree 1
// nq: 6, na: 6, ng: 9
void func9R(qbit **q, int n) {
printf("func9R\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[10]; // interacting bits
	qbit *res[3];
	qbit *nq0[12];
	nb[0] = q[3];
	nb[1] = q[2];
	nb[2] = q[2];
	nb[3] = q[1];
	nb[4] = q[5];
	nb[5] = q[4];
	nb[6] = q[3];
	nb[7] = q[5];
	nb[8] = q[3];
	nb[9] = q[4];
	res[0] = q[2];
	res[1] = q[4];
	res[2] = q[0];
	// Non-leaf function
	_computeModule(0, 6, 21, 12, 1, 1, 0);
	acquire(6, anc, 10, nb);
	nq0[0] = anc[0];
	nq0[1] = q[0];
	nq0[2] = anc[3];
	nq0[3] = q[1];
	nq0[4] = q[2];
	nq0[5] = q[4];
	nq0[6] = anc[2];
	nq0[7] = anc[4];
	nq0[8] = q[5];
	nq0[9] = anc[5];
	nq0[10] = anc[1];
	nq0[11] = q[3];
	Recompute(res, 0, anc, 6, 21, 12){
		Toffoli( anc[4], anc[1], anc[3] );
		Toffoli( anc[0], anc[5], q[4] );
		Toffoli( anc[3], anc[4], anc[0] );
		Toffoli( q[1], q[5], q[4] );
		Toffoli( anc[5], anc[2], anc[1] );
		CNOT( q[3], q[5] );
		Toffoli( q[3], anc[4], q[2] );
		func10(nq0, 12);
		Toffoli( q[2], anc[0], anc[2] );
		Toffoli( anc[4], q[3], anc[0] );
	}
	Restore {
		CNOT( q[3], res[0] );
		CNOT( anc[4], res[1] );
		CNOT( anc[4], res[2] );
	}
	Unrecompute {
		Toffoli( anc[4], q[3], anc[0] );
		Toffoli( q[2], anc[0], anc[2] );
		func10R(nq0, 12);
		Toffoli( q[3], anc[4], q[2] );
		CNOT( q[3], q[5] );
		Toffoli( anc[5], anc[2], anc[1] );
		Toffoli( q[1], q[5], q[4] );
		Toffoli( anc[3], anc[4], anc[0] );
		Toffoli( anc[0], anc[5], q[4] );
		Toffoli( anc[4], anc[1], anc[3] );
	} Refree(anc, 6) {}
}
// Function 8 with degree 0
// nq: 7, na: 2, ng: 6
void func8(qbit **q, int n) {
printf("func8\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[9]; // interacting bits
	qbit *res[1];
	nb[0] = q[4];
	nb[1] = q[5];
	nb[2] = q[1];
	nb[3] = q[3];
	nb[4] = q[2];
	nb[5] = q[2];
	nb[6] = q[0];
	nb[7] = q[1];
	nb[8] = q[0];
	res[0] = q[6];
	// Leaf function
	Compute (0, 2, 13, 7, 0, 2, 0) {
		acquire(2, anc, 9, nb);
		CNOT( q[4], anc[1] );
		CNOT( q[5], q[1] );
		CNOT( q[3], q[2] );
		CNOT( q[2], q[0] );
		Toffoli( anc[0], q[1], anc[1] );
		CNOT( q[0], anc[0] );
	}
	Store {
		CNOT( q[0], res[0] );
	}
	Uncompute(res, 0, anc, 2, 13, 7){
		CNOT( q[0], anc[0] );
		Toffoli( anc[0], q[1], anc[1] );
		CNOT( q[2], q[0] );
		CNOT( q[3], q[2] );
		CNOT( q[5], q[1] );
		CNOT( q[4], anc[1] );
	} Free(anc, 2) {}
}
// Function 8 with degree 0
// nq: 7, na: 2, ng: 6
void func8R(qbit **q, int n) {
printf("func8R\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[9]; // interacting bits
	qbit *res[1];
	nb[0] = q[4];
	nb[1] = q[5];
	nb[2] = q[1];
	nb[3] = q[3];
	nb[4] = q[2];
	nb[5] = q[2];
	nb[6] = q[0];
	nb[7] = q[1];
	nb[8] = q[0];
	res[0] = q[6];
	// Leaf function
	_computeModule(0, 2, 13, 7, 0, 2, 0);
	acquire(2, anc, 9, nb);
	Recompute (res, 0, anc, 2, 13, 7){
		CNOT( q[0], anc[0] );
		Toffoli( anc[0], q[1], anc[1] );
		CNOT( q[2], q[0] );
		CNOT( q[3], q[2] );
		CNOT( q[5], q[1] );
		CNOT( q[4], anc[1] );
	}
	Restore {
		CNOT( q[0], res[0] );
	}
	Unrecompute {
		CNOT( q[4], anc[1] );
		CNOT( q[5], q[1] );
		CNOT( q[3], q[2] );
		CNOT( q[2], q[0] );
		Toffoli( anc[0], q[1], anc[1] );
		CNOT( q[0], anc[0] );
	} Refree(anc, 2) {}
}
// Function 7 with degree 0
// nq: 7, na: 5, ng: 9
void func7(qbit **q, int n) {
printf("func7\n");
fflush(stderr);
	qbit *anc[5]; // ancilla
	qbit *nb[15]; // interacting bits
	qbit *res[4];
	nb[0] = q[6];
	nb[1] = q[1];
	nb[2] = q[6];
	nb[3] = q[0];
	nb[4] = q[1];
	nb[5] = q[6];
	nb[6] = q[1];
	nb[7] = q[5];
	nb[8] = q[3];
	nb[9] = q[2];
	nb[10] = q[1];
	nb[11] = q[5];
	nb[12] = q[6];
	nb[13] = q[0];
	nb[14] = q[6];
	res[0] = q[6];
	res[1] = q[2];
	res[2] = q[0];
	res[3] = q[1];
	// Leaf function
	Compute (0, 5, 22, 13, 0, 2, 0) {
		acquire(5, anc, 15, nb);
		Toffoli( q[6], q[1], anc[2] );
		CNOT( q[6], anc[3] );
		Toffoli( anc[0], q[0], q[1] );
		Toffoli( anc[4], q[6], q[1] );
		Toffoli( q[5], q[3], anc[4] );
		Toffoli( anc[1], anc[3], q[2] );
		Toffoli( q[1], q[5], anc[0] );
		Toffoli( anc[4], q[6], anc[0] );
		CNOT( q[0], q[6] );
	}
	Store {
		CNOT( anc[2], res[0] );
		CNOT( anc[4], res[1] );
		CNOT( q[5], res[2] );
		CNOT( anc[3], res[3] );
	}
	Uncompute(res, 0, anc, 5, 22, 13){
		CNOT( q[0], q[6] );
		Toffoli( anc[4], q[6], anc[0] );
		Toffoli( q[1], q[5], anc[0] );
		Toffoli( anc[1], anc[3], q[2] );
		Toffoli( q[5], q[3], anc[4] );
		Toffoli( anc[4], q[6], q[1] );
		Toffoli( anc[0], q[0], q[1] );
		CNOT( q[6], anc[3] );
		Toffoli( q[6], q[1], anc[2] );
	} Free(anc, 5) {}
}
// Function 7 with degree 0
// nq: 7, na: 5, ng: 9
void func7R(qbit **q, int n) {
printf("func7R\n");
fflush(stderr);
	qbit *anc[5]; // ancilla
	qbit *nb[15]; // interacting bits
	qbit *res[4];
	nb[0] = q[6];
	nb[1] = q[1];
	nb[2] = q[6];
	nb[3] = q[0];
	nb[4] = q[1];
	nb[5] = q[6];
	nb[6] = q[1];
	nb[7] = q[5];
	nb[8] = q[3];
	nb[9] = q[2];
	nb[10] = q[1];
	nb[11] = q[5];
	nb[12] = q[6];
	nb[13] = q[0];
	nb[14] = q[6];
	res[0] = q[6];
	res[1] = q[2];
	res[2] = q[0];
	res[3] = q[1];
	// Leaf function
	_computeModule(0, 5, 22, 13, 0, 2, 0);
	acquire(5, anc, 15, nb);
	Recompute (res, 0, anc, 5, 22, 13){
		CNOT( q[0], q[6] );
		Toffoli( anc[4], q[6], anc[0] );
		Toffoli( q[1], q[5], anc[0] );
		Toffoli( anc[1], anc[3], q[2] );
		Toffoli( q[5], q[3], anc[4] );
		Toffoli( anc[4], q[6], q[1] );
		Toffoli( anc[0], q[0], q[1] );
		CNOT( q[6], anc[3] );
		Toffoli( q[6], q[1], anc[2] );
	}
	Restore {
		CNOT( anc[2], res[0] );
		CNOT( anc[4], res[1] );
		CNOT( q[5], res[2] );
		CNOT( anc[3], res[3] );
	}
	Unrecompute {
		Toffoli( q[6], q[1], anc[2] );
		CNOT( q[6], anc[3] );
		Toffoli( anc[0], q[0], q[1] );
		Toffoli( anc[4], q[6], q[1] );
		Toffoli( q[5], q[3], anc[4] );
		Toffoli( anc[1], anc[3], q[2] );
		Toffoli( q[1], q[5], anc[0] );
		Toffoli( anc[4], q[6], anc[0] );
		CNOT( q[0], q[6] );
	} Refree(anc, 5) {}
}
// Function 6 with degree 1
// nq: 5, na: 1, ng: 10
void func6(qbit **q, int n) {
printf("func6\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[18]; // interacting bits
	qbit *res[5];
	qbit *nq0[6];
	nb[0] = q[3];
	nb[1] = q[4];
	nb[2] = q[3];
	nb[3] = q[4];
	nb[4] = q[2];
	nb[5] = q[3];
	nb[6] = q[2];
	nb[7] = q[0];
	nb[8] = q[1];
	nb[9] = q[0];
	nb[10] = q[0];
	nb[11] = q[2];
	nb[12] = q[1];
	nb[13] = q[4];
	nb[14] = q[3];
	nb[15] = q[2];
	nb[16] = q[4];
	nb[17] = q[1];
	res[0] = q[1];
	res[1] = q[4];
	res[2] = q[3];
	res[3] = q[2];
	res[4] = q[0];
	// Non-leaf function
	Compute (0, 1, 25, 15, 1, 1, 0){
		acquire(1, anc, 18, nb);
	nq0[0] = q[1];
	nq0[1] = q[0];
	nq0[2] = anc[0];
	nq0[3] = q[4];
	nq0[4] = q[2];
	nq0[5] = q[3];
		CNOT( anc[0], q[1] );
		Toffoli( q[1], anc[0], q[0] );
		Toffoli( q[4], anc[0], q[3] );
		Toffoli( q[3], q[2], q[0] );
		CNOT( q[0], q[2] );
		CNOT( anc[0], q[2] );
		CNOT( q[1], anc[0] );
		CNOT( q[3], q[4] );
		func9(nq0, 6);
		Toffoli( q[2], anc[0], q[4] );
		CNOT( q[3], q[4] );
	}
	Store {
		CNOT( q[4], res[0] );
		CNOT( q[1], res[1] );
		CNOT( q[0], res[2] );
		CNOT( q[3], res[3] );
		CNOT( anc[0], res[4] );
	}
	Uncompute(res, 0, anc, 1, 25, 15){
		CNOT( q[3], q[4] );
		Toffoli( q[2], anc[0], q[4] );
		func9R(nq0, 6);
		CNOT( q[3], q[4] );
		CNOT( q[1], anc[0] );
		CNOT( anc[0], q[2] );
		CNOT( q[0], q[2] );
		Toffoli( q[3], q[2], q[0] );
		Toffoli( q[4], anc[0], q[3] );
		Toffoli( q[1], anc[0], q[0] );
		CNOT( anc[0], q[1] );
	} Free(anc, 1) {}
}
// Function 6 with degree 1
// nq: 5, na: 1, ng: 10
void func6R(qbit **q, int n) {
printf("func6R\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[18]; // interacting bits
	qbit *res[5];
	qbit *nq0[6];
	nb[0] = q[3];
	nb[1] = q[4];
	nb[2] = q[3];
	nb[3] = q[4];
	nb[4] = q[2];
	nb[5] = q[3];
	nb[6] = q[2];
	nb[7] = q[0];
	nb[8] = q[1];
	nb[9] = q[0];
	nb[10] = q[0];
	nb[11] = q[2];
	nb[12] = q[1];
	nb[13] = q[4];
	nb[14] = q[3];
	nb[15] = q[2];
	nb[16] = q[4];
	nb[17] = q[1];
	res[0] = q[1];
	res[1] = q[4];
	res[2] = q[3];
	res[3] = q[2];
	res[4] = q[0];
	// Non-leaf function
	_computeModule(0, 1, 25, 15, 1, 1, 0);
	acquire(1, anc, 18, nb);
	nq0[0] = q[1];
	nq0[1] = q[0];
	nq0[2] = anc[0];
	nq0[3] = q[4];
	nq0[4] = q[2];
	nq0[5] = q[3];
	Recompute(res, 0, anc, 1, 25, 15){
		CNOT( anc[0], q[1] );
		Toffoli( q[1], anc[0], q[0] );
		Toffoli( q[4], anc[0], q[3] );
		Toffoli( q[3], q[2], q[0] );
		CNOT( q[0], q[2] );
		CNOT( anc[0], q[2] );
		CNOT( q[1], anc[0] );
		CNOT( q[3], q[4] );
		func9(nq0, 6);
		Toffoli( q[2], anc[0], q[4] );
		CNOT( q[3], q[4] );
	}
	Restore {
		CNOT( q[4], res[0] );
		CNOT( q[1], res[1] );
		CNOT( q[0], res[2] );
		CNOT( q[3], res[3] );
		CNOT( anc[0], res[4] );
	}
	Unrecompute {
		CNOT( q[3], q[4] );
		Toffoli( q[2], anc[0], q[4] );
		func9R(nq0, 6);
		CNOT( q[3], q[4] );
		CNOT( q[1], anc[0] );
		CNOT( anc[0], q[2] );
		CNOT( q[0], q[2] );
		Toffoli( q[3], q[2], q[0] );
		Toffoli( q[4], anc[0], q[3] );
		Toffoli( q[1], anc[0], q[0] );
		CNOT( anc[0], q[1] );
	} Refree(anc, 1) {}
}
// Function 5 with degree 2
// nq: 13, na: 1, ng: 12
void func5(qbit **q, int n) {
printf("func5\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[30]; // interacting bits
	qbit *res[6];
	qbit *nq0[7];
	qbit *nq1[7];
	nb[0] = q[11];
	nb[1] = q[2];
	nb[2] = q[1];
	nb[3] = q[11];
	nb[4] = q[2];
	nb[5] = q[0];
	nb[6] = q[1];
	nb[7] = q[11];
	nb[8] = q[3];
	nb[9] = q[9];
	nb[10] = q[5];
	nb[11] = q[10];
	nb[12] = q[2];
	nb[13] = q[2];
	nb[14] = q[10];
	nb[15] = q[1];
	nb[16] = q[3];
	nb[17] = q[6];
	nb[18] = q[0];
	nb[19] = q[8];
	nb[20] = q[4];
	nb[21] = q[6];
	nb[22] = q[4];
	nb[23] = q[10];
	nb[24] = q[6];
	nb[25] = q[3];
	nb[26] = q[0];
	nb[27] = q[11];
	nb[28] = q[8];
	nb[29] = q[2];
	res[0] = q[3];
	res[1] = q[10];
	res[2] = q[8];
	res[3] = q[7];
	res[4] = q[4];
	res[5] = q[0];
	// Non-leaf function
	Compute (0, 1, 30, 18, 2, 1, 0){
		acquire(1, anc, 30, nb);
	nq0[0] = q[9];
	nq0[1] = q[2];
	nq0[2] = q[11];
	nq0[3] = q[0];
	nq0[4] = q[4];
	nq0[5] = q[10];
	nq0[6] = q[3];
	nq1[0] = q[6];
	nq1[1] = q[12];
	nq1[2] = q[1];
	nq1[3] = q[5];
	nq1[4] = anc[0];
	nq1[5] = q[8];
	nq1[6] = q[7];
		Toffoli( q[3], q[6], q[0] );
		Toffoli( q[3], q[0], q[11] );
		Toffoli( q[6], q[4], q[10] );
		Toffoli( q[11], q[2], q[1] );
		Toffoli( anc[0], q[1], q[11] );
		CNOT( q[3], q[9] );
		CNOT( anc[0], q[6] );
		Toffoli( q[5], q[10], q[2] );
		Toffoli( q[2], q[10], q[1] );
		Toffoli( q[11], q[2], q[0] );
		func8(nq1, 7);
		func7(nq0, 7);
		CNOT( q[8], q[4] );
		CNOT( q[8], q[2] );
	}
	Store {
		CNOT( q[7], res[0] );
		CNOT( q[4], res[1] );
		CNOT( q[9], res[2] );
		CNOT( q[11], res[3] );
		CNOT( q[1], res[4] );
		CNOT( q[6], res[5] );
	}
	Uncompute(res, 0, anc, 1, 30, 18){
		CNOT( q[8], q[2] );
		CNOT( q[8], q[4] );
		func7R(nq0, 7);
		func8R(nq1, 7);
		Toffoli( q[11], q[2], q[0] );
		Toffoli( q[2], q[10], q[1] );
		Toffoli( q[5], q[10], q[2] );
		CNOT( anc[0], q[6] );
		CNOT( q[3], q[9] );
		Toffoli( anc[0], q[1], q[11] );
		Toffoli( q[11], q[2], q[1] );
		Toffoli( q[6], q[4], q[10] );
		Toffoli( q[3], q[0], q[11] );
		Toffoli( q[3], q[6], q[0] );
	} Free(anc, 1) {}
}
// Function 5 with degree 2
// nq: 13, na: 1, ng: 12
void func5R(qbit **q, int n) {
printf("func5R\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[30]; // interacting bits
	qbit *res[6];
	qbit *nq0[7];
	qbit *nq1[7];
	nb[0] = q[11];
	nb[1] = q[2];
	nb[2] = q[1];
	nb[3] = q[11];
	nb[4] = q[2];
	nb[5] = q[0];
	nb[6] = q[1];
	nb[7] = q[11];
	nb[8] = q[3];
	nb[9] = q[9];
	nb[10] = q[5];
	nb[11] = q[10];
	nb[12] = q[2];
	nb[13] = q[2];
	nb[14] = q[10];
	nb[15] = q[1];
	nb[16] = q[3];
	nb[17] = q[6];
	nb[18] = q[0];
	nb[19] = q[8];
	nb[20] = q[4];
	nb[21] = q[6];
	nb[22] = q[4];
	nb[23] = q[10];
	nb[24] = q[6];
	nb[25] = q[3];
	nb[26] = q[0];
	nb[27] = q[11];
	nb[28] = q[8];
	nb[29] = q[2];
	res[0] = q[3];
	res[1] = q[10];
	res[2] = q[8];
	res[3] = q[7];
	res[4] = q[4];
	res[5] = q[0];
	// Non-leaf function
	_computeModule(0, 1, 30, 18, 2, 1, 0);
	acquire(1, anc, 30, nb);
	nq0[0] = q[9];
	nq0[1] = q[2];
	nq0[2] = q[11];
	nq0[3] = q[0];
	nq0[4] = q[4];
	nq0[5] = q[10];
	nq0[6] = q[3];
	nq1[0] = q[6];
	nq1[1] = q[12];
	nq1[2] = q[1];
	nq1[3] = q[5];
	nq1[4] = anc[0];
	nq1[5] = q[8];
	nq1[6] = q[7];
	Recompute(res, 0, anc, 1, 30, 18){
		Toffoli( q[3], q[6], q[0] );
		Toffoli( q[3], q[0], q[11] );
		Toffoli( q[6], q[4], q[10] );
		Toffoli( q[11], q[2], q[1] );
		Toffoli( anc[0], q[1], q[11] );
		CNOT( q[3], q[9] );
		CNOT( anc[0], q[6] );
		Toffoli( q[5], q[10], q[2] );
		Toffoli( q[2], q[10], q[1] );
		Toffoli( q[11], q[2], q[0] );
		func8(nq1, 7);
		func7(nq0, 7);
		CNOT( q[8], q[4] );
		CNOT( q[8], q[2] );
	}
	Restore {
		CNOT( q[7], res[0] );
		CNOT( q[4], res[1] );
		CNOT( q[9], res[2] );
		CNOT( q[11], res[3] );
		CNOT( q[1], res[4] );
		CNOT( q[6], res[5] );
	}
	Unrecompute {
		CNOT( q[8], q[2] );
		CNOT( q[8], q[4] );
		func7R(nq0, 7);
		func8R(nq1, 7);
		Toffoli( q[11], q[2], q[0] );
		Toffoli( q[2], q[10], q[1] );
		Toffoli( q[5], q[10], q[2] );
		CNOT( anc[0], q[6] );
		CNOT( q[3], q[9] );
		Toffoli( anc[0], q[1], q[11] );
		Toffoli( q[11], q[2], q[1] );
		Toffoli( q[6], q[4], q[10] );
		Toffoli( q[3], q[0], q[11] );
		Toffoli( q[3], q[6], q[0] );
	} Refree(anc, 1) {}
}
// Function 4 with degree 1
// nq: 4, na: 1, ng: 1
void func4(qbit **q, int n) {
printf("func4\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[2]; // interacting bits
	qbit *res[2];
	qbit *nq0[5];
	nb[0] = q[2];
	nb[1] = q[0];
	res[0] = q[1];
	res[1] = q[2];
	// Non-leaf function
	Compute (0, 1, 4, 3, 1, 2, 0){
		acquire(1, anc, 2, nb);
	nq0[0] = q[2];
	nq0[1] = q[0];
	nq0[2] = anc[0];
	nq0[3] = q[3];
	nq0[4] = q[1];
		Toffoli( anc[0], q[2], q[0] );
		func6(nq0, 5);
	}
	Store {
		CNOT( q[2], res[0] );
		CNOT( q[3], res[1] );
	}
	Uncompute(res, 0, anc, 1, 4, 3){
		func6R(nq0, 5);
		Toffoli( anc[0], q[2], q[0] );
	} Free(anc, 1) {}
}
// Function 4 with degree 1
// nq: 4, na: 1, ng: 1
void func4R(qbit **q, int n) {
printf("func4R\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[2]; // interacting bits
	qbit *res[2];
	qbit *nq0[5];
	nb[0] = q[2];
	nb[1] = q[0];
	res[0] = q[1];
	res[1] = q[2];
	// Non-leaf function
	_computeModule(0, 1, 4, 3, 1, 2, 0);
	acquire(1, anc, 2, nb);
	nq0[0] = q[2];
	nq0[1] = q[0];
	nq0[2] = anc[0];
	nq0[3] = q[3];
	nq0[4] = q[1];
	Recompute(res, 0, anc, 1, 4, 3){
		Toffoli( anc[0], q[2], q[0] );
		func6(nq0, 5);
	}
	Restore {
		CNOT( q[2], res[0] );
		CNOT( q[3], res[1] );
	}
	Unrecompute {
		func6R(nq0, 5);
		Toffoli( anc[0], q[2], q[0] );
	} Refree(anc, 1) {}
}
// Function 3 with degree 0
// nq: 4, na: 6, ng: 15
void func3(qbit **q, int n) {
printf("func3\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[13]; // interacting bits
	qbit *res[4];
	nb[0] = q[2];
	nb[1] = q[1];
	nb[2] = q[1];
	nb[3] = q[1];
	nb[4] = q[3];
	nb[5] = q[1];
	nb[6] = q[3];
	nb[7] = q[2];
	nb[8] = q[0];
	nb[9] = q[3];
	nb[10] = q[1];
	nb[11] = q[0];
	nb[12] = q[3];
	res[0] = q[1];
	res[1] = q[0];
	res[2] = q[3];
	res[3] = q[2];
	// Leaf function
	Compute (0, 6, 34, 19, 0, 2, 0) {
		acquire(6, anc, 13, nb);
		CNOT( anc[0], anc[5] );
		Toffoli( q[2], anc[4], q[1] );
		CNOT( q[1], anc[2] );
		Toffoli( anc[5], q[1], q[3] );
		Toffoli( anc[2], q[1], anc[1] );
		Toffoli( anc[0], q[3], anc[3] );
		CNOT( anc[5], anc[3] );
		CNOT( anc[3], anc[1] );
		CNOT( anc[4], anc[5] );
		Toffoli( anc[3], anc[2], q[2] );
		CNOT( anc[2], anc[0] );
		Toffoli( q[0], anc[0], q[3] );
		Toffoli( anc[1], q[1], q[0] );
		CNOT( q[3], anc[5] );
		CNOT( anc[5], anc[3] );
	}
	Store {
		CNOT( q[0], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( anc[5], res[2] );
		CNOT( anc[3], res[3] );
	}
	Uncompute(res, 0, anc, 6, 34, 19){
		CNOT( anc[5], anc[3] );
		CNOT( q[3], anc[5] );
		Toffoli( anc[1], q[1], q[0] );
		Toffoli( q[0], anc[0], q[3] );
		CNOT( anc[2], anc[0] );
		Toffoli( anc[3], anc[2], q[2] );
		CNOT( anc[4], anc[5] );
		CNOT( anc[3], anc[1] );
		CNOT( anc[5], anc[3] );
		Toffoli( anc[0], q[3], anc[3] );
		Toffoli( anc[2], q[1], anc[1] );
		Toffoli( anc[5], q[1], q[3] );
		CNOT( q[1], anc[2] );
		Toffoli( q[2], anc[4], q[1] );
		CNOT( anc[0], anc[5] );
	} Free(anc, 6) {}
}
// Function 3 with degree 0
// nq: 4, na: 6, ng: 15
void func3R(qbit **q, int n) {
printf("func3R\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[13]; // interacting bits
	qbit *res[4];
	nb[0] = q[2];
	nb[1] = q[1];
	nb[2] = q[1];
	nb[3] = q[1];
	nb[4] = q[3];
	nb[5] = q[1];
	nb[6] = q[3];
	nb[7] = q[2];
	nb[8] = q[0];
	nb[9] = q[3];
	nb[10] = q[1];
	nb[11] = q[0];
	nb[12] = q[3];
	res[0] = q[1];
	res[1] = q[0];
	res[2] = q[3];
	res[3] = q[2];
	// Leaf function
	_computeModule(0, 6, 34, 19, 0, 2, 0);
	acquire(6, anc, 13, nb);
	Recompute (res, 0, anc, 6, 34, 19){
		CNOT( anc[5], anc[3] );
		CNOT( q[3], anc[5] );
		Toffoli( anc[1], q[1], q[0] );
		Toffoli( q[0], anc[0], q[3] );
		CNOT( anc[2], anc[0] );
		Toffoli( anc[3], anc[2], q[2] );
		CNOT( anc[4], anc[5] );
		CNOT( anc[3], anc[1] );
		CNOT( anc[5], anc[3] );
		Toffoli( anc[0], q[3], anc[3] );
		Toffoli( anc[2], q[1], anc[1] );
		Toffoli( anc[5], q[1], q[3] );
		CNOT( q[1], anc[2] );
		Toffoli( q[2], anc[4], q[1] );
		CNOT( anc[0], anc[5] );
	}
	Restore {
		CNOT( q[0], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( anc[5], res[2] );
		CNOT( anc[3], res[3] );
	}
	Unrecompute {
		CNOT( anc[0], anc[5] );
		Toffoli( q[2], anc[4], q[1] );
		CNOT( q[1], anc[2] );
		Toffoli( anc[5], q[1], q[3] );
		Toffoli( anc[2], q[1], anc[1] );
		Toffoli( anc[0], q[3], anc[3] );
		CNOT( anc[5], anc[3] );
		CNOT( anc[3], anc[1] );
		CNOT( anc[4], anc[5] );
		Toffoli( anc[3], anc[2], q[2] );
		CNOT( anc[2], anc[0] );
		Toffoli( q[0], anc[0], q[3] );
		Toffoli( anc[1], q[1], q[0] );
		CNOT( q[3], anc[5] );
		CNOT( anc[5], anc[3] );
	} Refree(anc, 6) {}
}
// Function 2 with degree 1
// nq: 8, na: 5, ng: 12
void func2(qbit **q, int n) {
printf("func2\n");
fflush(stderr);
	qbit *anc[5]; // ancilla
	qbit *nb[20]; // interacting bits
	qbit *res[8];
	qbit *nq0[13];
	nb[0] = q[1];
	nb[1] = q[4];
	nb[2] = q[3];
	nb[3] = q[2];
	nb[4] = q[0];
	nb[5] = q[7];
	nb[6] = q[2];
	nb[7] = q[5];
	nb[8] = q[3];
	nb[9] = q[5];
	nb[10] = q[1];
	nb[11] = q[7];
	nb[12] = q[1];
	nb[13] = q[0];
	nb[14] = q[7];
	nb[15] = q[1];
	nb[16] = q[7];
	nb[17] = q[0];
	nb[18] = q[0];
	nb[19] = q[4];
	res[0] = q[4];
	res[1] = q[5];
	res[2] = q[7];
	res[3] = q[6];
	res[4] = q[1];
	res[5] = q[0];
	res[6] = q[3];
	res[7] = q[2];
	// Non-leaf function
	Compute (0, 5, 32, 20, 1, 64, 0){
		acquire(5, anc, 20, nb);
	nq0[0] = anc[4];
	nq0[1] = q[3];
	nq0[2] = q[6];
	nq0[3] = q[0];
	nq0[4] = anc[0];
	nq0[5] = anc[3];
	nq0[6] = q[4];
	nq0[7] = anc[2];
	nq0[8] = anc[1];
	nq0[9] = q[1];
	nq0[10] = q[2];
	nq0[11] = q[5];
	nq0[12] = q[7];
		CNOT( q[1], q[7] );
		CNOT( q[1], q[4] );
		Toffoli( q[7], q[1], anc[2] );
		Toffoli( q[5], anc[4], anc[3] );
		CNOT( q[2], q[5] );
		CNOT( q[3], q[2] );
		Toffoli( q[7], q[0], anc[1] );
		Toffoli( anc[3], q[0], q[7] );
		Toffoli( q[1], q[0], anc[0] );
		CNOT( anc[4], anc[1] );
		func5(nq0, 13);
		CNOT( anc[3], q[3] );
		Toffoli( anc[0], q[0], q[4] );
	}
	Store {
		CNOT( q[2], res[0] );
		CNOT( anc[4], res[1] );
		CNOT( anc[2], res[2] );
		CNOT( anc[0], res[3] );
		CNOT( anc[3], res[4] );
		CNOT( anc[1], res[5] );
		CNOT( q[4], res[6] );
		CNOT( q[7], res[7] );
	}
	Uncompute(res, 0, anc, 5, 32, 20){
		Toffoli( anc[0], q[0], q[4] );
		CNOT( anc[3], q[3] );
		func5R(nq0, 13);
		CNOT( anc[4], anc[1] );
		Toffoli( q[1], q[0], anc[0] );
		Toffoli( anc[3], q[0], q[7] );
		Toffoli( q[7], q[0], anc[1] );
		CNOT( q[3], q[2] );
		CNOT( q[2], q[5] );
		Toffoli( q[5], anc[4], anc[3] );
		Toffoli( q[7], q[1], anc[2] );
		CNOT( q[1], q[4] );
		CNOT( q[1], q[7] );
	} Free(anc, 5) {}
}
// Function 2 with degree 1
// nq: 8, na: 5, ng: 12
void func2R(qbit **q, int n) {
printf("func2R\n");
fflush(stderr);
	qbit *anc[5]; // ancilla
	qbit *nb[20]; // interacting bits
	qbit *res[8];
	qbit *nq0[13];
	nb[0] = q[1];
	nb[1] = q[4];
	nb[2] = q[3];
	nb[3] = q[2];
	nb[4] = q[0];
	nb[5] = q[7];
	nb[6] = q[2];
	nb[7] = q[5];
	nb[8] = q[3];
	nb[9] = q[5];
	nb[10] = q[1];
	nb[11] = q[7];
	nb[12] = q[1];
	nb[13] = q[0];
	nb[14] = q[7];
	nb[15] = q[1];
	nb[16] = q[7];
	nb[17] = q[0];
	nb[18] = q[0];
	nb[19] = q[4];
	res[0] = q[4];
	res[1] = q[5];
	res[2] = q[7];
	res[3] = q[6];
	res[4] = q[1];
	res[5] = q[0];
	res[6] = q[3];
	res[7] = q[2];
	// Non-leaf function
	_computeModule(0, 5, 32, 20, 1, 64, 0);
	acquire(5, anc, 20, nb);
	nq0[0] = anc[4];
	nq0[1] = q[3];
	nq0[2] = q[6];
	nq0[3] = q[0];
	nq0[4] = anc[0];
	nq0[5] = anc[3];
	nq0[6] = q[4];
	nq0[7] = anc[2];
	nq0[8] = anc[1];
	nq0[9] = q[1];
	nq0[10] = q[2];
	nq0[11] = q[5];
	nq0[12] = q[7];
	Recompute(res, 0, anc, 5, 32, 20){
		CNOT( q[1], q[7] );
		CNOT( q[1], q[4] );
		Toffoli( q[7], q[1], anc[2] );
		Toffoli( q[5], anc[4], anc[3] );
		CNOT( q[2], q[5] );
		CNOT( q[3], q[2] );
		Toffoli( q[7], q[0], anc[1] );
		Toffoli( anc[3], q[0], q[7] );
		Toffoli( q[1], q[0], anc[0] );
		CNOT( anc[4], anc[1] );
		func5(nq0, 13);
		CNOT( anc[3], q[3] );
		Toffoli( anc[0], q[0], q[4] );
	}
	Restore {
		CNOT( q[2], res[0] );
		CNOT( anc[4], res[1] );
		CNOT( anc[2], res[2] );
		CNOT( anc[0], res[3] );
		CNOT( anc[3], res[4] );
		CNOT( anc[1], res[5] );
		CNOT( q[4], res[6] );
		CNOT( q[7], res[7] );
	}
	Unrecompute {
		Toffoli( anc[0], q[0], q[4] );
		CNOT( anc[3], q[3] );
		func5R(nq0, 13);
		CNOT( anc[4], anc[1] );
		Toffoli( q[1], q[0], anc[0] );
		Toffoli( anc[3], q[0], q[7] );
		Toffoli( q[7], q[0], anc[1] );
		CNOT( q[3], q[2] );
		CNOT( q[2], q[5] );
		Toffoli( q[5], anc[4], anc[3] );
		Toffoli( q[7], q[1], anc[2] );
		CNOT( q[1], q[4] );
		CNOT( q[1], q[7] );
	} Refree(anc, 5) {}
}
// Function 1 with degree 2
// nq: 8, na: 1, ng: 3
void func1(qbit **q, int n) {
printf("func1\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[7]; // interacting bits
	qbit *res[7];
	qbit *nq0[4];
	qbit *nq1[4];
	nb[0] = q[6];
	nb[1] = q[6];
	nb[2] = q[4];
	nb[3] = q[3];
	nb[4] = q[2];
	nb[5] = q[4];
	nb[6] = q[0];
	res[0] = q[7];
	res[1] = q[4];
	res[2] = q[5];
	res[3] = q[1];
	res[4] = q[3];
	res[5] = q[0];
	res[6] = q[6];
	// Non-leaf function
	Compute (0, 1, 13, 10, 2, 64, 0){
		acquire(1, anc, 7, nb);
	nq0[0] = q[5];
	nq0[1] = anc[0];
	nq0[2] = q[6];
	nq0[3] = q[2];
	nq1[0] = q[1];
	nq1[1] = q[0];
	nq1[2] = q[4];
	nq1[3] = q[7];
		CNOT( anc[0], q[6] );
		Toffoli( q[6], q[4], q[3] );
		func4(nq1, 4);
		Toffoli( q[2], q[4], q[0] );
		func3(nq0, 4);
	}
	Store {
		CNOT( q[1], res[0] );
		CNOT( q[6], res[1] );
		CNOT( q[7], res[2] );
		CNOT( anc[0], res[3] );
		CNOT( q[4], res[4] );
		CNOT( anc[0], res[5] );
		CNOT( q[2], res[6] );
	}
	Uncompute(res, 0, anc, 1, 13, 10){
		func3R(nq0, 4);
		Toffoli( q[2], q[4], q[0] );
		func4R(nq1, 4);
		Toffoli( q[6], q[4], q[3] );
		CNOT( anc[0], q[6] );
	} Free(anc, 1) {}
}
// Function 1 with degree 2
// nq: 8, na: 1, ng: 3
void func1R(qbit **q, int n) {
printf("func1R\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[7]; // interacting bits
	qbit *res[7];
	qbit *nq0[4];
	qbit *nq1[4];
	nb[0] = q[6];
	nb[1] = q[6];
	nb[2] = q[4];
	nb[3] = q[3];
	nb[4] = q[2];
	nb[5] = q[4];
	nb[6] = q[0];
	res[0] = q[7];
	res[1] = q[4];
	res[2] = q[5];
	res[3] = q[1];
	res[4] = q[3];
	res[5] = q[0];
	res[6] = q[6];
	// Non-leaf function
	_computeModule(0, 1, 13, 10, 2, 64, 0);
	acquire(1, anc, 7, nb);
	nq0[0] = q[5];
	nq0[1] = anc[0];
	nq0[2] = q[6];
	nq0[3] = q[2];
	nq1[0] = q[1];
	nq1[1] = q[0];
	nq1[2] = q[4];
	nq1[3] = q[7];
	Recompute(res, 0, anc, 1, 13, 10){
		CNOT( anc[0], q[6] );
		Toffoli( q[6], q[4], q[3] );
		func4(nq1, 4);
		Toffoli( q[2], q[4], q[0] );
		func3(nq0, 4);
	}
	Restore {
		CNOT( q[1], res[0] );
		CNOT( q[6], res[1] );
		CNOT( q[7], res[2] );
		CNOT( anc[0], res[3] );
		CNOT( q[4], res[4] );
		CNOT( anc[0], res[5] );
		CNOT( q[2], res[6] );
	}
	Unrecompute {
		func3R(nq0, 4);
		Toffoli( q[2], q[4], q[0] );
		func4R(nq1, 4);
		Toffoli( q[6], q[4], q[3] );
		CNOT( anc[0], q[6] );
	} Refree(anc, 1) {}
}
// main function
int main() {
	qbit *new[512];
	acquire(512, new, 0, NULL);
	// Intialize inputs
	X (new[360]);
	X (new[194]);
	X (new[34]);
	X (new[473]);
	X (new[450]);
	X (new[225]);
	X (new[434]);
	X (new[249]);
	X (new[167]);
	X (new[380]);
	X (new[100]);
	X (new[131]);
	X (new[132]);
	X (new[180]);
	X (new[69]);
	X (new[321]);
	X (new[465]);
	X (new[428]);
	X (new[59]);
	X (new[297]);
	X (new[38]);
	X (new[24]);
	X (new[284]);
	X (new[207]);
	X (new[483]);
	X (new[224]);
	X (new[140]);
	X (new[193]);
	X (new[468]);
	X (new[75]);
	X (new[477]);
	X (new[338]);
	X (new[58]);
	X (new[6]);
	X (new[413]);
	X (new[152]);
	X (new[201]);
	X (new[229]);
	X (new[281]);
	X (new[289]);
	X (new[93]);
	X (new[307]);
	X (new[214]);
	X (new[327]);
	X (new[18]);
	X (new[77]);
	X (new[162]);
	X (new[137]);
	X (new[497]);
	X (new[383]);
	X (new[216]);
	X (new[158]);
	X (new[267]);
	X (new[182]);
	X (new[177]);
	X (new[134]);
	X (new[259]);
	X (new[148]);
	X (new[278]);
	X (new[115]);
	X (new[200]);
	X (new[3]);
	X (new[319]);
	X (new[147]);
	X (new[310]);
	X (new[411]);
	X (new[509]);
	X (new[40]);
	X (new[506]);
	X (new[146]);
	X (new[422]);
	X (new[128]);
	X (new[191]);
	X (new[57]);
	X (new[361]);
	X (new[72]);
	X (new[96]);
	X (new[333]);
	X (new[290]);
	X (new[375]);
	X (new[103]);
	X (new[359]);
	X (new[282]);
	// Start computation
	qbit *nq0[8];
	qbit *nq1[8];
	nq0[0] = new[1];
	nq0[1] = new[8];
	nq0[2] = new[6];
	nq0[3] = new[3];
	nq0[4] = new[15];
	nq0[5] = new[0];
	nq0[6] = new[5];
	nq0[7] = new[7];
	nq1[0] = new[11];
	nq1[1] = new[14];
	nq1[2] = new[4];
	nq1[3] = new[2];
	nq1[4] = new[9];
	nq1[5] = new[13];
	nq1[6] = new[12];
	nq1[7] = new[10];
	qbit *nq2[8];
	qbit *nq3[8];
	nq2[0] = new[17];
	nq2[1] = new[24];
	nq2[2] = new[22];
	nq2[3] = new[19];
	nq2[4] = new[31];
	nq2[5] = new[16];
	nq2[6] = new[21];
	nq2[7] = new[23];
	nq3[0] = new[27];
	nq3[1] = new[30];
	nq3[2] = new[20];
	nq3[3] = new[18];
	nq3[4] = new[25];
	nq3[5] = new[29];
	nq3[6] = new[28];
	nq3[7] = new[26];
	qbit *nq4[8];
	qbit *nq5[8];
	nq4[0] = new[33];
	nq4[1] = new[40];
	nq4[2] = new[38];
	nq4[3] = new[35];
	nq4[4] = new[47];
	nq4[5] = new[32];
	nq4[6] = new[37];
	nq4[7] = new[39];
	nq5[0] = new[43];
	nq5[1] = new[46];
	nq5[2] = new[36];
	nq5[3] = new[34];
	nq5[4] = new[41];
	nq5[5] = new[45];
	nq5[6] = new[44];
	nq5[7] = new[42];
	qbit *nq6[8];
	qbit *nq7[8];
	nq6[0] = new[49];
	nq6[1] = new[56];
	nq6[2] = new[54];
	nq6[3] = new[51];
	nq6[4] = new[63];
	nq6[5] = new[48];
	nq6[6] = new[53];
	nq6[7] = new[55];
	nq7[0] = new[59];
	nq7[1] = new[62];
	nq7[2] = new[52];
	nq7[3] = new[50];
	nq7[4] = new[57];
	nq7[5] = new[61];
	nq7[6] = new[60];
	nq7[7] = new[58];
	qbit *nq8[8];
	qbit *nq9[8];
	nq8[0] = new[65];
	nq8[1] = new[72];
	nq8[2] = new[70];
	nq8[3] = new[67];
	nq8[4] = new[79];
	nq8[5] = new[64];
	nq8[6] = new[69];
	nq8[7] = new[71];
	nq9[0] = new[75];
	nq9[1] = new[78];
	nq9[2] = new[68];
	nq9[3] = new[66];
	nq9[4] = new[73];
	nq9[5] = new[77];
	nq9[6] = new[76];
	nq9[7] = new[74];
	qbit *nq10[8];
	qbit *nq11[8];
	nq10[0] = new[81];
	nq10[1] = new[88];
	nq10[2] = new[86];
	nq10[3] = new[83];
	nq10[4] = new[95];
	nq10[5] = new[80];
	nq10[6] = new[85];
	nq10[7] = new[87];
	nq11[0] = new[91];
	nq11[1] = new[94];
	nq11[2] = new[84];
	nq11[3] = new[82];
	nq11[4] = new[89];
	nq11[5] = new[93];
	nq11[6] = new[92];
	nq11[7] = new[90];
	qbit *nq12[8];
	qbit *nq13[8];
	nq12[0] = new[97];
	nq12[1] = new[104];
	nq12[2] = new[102];
	nq12[3] = new[99];
	nq12[4] = new[111];
	nq12[5] = new[96];
	nq12[6] = new[101];
	nq12[7] = new[103];
	nq13[0] = new[107];
	nq13[1] = new[110];
	nq13[2] = new[100];
	nq13[3] = new[98];
	nq13[4] = new[105];
	nq13[5] = new[109];
	nq13[6] = new[108];
	nq13[7] = new[106];
	qbit *nq14[8];
	qbit *nq15[8];
	nq14[0] = new[113];
	nq14[1] = new[120];
	nq14[2] = new[118];
	nq14[3] = new[115];
	nq14[4] = new[127];
	nq14[5] = new[112];
	nq14[6] = new[117];
	nq14[7] = new[119];
	nq15[0] = new[123];
	nq15[1] = new[126];
	nq15[2] = new[116];
	nq15[3] = new[114];
	nq15[4] = new[121];
	nq15[5] = new[125];
	nq15[6] = new[124];
	nq15[7] = new[122];
	qbit *nq16[8];
	qbit *nq17[8];
	nq16[0] = new[129];
	nq16[1] = new[136];
	nq16[2] = new[134];
	nq16[3] = new[131];
	nq16[4] = new[143];
	nq16[5] = new[128];
	nq16[6] = new[133];
	nq16[7] = new[135];
	nq17[0] = new[139];
	nq17[1] = new[142];
	nq17[2] = new[132];
	nq17[3] = new[130];
	nq17[4] = new[137];
	nq17[5] = new[141];
	nq17[6] = new[140];
	nq17[7] = new[138];
	qbit *nq18[8];
	qbit *nq19[8];
	nq18[0] = new[145];
	nq18[1] = new[152];
	nq18[2] = new[150];
	nq18[3] = new[147];
	nq18[4] = new[159];
	nq18[5] = new[144];
	nq18[6] = new[149];
	nq18[7] = new[151];
	nq19[0] = new[155];
	nq19[1] = new[158];
	nq19[2] = new[148];
	nq19[3] = new[146];
	nq19[4] = new[153];
	nq19[5] = new[157];
	nq19[6] = new[156];
	nq19[7] = new[154];
	qbit *nq20[8];
	qbit *nq21[8];
	nq20[0] = new[161];
	nq20[1] = new[168];
	nq20[2] = new[166];
	nq20[3] = new[163];
	nq20[4] = new[175];
	nq20[5] = new[160];
	nq20[6] = new[165];
	nq20[7] = new[167];
	nq21[0] = new[171];
	nq21[1] = new[174];
	nq21[2] = new[164];
	nq21[3] = new[162];
	nq21[4] = new[169];
	nq21[5] = new[173];
	nq21[6] = new[172];
	nq21[7] = new[170];
	qbit *nq22[8];
	qbit *nq23[8];
	nq22[0] = new[177];
	nq22[1] = new[184];
	nq22[2] = new[182];
	nq22[3] = new[179];
	nq22[4] = new[191];
	nq22[5] = new[176];
	nq22[6] = new[181];
	nq22[7] = new[183];
	nq23[0] = new[187];
	nq23[1] = new[190];
	nq23[2] = new[180];
	nq23[3] = new[178];
	nq23[4] = new[185];
	nq23[5] = new[189];
	nq23[6] = new[188];
	nq23[7] = new[186];
	qbit *nq24[8];
	qbit *nq25[8];
	nq24[0] = new[193];
	nq24[1] = new[200];
	nq24[2] = new[198];
	nq24[3] = new[195];
	nq24[4] = new[207];
	nq24[5] = new[192];
	nq24[6] = new[197];
	nq24[7] = new[199];
	nq25[0] = new[203];
	nq25[1] = new[206];
	nq25[2] = new[196];
	nq25[3] = new[194];
	nq25[4] = new[201];
	nq25[5] = new[205];
	nq25[6] = new[204];
	nq25[7] = new[202];
	qbit *nq26[8];
	qbit *nq27[8];
	nq26[0] = new[209];
	nq26[1] = new[216];
	nq26[2] = new[214];
	nq26[3] = new[211];
	nq26[4] = new[223];
	nq26[5] = new[208];
	nq26[6] = new[213];
	nq26[7] = new[215];
	nq27[0] = new[219];
	nq27[1] = new[222];
	nq27[2] = new[212];
	nq27[3] = new[210];
	nq27[4] = new[217];
	nq27[5] = new[221];
	nq27[6] = new[220];
	nq27[7] = new[218];
	qbit *nq28[8];
	qbit *nq29[8];
	nq28[0] = new[225];
	nq28[1] = new[232];
	nq28[2] = new[230];
	nq28[3] = new[227];
	nq28[4] = new[239];
	nq28[5] = new[224];
	nq28[6] = new[229];
	nq28[7] = new[231];
	nq29[0] = new[235];
	nq29[1] = new[238];
	nq29[2] = new[228];
	nq29[3] = new[226];
	nq29[4] = new[233];
	nq29[5] = new[237];
	nq29[6] = new[236];
	nq29[7] = new[234];
	qbit *nq30[8];
	qbit *nq31[8];
	nq30[0] = new[241];
	nq30[1] = new[248];
	nq30[2] = new[246];
	nq30[3] = new[243];
	nq30[4] = new[255];
	nq30[5] = new[240];
	nq30[6] = new[245];
	nq30[7] = new[247];
	nq31[0] = new[251];
	nq31[1] = new[254];
	nq31[2] = new[244];
	nq31[3] = new[242];
	nq31[4] = new[249];
	nq31[5] = new[253];
	nq31[6] = new[252];
	nq31[7] = new[250];
	qbit *nq32[8];
	qbit *nq33[8];
	nq32[0] = new[257];
	nq32[1] = new[264];
	nq32[2] = new[262];
	nq32[3] = new[259];
	nq32[4] = new[271];
	nq32[5] = new[256];
	nq32[6] = new[261];
	nq32[7] = new[263];
	nq33[0] = new[267];
	nq33[1] = new[270];
	nq33[2] = new[260];
	nq33[3] = new[258];
	nq33[4] = new[265];
	nq33[5] = new[269];
	nq33[6] = new[268];
	nq33[7] = new[266];
	qbit *nq34[8];
	qbit *nq35[8];
	nq34[0] = new[273];
	nq34[1] = new[280];
	nq34[2] = new[278];
	nq34[3] = new[275];
	nq34[4] = new[287];
	nq34[5] = new[272];
	nq34[6] = new[277];
	nq34[7] = new[279];
	nq35[0] = new[283];
	nq35[1] = new[286];
	nq35[2] = new[276];
	nq35[3] = new[274];
	nq35[4] = new[281];
	nq35[5] = new[285];
	nq35[6] = new[284];
	nq35[7] = new[282];
	qbit *nq36[8];
	qbit *nq37[8];
	nq36[0] = new[289];
	nq36[1] = new[296];
	nq36[2] = new[294];
	nq36[3] = new[291];
	nq36[4] = new[303];
	nq36[5] = new[288];
	nq36[6] = new[293];
	nq36[7] = new[295];
	nq37[0] = new[299];
	nq37[1] = new[302];
	nq37[2] = new[292];
	nq37[3] = new[290];
	nq37[4] = new[297];
	nq37[5] = new[301];
	nq37[6] = new[300];
	nq37[7] = new[298];
	qbit *nq38[8];
	qbit *nq39[8];
	nq38[0] = new[305];
	nq38[1] = new[312];
	nq38[2] = new[310];
	nq38[3] = new[307];
	nq38[4] = new[319];
	nq38[5] = new[304];
	nq38[6] = new[309];
	nq38[7] = new[311];
	nq39[0] = new[315];
	nq39[1] = new[318];
	nq39[2] = new[308];
	nq39[3] = new[306];
	nq39[4] = new[313];
	nq39[5] = new[317];
	nq39[6] = new[316];
	nq39[7] = new[314];
	qbit *nq40[8];
	qbit *nq41[8];
	nq40[0] = new[321];
	nq40[1] = new[328];
	nq40[2] = new[326];
	nq40[3] = new[323];
	nq40[4] = new[335];
	nq40[5] = new[320];
	nq40[6] = new[325];
	nq40[7] = new[327];
	nq41[0] = new[331];
	nq41[1] = new[334];
	nq41[2] = new[324];
	nq41[3] = new[322];
	nq41[4] = new[329];
	nq41[5] = new[333];
	nq41[6] = new[332];
	nq41[7] = new[330];
	qbit *nq42[8];
	qbit *nq43[8];
	nq42[0] = new[337];
	nq42[1] = new[344];
	nq42[2] = new[342];
	nq42[3] = new[339];
	nq42[4] = new[351];
	nq42[5] = new[336];
	nq42[6] = new[341];
	nq42[7] = new[343];
	nq43[0] = new[347];
	nq43[1] = new[350];
	nq43[2] = new[340];
	nq43[3] = new[338];
	nq43[4] = new[345];
	nq43[5] = new[349];
	nq43[6] = new[348];
	nq43[7] = new[346];
	qbit *nq44[8];
	qbit *nq45[8];
	nq44[0] = new[353];
	nq44[1] = new[360];
	nq44[2] = new[358];
	nq44[3] = new[355];
	nq44[4] = new[367];
	nq44[5] = new[352];
	nq44[6] = new[357];
	nq44[7] = new[359];
	nq45[0] = new[363];
	nq45[1] = new[366];
	nq45[2] = new[356];
	nq45[3] = new[354];
	nq45[4] = new[361];
	nq45[5] = new[365];
	nq45[6] = new[364];
	nq45[7] = new[362];
	qbit *nq46[8];
	qbit *nq47[8];
	nq46[0] = new[369];
	nq46[1] = new[376];
	nq46[2] = new[374];
	nq46[3] = new[371];
	nq46[4] = new[383];
	nq46[5] = new[368];
	nq46[6] = new[373];
	nq46[7] = new[375];
	nq47[0] = new[379];
	nq47[1] = new[382];
	nq47[2] = new[372];
	nq47[3] = new[370];
	nq47[4] = new[377];
	nq47[5] = new[381];
	nq47[6] = new[380];
	nq47[7] = new[378];
	qbit *nq48[8];
	qbit *nq49[8];
	nq48[0] = new[385];
	nq48[1] = new[392];
	nq48[2] = new[390];
	nq48[3] = new[387];
	nq48[4] = new[399];
	nq48[5] = new[384];
	nq48[6] = new[389];
	nq48[7] = new[391];
	nq49[0] = new[395];
	nq49[1] = new[398];
	nq49[2] = new[388];
	nq49[3] = new[386];
	nq49[4] = new[393];
	nq49[5] = new[397];
	nq49[6] = new[396];
	nq49[7] = new[394];
	qbit *nq50[8];
	qbit *nq51[8];
	nq50[0] = new[401];
	nq50[1] = new[408];
	nq50[2] = new[406];
	nq50[3] = new[403];
	nq50[4] = new[415];
	nq50[5] = new[400];
	nq50[6] = new[405];
	nq50[7] = new[407];
	nq51[0] = new[411];
	nq51[1] = new[414];
	nq51[2] = new[404];
	nq51[3] = new[402];
	nq51[4] = new[409];
	nq51[5] = new[413];
	nq51[6] = new[412];
	nq51[7] = new[410];
	qbit *nq52[8];
	qbit *nq53[8];
	nq52[0] = new[417];
	nq52[1] = new[424];
	nq52[2] = new[422];
	nq52[3] = new[419];
	nq52[4] = new[431];
	nq52[5] = new[416];
	nq52[6] = new[421];
	nq52[7] = new[423];
	nq53[0] = new[427];
	nq53[1] = new[430];
	nq53[2] = new[420];
	nq53[3] = new[418];
	nq53[4] = new[425];
	nq53[5] = new[429];
	nq53[6] = new[428];
	nq53[7] = new[426];
	qbit *nq54[8];
	qbit *nq55[8];
	nq54[0] = new[433];
	nq54[1] = new[440];
	nq54[2] = new[438];
	nq54[3] = new[435];
	nq54[4] = new[447];
	nq54[5] = new[432];
	nq54[6] = new[437];
	nq54[7] = new[439];
	nq55[0] = new[443];
	nq55[1] = new[446];
	nq55[2] = new[436];
	nq55[3] = new[434];
	nq55[4] = new[441];
	nq55[5] = new[445];
	nq55[6] = new[444];
	nq55[7] = new[442];
	qbit *nq56[8];
	qbit *nq57[8];
	nq56[0] = new[449];
	nq56[1] = new[456];
	nq56[2] = new[454];
	nq56[3] = new[451];
	nq56[4] = new[463];
	nq56[5] = new[448];
	nq56[6] = new[453];
	nq56[7] = new[455];
	nq57[0] = new[459];
	nq57[1] = new[462];
	nq57[2] = new[452];
	nq57[3] = new[450];
	nq57[4] = new[457];
	nq57[5] = new[461];
	nq57[6] = new[460];
	nq57[7] = new[458];
	qbit *nq58[8];
	qbit *nq59[8];
	nq58[0] = new[465];
	nq58[1] = new[472];
	nq58[2] = new[470];
	nq58[3] = new[467];
	nq58[4] = new[479];
	nq58[5] = new[464];
	nq58[6] = new[469];
	nq58[7] = new[471];
	nq59[0] = new[475];
	nq59[1] = new[478];
	nq59[2] = new[468];
	nq59[3] = new[466];
	nq59[4] = new[473];
	nq59[5] = new[477];
	nq59[6] = new[476];
	nq59[7] = new[474];
	qbit *nq60[8];
	qbit *nq61[8];
	nq60[0] = new[481];
	nq60[1] = new[488];
	nq60[2] = new[486];
	nq60[3] = new[483];
	nq60[4] = new[495];
	nq60[5] = new[480];
	nq60[6] = new[485];
	nq60[7] = new[487];
	nq61[0] = new[491];
	nq61[1] = new[494];
	nq61[2] = new[484];
	nq61[3] = new[482];
	nq61[4] = new[489];
	nq61[5] = new[493];
	nq61[6] = new[492];
	nq61[7] = new[490];
	qbit *nq62[8];
	qbit *nq63[8];
	nq62[0] = new[497];
	nq62[1] = new[504];
	nq62[2] = new[502];
	nq62[3] = new[499];
	nq62[4] = new[511];
	nq62[5] = new[496];
	nq62[6] = new[501];
	nq62[7] = new[503];
	nq63[0] = new[507];
	nq63[1] = new[510];
	nq63[2] = new[500];
	nq63[3] = new[498];
	nq63[4] = new[505];
	nq63[5] = new[509];
	nq63[6] = new[508];
	nq63[7] = new[506];
	func1(nq0, 8);
	func2(nq1, 8);
	func1(nq2, 8);
	func2(nq3, 8);
	func1(nq4, 8);
	func2(nq5, 8);
	func1(nq6, 8);
	func2(nq7, 8);
	func1(nq8, 8);
	func2(nq9, 8);
	func1(nq10, 8);
	func2(nq11, 8);
	func1(nq12, 8);
	func2(nq13, 8);
	func1(nq14, 8);
	func2(nq15, 8);
	func1(nq16, 8);
	func2(nq17, 8);
	func1(nq18, 8);
	func2(nq19, 8);
	func1(nq20, 8);
	func2(nq21, 8);
	func1(nq22, 8);
	func2(nq23, 8);
	func1(nq24, 8);
	func2(nq25, 8);
	func1(nq26, 8);
	func2(nq27, 8);
	func1(nq28, 8);
	func2(nq29, 8);
	func1(nq30, 8);
	func2(nq31, 8);
	func1(nq32, 8);
	func2(nq33, 8);
	func1(nq34, 8);
	func2(nq35, 8);
	func1(nq36, 8);
	func2(nq37, 8);
	func1(nq38, 8);
	func2(nq39, 8);
	func1(nq40, 8);
	func2(nq41, 8);
	func1(nq42, 8);
	func2(nq43, 8);
	func1(nq44, 8);
	func2(nq45, 8);
	func1(nq46, 8);
	func2(nq47, 8);
	func1(nq48, 8);
	func2(nq49, 8);
	func1(nq50, 8);
	func2(nq51, 8);
	func1(nq52, 8);
	func2(nq53, 8);
	func1(nq54, 8);
	func2(nq55, 8);
	func1(nq56, 8);
	func2(nq57, 8);
	func1(nq58, 8);
	func2(nq59, 8);
	func1(nq60, 8);
	func2(nq61, 8);
	func1(nq62, 8);
	func2(nq63, 8);
	return 0;
}
