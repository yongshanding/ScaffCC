// Scaffold file synthesized by para-bench.py
// qubits: 192 ancilla: 8 gates: 16 levels: 5 degrees: 2 loops: 32
#include "qalloc.h"
#include "uncompute.h"
#define LOOP 32
// Call list: 1,2;3,4;5;;6;7,8;9;;;10;11,12
// Function 12 with degree 0
// nq: 32, na: 1, ng: 12
void func12(qbit **q, int n) {
printf("func12\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[31]; // interacting bits
	qbit *res[3];
	nb[0] = q[4];
	nb[1] = q[6];
	nb[2] = q[20];
	nb[3] = q[18];
	nb[4] = q[24];
	nb[5] = q[6];
	nb[6] = q[18];
	nb[7] = q[30];
	nb[8] = q[13];
	nb[9] = q[4];
	nb[10] = q[19];
	nb[11] = q[1];
	nb[12] = q[26];
	nb[13] = q[31];
	nb[14] = q[13];
	nb[15] = q[15];
	nb[16] = q[21];
	nb[17] = q[13];
	nb[18] = q[7];
	nb[19] = q[21];
	nb[20] = q[1];
	nb[21] = q[17];
	nb[22] = q[12];
	nb[23] = q[25];
	nb[24] = q[7];
	nb[25] = q[20];
	nb[26] = q[8];
	nb[27] = q[24];
	nb[28] = q[30];
	nb[29] = q[9];
	nb[30] = q[27];
	res[0] = q[11];
	res[1] = q[21];
	res[2] = q[7];
	// Leaf function
	Compute (0, 1, 27, 15, 0, 2, 0) {
		acquire(1, anc, 31, nb);
		Toffoli( q[4], q[6], q[20] );
		Toffoli( q[18], q[24], q[6] );
		Toffoli( q[18], q[30], q[13] );
		Toffoli( q[4], q[19], q[1] );
		CNOT( q[26], q[31] );
		CNOT( q[13], q[15] );
		Toffoli( q[21], q[13], q[7] );
		CNOT( q[21], q[1] );
		Toffoli( q[17], q[12], q[25] );
		Toffoli( q[7], q[20], q[8] );
		Toffoli( anc[0], q[24], q[30] );
		CNOT( q[9], q[27] );
	}
	Store {
		CNOT( q[27], res[0] );
		CNOT( q[6], res[1] );
		CNOT( q[19], res[2] );
	}
	Uncompute(res, 0, anc, 1, 27, 15){
		CNOT( q[9], q[27] );
		Toffoli( anc[0], q[24], q[30] );
		Toffoli( q[7], q[20], q[8] );
		Toffoli( q[17], q[12], q[25] );
		CNOT( q[21], q[1] );
		Toffoli( q[21], q[13], q[7] );
		CNOT( q[13], q[15] );
		CNOT( q[26], q[31] );
		Toffoli( q[4], q[19], q[1] );
		Toffoli( q[18], q[30], q[13] );
		Toffoli( q[18], q[24], q[6] );
		Toffoli( q[4], q[6], q[20] );
	} Free(anc, 1) {}
}
// Function 12 with degree 0
// nq: 32, na: 1, ng: 12
void func12R(qbit **q, int n) {
printf("func12R\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[31]; // interacting bits
	qbit *res[3];
	nb[0] = q[4];
	nb[1] = q[6];
	nb[2] = q[20];
	nb[3] = q[18];
	nb[4] = q[24];
	nb[5] = q[6];
	nb[6] = q[18];
	nb[7] = q[30];
	nb[8] = q[13];
	nb[9] = q[4];
	nb[10] = q[19];
	nb[11] = q[1];
	nb[12] = q[26];
	nb[13] = q[31];
	nb[14] = q[13];
	nb[15] = q[15];
	nb[16] = q[21];
	nb[17] = q[13];
	nb[18] = q[7];
	nb[19] = q[21];
	nb[20] = q[1];
	nb[21] = q[17];
	nb[22] = q[12];
	nb[23] = q[25];
	nb[24] = q[7];
	nb[25] = q[20];
	nb[26] = q[8];
	nb[27] = q[24];
	nb[28] = q[30];
	nb[29] = q[9];
	nb[30] = q[27];
	res[0] = q[11];
	res[1] = q[21];
	res[2] = q[7];
	// Leaf function
	_computeModule(0, 1, 27, 15, 0, 2, 0);
	acquire(1, anc, 31, nb);
	Recompute (res, 0, anc, 1, 27, 15){
		CNOT( q[9], q[27] );
		Toffoli( anc[0], q[24], q[30] );
		Toffoli( q[7], q[20], q[8] );
		Toffoli( q[17], q[12], q[25] );
		CNOT( q[21], q[1] );
		Toffoli( q[21], q[13], q[7] );
		CNOT( q[13], q[15] );
		CNOT( q[26], q[31] );
		Toffoli( q[4], q[19], q[1] );
		Toffoli( q[18], q[30], q[13] );
		Toffoli( q[18], q[24], q[6] );
		Toffoli( q[4], q[6], q[20] );
	}
	Restore {
		CNOT( q[27], res[0] );
		CNOT( q[6], res[1] );
		CNOT( q[19], res[2] );
	}
	Unrecompute {
		Toffoli( q[4], q[6], q[20] );
		Toffoli( q[18], q[24], q[6] );
		Toffoli( q[18], q[30], q[13] );
		Toffoli( q[4], q[19], q[1] );
		CNOT( q[26], q[31] );
		CNOT( q[13], q[15] );
		Toffoli( q[21], q[13], q[7] );
		CNOT( q[21], q[1] );
		Toffoli( q[17], q[12], q[25] );
		Toffoli( q[7], q[20], q[8] );
		Toffoli( anc[0], q[24], q[30] );
		CNOT( q[9], q[27] );
	} Refree(anc, 1) {}
}
// Function 11 with degree 0
// nq: 32, na: 3, ng: 6
void func11(qbit **q, int n) {
printf("func11\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[14]; // interacting bits
	qbit *res[4];
	nb[0] = q[7];
	nb[1] = q[10];
	nb[2] = q[22];
	nb[3] = q[23];
	nb[4] = q[16];
	nb[5] = q[11];
	nb[6] = q[5];
	nb[7] = q[18];
	nb[8] = q[24];
	nb[9] = q[25];
	nb[10] = q[13];
	nb[11] = q[25];
	nb[12] = q[15];
	nb[13] = q[18];
	res[0] = q[31];
	res[1] = q[19];
	res[2] = q[22];
	res[3] = q[5];
	// Leaf function
	Compute (0, 3, 16, 10, 0, 2, 0) {
		acquire(3, anc, 14, nb);
		CNOT( anc[2], q[7] );
		Toffoli( q[10], q[22], q[23] );
		Toffoli( q[16], q[11], q[5] );
		CNOT( q[18], anc[1] );
		Toffoli( q[24], q[25], q[13] );
		Toffoli( q[25], q[15], q[18] );
	}
	Store {
		CNOT( q[17], res[0] );
		CNOT( q[29], res[1] );
		CNOT( q[28], res[2] );
		CNOT( q[3], res[3] );
	}
	Uncompute(res, 0, anc, 3, 16, 10){
		Toffoli( q[25], q[15], q[18] );
		Toffoli( q[24], q[25], q[13] );
		CNOT( q[18], anc[1] );
		Toffoli( q[16], q[11], q[5] );
		Toffoli( q[10], q[22], q[23] );
		CNOT( anc[2], q[7] );
	} Free(anc, 3) {}
}
// Function 11 with degree 0
// nq: 32, na: 3, ng: 6
void func11R(qbit **q, int n) {
printf("func11R\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[14]; // interacting bits
	qbit *res[4];
	nb[0] = q[7];
	nb[1] = q[10];
	nb[2] = q[22];
	nb[3] = q[23];
	nb[4] = q[16];
	nb[5] = q[11];
	nb[6] = q[5];
	nb[7] = q[18];
	nb[8] = q[24];
	nb[9] = q[25];
	nb[10] = q[13];
	nb[11] = q[25];
	nb[12] = q[15];
	nb[13] = q[18];
	res[0] = q[31];
	res[1] = q[19];
	res[2] = q[22];
	res[3] = q[5];
	// Leaf function
	_computeModule(0, 3, 16, 10, 0, 2, 0);
	acquire(3, anc, 14, nb);
	Recompute (res, 0, anc, 3, 16, 10){
		Toffoli( q[25], q[15], q[18] );
		Toffoli( q[24], q[25], q[13] );
		CNOT( q[18], anc[1] );
		Toffoli( q[16], q[11], q[5] );
		Toffoli( q[10], q[22], q[23] );
		CNOT( anc[2], q[7] );
	}
	Restore {
		CNOT( q[17], res[0] );
		CNOT( q[29], res[1] );
		CNOT( q[28], res[2] );
		CNOT( q[3], res[3] );
	}
	Unrecompute {
		CNOT( anc[2], q[7] );
		Toffoli( q[10], q[22], q[23] );
		Toffoli( q[16], q[11], q[5] );
		CNOT( q[18], anc[1] );
		Toffoli( q[24], q[25], q[13] );
		Toffoli( q[25], q[15], q[18] );
	} Refree(anc, 3) {}
}
// Function 10 with degree 2
// nq: 57, na: 8, ng: 14
void func10(qbit **q, int n) {
printf("func10\n");
fflush(stderr);
	qbit *anc[8]; // ancilla
	qbit *nb[28]; // interacting bits
	qbit *res[43];
	qbit *nq0[32];
	qbit *nq1[32];
	nb[0] = q[46];
	nb[1] = q[52];
	nb[2] = q[30];
	nb[3] = q[29];
	nb[4] = q[55];
	nb[5] = q[16];
	nb[6] = q[0];
	nb[7] = q[6];
	nb[8] = q[9];
	nb[9] = q[0];
	nb[10] = q[13];
	nb[11] = q[3];
	nb[12] = q[41];
	nb[13] = q[5];
	nb[14] = q[22];
	nb[15] = q[11];
	nb[16] = q[3];
	nb[17] = q[45];
	nb[18] = q[29];
	nb[19] = q[22];
	nb[20] = q[42];
	nb[21] = q[0];
	nb[22] = q[4];
	nb[23] = q[15];
	nb[24] = q[35];
	nb[25] = q[32];
	nb[26] = q[24];
	nb[27] = q[12];
	res[0] = q[7];
	res[1] = q[53];
	res[2] = q[8];
	res[3] = q[18];
	res[4] = q[6];
	res[5] = q[49];
	res[6] = q[39];
	res[7] = q[30];
	res[8] = q[24];
	res[9] = q[14];
	res[10] = q[17];
	res[11] = q[36];
	res[12] = q[44];
	res[13] = q[28];
	res[14] = q[19];
	res[15] = q[15];
	res[16] = q[42];
	res[17] = q[11];
	res[18] = q[34];
	res[19] = q[1];
	res[20] = q[35];
	res[21] = q[40];
	res[22] = q[13];
	res[23] = q[38];
	res[24] = q[55];
	res[25] = q[5];
	res[26] = q[43];
	res[27] = q[52];
	res[28] = q[26];
	res[29] = q[32];
	res[30] = q[0];
	res[31] = q[10];
	res[32] = q[33];
	res[33] = q[56];
	res[34] = q[20];
	res[35] = q[12];
	res[36] = q[47];
	res[37] = q[2];
	res[38] = q[3];
	res[39] = q[45];
	res[40] = q[16];
	res[41] = q[21];
	res[42] = q[41];
	// Non-leaf function
	Compute (0, 8, 71, 57, 2, 1, 0){
		acquire(8, anc, 28, nb);
	nq0[0] = q[7];
	nq0[1] = q[37];
	nq0[2] = q[4];
	nq0[3] = q[2];
	nq0[4] = q[33];
	nq0[5] = q[29];
	nq0[6] = q[54];
	nq0[7] = q[23];
	nq0[8] = q[53];
	nq0[9] = q[24];
	nq0[10] = q[15];
	nq0[11] = q[20];
	nq0[12] = q[48];
	nq0[13] = anc[7];
	nq0[14] = q[47];
	nq0[15] = q[46];
	nq0[16] = q[49];
	nq0[17] = q[31];
	nq0[18] = q[5];
	nq0[19] = q[0];
	nq0[20] = q[36];
	nq0[21] = q[13];
	nq0[22] = q[18];
	nq0[23] = q[16];
	nq0[24] = q[42];
	nq0[25] = q[21];
	nq0[26] = q[22];
	nq0[27] = q[6];
	nq0[28] = q[38];
	nq0[29] = q[11];
	nq0[30] = q[14];
	nq0[31] = q[39];
	nq1[0] = q[1];
	nq1[1] = anc[5];
	nq1[2] = q[9];
	nq1[3] = q[8];
	nq1[4] = q[51];
	nq1[5] = q[27];
	nq1[6] = q[56];
	nq1[7] = q[10];
	nq1[8] = q[28];
	nq1[9] = q[12];
	nq1[10] = anc[2];
	nq1[11] = q[55];
	nq1[12] = q[52];
	nq1[13] = q[25];
	nq1[14] = q[26];
	nq1[15] = q[30];
	nq1[16] = q[17];
	nq1[17] = q[3];
	nq1[18] = q[40];
	nq1[19] = q[50];
	nq1[20] = q[19];
	nq1[21] = q[45];
	nq1[22] = anc[3];
	nq1[23] = anc[6];
	nq1[24] = anc[4];
	nq1[25] = q[43];
	nq1[26] = q[34];
	nq1[27] = q[41];
	nq1[28] = q[35];
	nq1[29] = anc[1];
	nq1[30] = anc[0];
	nq1[31] = q[32];
		func11(nq0, 32);
		CNOT( anc[4], q[55] );
		CNOT( q[0], q[13] );
		Toffoli( q[3], q[45], q[29] );
		CNOT( q[30], q[29] );
		CNOT( anc[4], q[5] );
		Toffoli( q[0], q[6], q[9] );
		CNOT( q[46], q[52] );
		CNOT( q[22], q[11] );
		Toffoli( q[15], q[35], q[32] );
		CNOT( anc[3], q[16] );
		func12(nq1, 32);
		Toffoli( anc[2], q[22], q[42] );
		CNOT( q[0], q[4] );
		CNOT( q[3], q[41] );
		CNOT( q[24], q[12] );
	}
	Store {
		CNOT( q[26], res[0] );
		CNOT( q[27], res[1] );
		CNOT( q[49], res[2] );
		CNOT( q[5], res[3] );
		CNOT( q[2], res[4] );
		CNOT( anc[5], res[5] );
		CNOT( anc[6], res[6] );
		CNOT( anc[3], res[7] );
		CNOT( anc[4], res[8] );
		CNOT( q[10], res[9] );
		CNOT( q[56], res[10] );
		CNOT( q[14], res[11] );
		CNOT( q[4], res[12] );
		CNOT( q[9], res[13] );
		CNOT( q[0], res[14] );
		CNOT( q[52], res[15] );
		CNOT( q[23], res[16] );
		CNOT( q[36], res[17] );
		CNOT( q[21], res[18] );
		CNOT( q[8], res[19] );
		CNOT( q[32], res[20] );
		CNOT( q[28], res[21] );
		CNOT( q[35], res[22] );
		CNOT( q[39], res[23] );
		CNOT( q[45], res[24] );
		CNOT( q[42], res[25] );
		CNOT( q[18], res[26] );
		CNOT( q[54], res[27] );
		CNOT( q[43], res[28] );
		CNOT( q[53], res[29] );
		CNOT( q[38], res[30] );
		CNOT( q[51], res[31] );
		CNOT( anc[0], res[32] );
		CNOT( q[33], res[33] );
		CNOT( q[40], res[34] );
		CNOT( q[29], res[35] );
		CNOT( q[25], res[36] );
		CNOT( q[41], res[37] );
		CNOT( q[46], res[38] );
		CNOT( q[24], res[39] );
		CNOT( q[17], res[40] );
		CNOT( q[3], res[41] );
		CNOT( q[6], res[42] );
	}
	Uncompute(res, 0, anc, 8, 71, 57){
		CNOT( q[24], q[12] );
		CNOT( q[3], q[41] );
		CNOT( q[0], q[4] );
		Toffoli( anc[2], q[22], q[42] );
		func12R(nq1, 32);
		CNOT( anc[3], q[16] );
		Toffoli( q[15], q[35], q[32] );
		CNOT( q[22], q[11] );
		CNOT( q[46], q[52] );
		Toffoli( q[0], q[6], q[9] );
		CNOT( anc[4], q[5] );
		CNOT( q[30], q[29] );
		Toffoli( q[3], q[45], q[29] );
		CNOT( q[0], q[13] );
		CNOT( anc[4], q[55] );
		func11R(nq0, 32);
	} Free(anc, 8) {}
}
// Function 10 with degree 2
// nq: 57, na: 8, ng: 14
void func10R(qbit **q, int n) {
printf("func10R\n");
fflush(stderr);
	qbit *anc[8]; // ancilla
	qbit *nb[28]; // interacting bits
	qbit *res[43];
	qbit *nq0[32];
	qbit *nq1[32];
	nb[0] = q[46];
	nb[1] = q[52];
	nb[2] = q[30];
	nb[3] = q[29];
	nb[4] = q[55];
	nb[5] = q[16];
	nb[6] = q[0];
	nb[7] = q[6];
	nb[8] = q[9];
	nb[9] = q[0];
	nb[10] = q[13];
	nb[11] = q[3];
	nb[12] = q[41];
	nb[13] = q[5];
	nb[14] = q[22];
	nb[15] = q[11];
	nb[16] = q[3];
	nb[17] = q[45];
	nb[18] = q[29];
	nb[19] = q[22];
	nb[20] = q[42];
	nb[21] = q[0];
	nb[22] = q[4];
	nb[23] = q[15];
	nb[24] = q[35];
	nb[25] = q[32];
	nb[26] = q[24];
	nb[27] = q[12];
	res[0] = q[7];
	res[1] = q[53];
	res[2] = q[8];
	res[3] = q[18];
	res[4] = q[6];
	res[5] = q[49];
	res[6] = q[39];
	res[7] = q[30];
	res[8] = q[24];
	res[9] = q[14];
	res[10] = q[17];
	res[11] = q[36];
	res[12] = q[44];
	res[13] = q[28];
	res[14] = q[19];
	res[15] = q[15];
	res[16] = q[42];
	res[17] = q[11];
	res[18] = q[34];
	res[19] = q[1];
	res[20] = q[35];
	res[21] = q[40];
	res[22] = q[13];
	res[23] = q[38];
	res[24] = q[55];
	res[25] = q[5];
	res[26] = q[43];
	res[27] = q[52];
	res[28] = q[26];
	res[29] = q[32];
	res[30] = q[0];
	res[31] = q[10];
	res[32] = q[33];
	res[33] = q[56];
	res[34] = q[20];
	res[35] = q[12];
	res[36] = q[47];
	res[37] = q[2];
	res[38] = q[3];
	res[39] = q[45];
	res[40] = q[16];
	res[41] = q[21];
	res[42] = q[41];
	// Non-leaf function
	_computeModule(0, 8, 71, 57, 2, 1, 0);
	acquire(8, anc, 28, nb);
	nq0[0] = q[7];
	nq0[1] = q[37];
	nq0[2] = q[4];
	nq0[3] = q[2];
	nq0[4] = q[33];
	nq0[5] = q[29];
	nq0[6] = q[54];
	nq0[7] = q[23];
	nq0[8] = q[53];
	nq0[9] = q[24];
	nq0[10] = q[15];
	nq0[11] = q[20];
	nq0[12] = q[48];
	nq0[13] = anc[7];
	nq0[14] = q[47];
	nq0[15] = q[46];
	nq0[16] = q[49];
	nq0[17] = q[31];
	nq0[18] = q[5];
	nq0[19] = q[0];
	nq0[20] = q[36];
	nq0[21] = q[13];
	nq0[22] = q[18];
	nq0[23] = q[16];
	nq0[24] = q[42];
	nq0[25] = q[21];
	nq0[26] = q[22];
	nq0[27] = q[6];
	nq0[28] = q[38];
	nq0[29] = q[11];
	nq0[30] = q[14];
	nq0[31] = q[39];
	nq1[0] = q[1];
	nq1[1] = anc[5];
	nq1[2] = q[9];
	nq1[3] = q[8];
	nq1[4] = q[51];
	nq1[5] = q[27];
	nq1[6] = q[56];
	nq1[7] = q[10];
	nq1[8] = q[28];
	nq1[9] = q[12];
	nq1[10] = anc[2];
	nq1[11] = q[55];
	nq1[12] = q[52];
	nq1[13] = q[25];
	nq1[14] = q[26];
	nq1[15] = q[30];
	nq1[16] = q[17];
	nq1[17] = q[3];
	nq1[18] = q[40];
	nq1[19] = q[50];
	nq1[20] = q[19];
	nq1[21] = q[45];
	nq1[22] = anc[3];
	nq1[23] = anc[6];
	nq1[24] = anc[4];
	nq1[25] = q[43];
	nq1[26] = q[34];
	nq1[27] = q[41];
	nq1[28] = q[35];
	nq1[29] = anc[1];
	nq1[30] = anc[0];
	nq1[31] = q[32];
	Recompute(res, 0, anc, 8, 71, 57){
		func11(nq0, 32);
		CNOT( anc[4], q[55] );
		CNOT( q[0], q[13] );
		Toffoli( q[3], q[45], q[29] );
		CNOT( q[30], q[29] );
		CNOT( anc[4], q[5] );
		Toffoli( q[0], q[6], q[9] );
		CNOT( q[46], q[52] );
		CNOT( q[22], q[11] );
		Toffoli( q[15], q[35], q[32] );
		CNOT( anc[3], q[16] );
		func12(nq1, 32);
		Toffoli( anc[2], q[22], q[42] );
		CNOT( q[0], q[4] );
		CNOT( q[3], q[41] );
		CNOT( q[24], q[12] );
	}
	Restore {
		CNOT( q[26], res[0] );
		CNOT( q[27], res[1] );
		CNOT( q[49], res[2] );
		CNOT( q[5], res[3] );
		CNOT( q[2], res[4] );
		CNOT( anc[5], res[5] );
		CNOT( anc[6], res[6] );
		CNOT( anc[3], res[7] );
		CNOT( anc[4], res[8] );
		CNOT( q[10], res[9] );
		CNOT( q[56], res[10] );
		CNOT( q[14], res[11] );
		CNOT( q[4], res[12] );
		CNOT( q[9], res[13] );
		CNOT( q[0], res[14] );
		CNOT( q[52], res[15] );
		CNOT( q[23], res[16] );
		CNOT( q[36], res[17] );
		CNOT( q[21], res[18] );
		CNOT( q[8], res[19] );
		CNOT( q[32], res[20] );
		CNOT( q[28], res[21] );
		CNOT( q[35], res[22] );
		CNOT( q[39], res[23] );
		CNOT( q[45], res[24] );
		CNOT( q[42], res[25] );
		CNOT( q[18], res[26] );
		CNOT( q[54], res[27] );
		CNOT( q[43], res[28] );
		CNOT( q[53], res[29] );
		CNOT( q[38], res[30] );
		CNOT( q[51], res[31] );
		CNOT( anc[0], res[32] );
		CNOT( q[33], res[33] );
		CNOT( q[40], res[34] );
		CNOT( q[29], res[35] );
		CNOT( q[25], res[36] );
		CNOT( q[41], res[37] );
		CNOT( q[46], res[38] );
		CNOT( q[24], res[39] );
		CNOT( q[17], res[40] );
		CNOT( q[3], res[41] );
		CNOT( q[6], res[42] );
	}
	Unrecompute {
		CNOT( q[24], q[12] );
		CNOT( q[3], q[41] );
		CNOT( q[0], q[4] );
		Toffoli( anc[2], q[22], q[42] );
		func12R(nq1, 32);
		CNOT( anc[3], q[16] );
		Toffoli( q[15], q[35], q[32] );
		CNOT( q[22], q[11] );
		CNOT( q[46], q[52] );
		Toffoli( q[0], q[6], q[9] );
		CNOT( anc[4], q[5] );
		CNOT( q[30], q[29] );
		Toffoli( q[3], q[45], q[29] );
		CNOT( q[0], q[13] );
		CNOT( anc[4], q[55] );
		func11R(nq0, 32);
	} Refree(anc, 8) {}
}
// Function 9 with degree 1
// nq: 55, na: 2, ng: 8
void func9(qbit **q, int n) {
printf("func9\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[18]; // interacting bits
	qbit *res[6];
	qbit *nq0[57];
	nb[0] = q[3];
	nb[1] = q[8];
	nb[2] = q[34];
	nb[3] = q[8];
	nb[4] = q[24];
	nb[5] = q[2];
	nb[6] = q[54];
	nb[7] = q[40];
	nb[8] = q[44];
	nb[9] = q[6];
	nb[10] = q[15];
	nb[11] = q[31];
	nb[12] = q[34];
	nb[13] = q[18];
	nb[14] = q[20];
	nb[15] = q[13];
	nb[16] = q[6];
	nb[17] = q[21];
	res[0] = q[17];
	res[1] = q[8];
	res[2] = q[51];
	res[3] = q[27];
	res[4] = q[7];
	res[5] = q[34];
	// Non-leaf function
	Compute (0, 2, 22, 14, 1, 1, 0){
		acquire(2, anc, 18, nb);
	nq0[0] = q[52];
	nq0[1] = q[36];
	nq0[2] = q[32];
	nq0[3] = q[42];
	nq0[4] = q[30];
	nq0[5] = q[35];
	nq0[6] = q[44];
	nq0[7] = q[0];
	nq0[8] = q[20];
	nq0[9] = q[50];
	nq0[10] = q[51];
	nq0[11] = q[53];
	nq0[12] = q[31];
	nq0[13] = q[23];
	nq0[14] = q[19];
	nq0[15] = q[40];
	nq0[16] = q[9];
	nq0[17] = q[43];
	nq0[18] = q[49];
	nq0[19] = q[54];
	nq0[20] = q[34];
	nq0[21] = q[24];
	nq0[22] = q[33];
	nq0[23] = q[7];
	nq0[24] = q[28];
	nq0[25] = q[41];
	nq0[26] = q[16];
	nq0[27] = q[21];
	nq0[28] = q[18];
	nq0[29] = q[25];
	nq0[30] = q[14];
	nq0[31] = q[4];
	nq0[32] = q[45];
	nq0[33] = q[48];
	nq0[34] = q[27];
	nq0[35] = q[39];
	nq0[36] = q[1];
	nq0[37] = anc[1];
	nq0[38] = anc[0];
	nq0[39] = q[2];
	nq0[40] = q[11];
	nq0[41] = q[6];
	nq0[42] = q[29];
	nq0[43] = q[12];
	nq0[44] = q[46];
	nq0[45] = q[5];
	nq0[46] = q[37];
	nq0[47] = q[8];
	nq0[48] = q[22];
	nq0[49] = q[17];
	nq0[50] = q[13];
	nq0[51] = q[26];
	nq0[52] = q[15];
	nq0[53] = q[47];
	nq0[54] = q[3];
	nq0[55] = q[38];
	nq0[56] = q[10];
		CNOT( anc[0], q[31] );
		func10(nq0, 57);
		CNOT( q[34], q[18] );
		CNOT( q[6], q[15] );
		Toffoli( q[54], q[40], q[44] );
		Toffoli( q[3], q[8], q[34] );
		CNOT( q[6], q[21] );
		CNOT( q[20], q[13] );
		Toffoli( q[8], q[24], q[2] );
	}
	Store {
		CNOT( anc[0], res[0] );
		CNOT( q[19], res[1] );
		CNOT( q[35], res[2] );
		CNOT( q[24], res[3] );
		CNOT( q[25], res[4] );
		CNOT( q[15], res[5] );
	}
	Uncompute(res, 0, anc, 2, 22, 14){
		Toffoli( q[8], q[24], q[2] );
		CNOT( q[20], q[13] );
		CNOT( q[6], q[21] );
		Toffoli( q[3], q[8], q[34] );
		Toffoli( q[54], q[40], q[44] );
		CNOT( q[6], q[15] );
		CNOT( q[34], q[18] );
		func10R(nq0, 57);
		CNOT( anc[0], q[31] );
	} Free(anc, 2) {}
}
// Function 9 with degree 1
// nq: 55, na: 2, ng: 8
void func9R(qbit **q, int n) {
printf("func9R\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[18]; // interacting bits
	qbit *res[6];
	qbit *nq0[57];
	nb[0] = q[3];
	nb[1] = q[8];
	nb[2] = q[34];
	nb[3] = q[8];
	nb[4] = q[24];
	nb[5] = q[2];
	nb[6] = q[54];
	nb[7] = q[40];
	nb[8] = q[44];
	nb[9] = q[6];
	nb[10] = q[15];
	nb[11] = q[31];
	nb[12] = q[34];
	nb[13] = q[18];
	nb[14] = q[20];
	nb[15] = q[13];
	nb[16] = q[6];
	nb[17] = q[21];
	res[0] = q[17];
	res[1] = q[8];
	res[2] = q[51];
	res[3] = q[27];
	res[4] = q[7];
	res[5] = q[34];
	// Non-leaf function
	_computeModule(0, 2, 22, 14, 1, 1, 0);
	acquire(2, anc, 18, nb);
	nq0[0] = q[52];
	nq0[1] = q[36];
	nq0[2] = q[32];
	nq0[3] = q[42];
	nq0[4] = q[30];
	nq0[5] = q[35];
	nq0[6] = q[44];
	nq0[7] = q[0];
	nq0[8] = q[20];
	nq0[9] = q[50];
	nq0[10] = q[51];
	nq0[11] = q[53];
	nq0[12] = q[31];
	nq0[13] = q[23];
	nq0[14] = q[19];
	nq0[15] = q[40];
	nq0[16] = q[9];
	nq0[17] = q[43];
	nq0[18] = q[49];
	nq0[19] = q[54];
	nq0[20] = q[34];
	nq0[21] = q[24];
	nq0[22] = q[33];
	nq0[23] = q[7];
	nq0[24] = q[28];
	nq0[25] = q[41];
	nq0[26] = q[16];
	nq0[27] = q[21];
	nq0[28] = q[18];
	nq0[29] = q[25];
	nq0[30] = q[14];
	nq0[31] = q[4];
	nq0[32] = q[45];
	nq0[33] = q[48];
	nq0[34] = q[27];
	nq0[35] = q[39];
	nq0[36] = q[1];
	nq0[37] = anc[1];
	nq0[38] = anc[0];
	nq0[39] = q[2];
	nq0[40] = q[11];
	nq0[41] = q[6];
	nq0[42] = q[29];
	nq0[43] = q[12];
	nq0[44] = q[46];
	nq0[45] = q[5];
	nq0[46] = q[37];
	nq0[47] = q[8];
	nq0[48] = q[22];
	nq0[49] = q[17];
	nq0[50] = q[13];
	nq0[51] = q[26];
	nq0[52] = q[15];
	nq0[53] = q[47];
	nq0[54] = q[3];
	nq0[55] = q[38];
	nq0[56] = q[10];
	Recompute(res, 0, anc, 2, 22, 14){
		CNOT( anc[0], q[31] );
		func10(nq0, 57);
		CNOT( q[34], q[18] );
		CNOT( q[6], q[15] );
		Toffoli( q[54], q[40], q[44] );
		Toffoli( q[3], q[8], q[34] );
		CNOT( q[6], q[21] );
		CNOT( q[20], q[13] );
		Toffoli( q[8], q[24], q[2] );
	}
	Restore {
		CNOT( anc[0], res[0] );
		CNOT( q[19], res[1] );
		CNOT( q[35], res[2] );
		CNOT( q[24], res[3] );
		CNOT( q[25], res[4] );
		CNOT( q[15], res[5] );
	}
	Unrecompute {
		Toffoli( q[8], q[24], q[2] );
		CNOT( q[20], q[13] );
		CNOT( q[6], q[21] );
		Toffoli( q[3], q[8], q[34] );
		Toffoli( q[54], q[40], q[44] );
		CNOT( q[6], q[15] );
		CNOT( q[34], q[18] );
		func10R(nq0, 57);
		CNOT( anc[0], q[31] );
	} Refree(anc, 2) {}
}
// Function 8 with degree 0
// nq: 52, na: 5, ng: 14
void func8(qbit **q, int n) {
printf("func8\n");
fflush(stderr);
	qbit *anc[5]; // ancilla
	qbit *nb[28]; // interacting bits
	qbit *res[10];
	nb[0] = q[11];
	nb[1] = q[48];
	nb[2] = q[13];
	nb[3] = q[32];
	nb[4] = q[11];
	nb[5] = q[48];
	nb[6] = q[3];
	nb[7] = q[24];
	nb[8] = q[49];
	nb[9] = q[20];
	nb[10] = q[51];
	nb[11] = q[37];
	nb[12] = q[21];
	nb[13] = q[3];
	nb[14] = q[37];
	nb[15] = q[48];
	nb[16] = q[46];
	nb[17] = q[31];
	nb[18] = q[20];
	nb[19] = q[45];
	nb[20] = q[26];
	nb[21] = q[50];
	nb[22] = q[2];
	nb[23] = q[49];
	nb[24] = q[2];
	nb[25] = q[16];
	nb[26] = q[35];
	nb[27] = q[28];
	res[0] = q[27];
	res[1] = q[35];
	res[2] = q[9];
	res[3] = q[42];
	res[4] = q[17];
	res[5] = q[32];
	res[6] = q[4];
	res[7] = q[49];
	res[8] = q[43];
	res[9] = q[6];
	// Leaf function
	Compute (0, 5, 38, 24, 0, 2, 0) {
		acquire(5, anc, 28, nb);
		CNOT( q[11], q[48] );
		CNOT( anc[4], q[13] );
		CNOT( q[32], q[11] );
		CNOT( q[48], q[3] );
		CNOT( q[24], anc[2] );
		Toffoli( q[49], q[20], q[51] );
		Toffoli( q[37], q[21], q[3] );
		Toffoli( q[37], q[48], q[46] );
		CNOT( q[31], anc[0] );
		CNOT( q[20], anc[2] );
		CNOT( anc[1], q[45] );
		Toffoli( q[26], q[50], q[2] );
		CNOT( q[49], q[2] );
		Toffoli( q[16], q[35], q[28] );
	}
	Store {
		CNOT( q[45], res[0] );
		CNOT( q[49], res[1] );
		CNOT( q[31], res[2] );
		CNOT( q[27], res[3] );
		CNOT( anc[3], res[4] );
		CNOT( q[1], res[5] );
		CNOT( anc[1], res[6] );
		CNOT( q[29], res[7] );
		CNOT( q[13], res[8] );
		CNOT( q[0], res[9] );
	}
	Uncompute(res, 0, anc, 5, 38, 24){
		Toffoli( q[16], q[35], q[28] );
		CNOT( q[49], q[2] );
		Toffoli( q[26], q[50], q[2] );
		CNOT( anc[1], q[45] );
		CNOT( q[20], anc[2] );
		CNOT( q[31], anc[0] );
		Toffoli( q[37], q[48], q[46] );
		Toffoli( q[37], q[21], q[3] );
		Toffoli( q[49], q[20], q[51] );
		CNOT( q[24], anc[2] );
		CNOT( q[48], q[3] );
		CNOT( q[32], q[11] );
		CNOT( anc[4], q[13] );
		CNOT( q[11], q[48] );
	} Free(anc, 5) {}
}
// Function 8 with degree 0
// nq: 52, na: 5, ng: 14
void func8R(qbit **q, int n) {
printf("func8R\n");
fflush(stderr);
	qbit *anc[5]; // ancilla
	qbit *nb[28]; // interacting bits
	qbit *res[10];
	nb[0] = q[11];
	nb[1] = q[48];
	nb[2] = q[13];
	nb[3] = q[32];
	nb[4] = q[11];
	nb[5] = q[48];
	nb[6] = q[3];
	nb[7] = q[24];
	nb[8] = q[49];
	nb[9] = q[20];
	nb[10] = q[51];
	nb[11] = q[37];
	nb[12] = q[21];
	nb[13] = q[3];
	nb[14] = q[37];
	nb[15] = q[48];
	nb[16] = q[46];
	nb[17] = q[31];
	nb[18] = q[20];
	nb[19] = q[45];
	nb[20] = q[26];
	nb[21] = q[50];
	nb[22] = q[2];
	nb[23] = q[49];
	nb[24] = q[2];
	nb[25] = q[16];
	nb[26] = q[35];
	nb[27] = q[28];
	res[0] = q[27];
	res[1] = q[35];
	res[2] = q[9];
	res[3] = q[42];
	res[4] = q[17];
	res[5] = q[32];
	res[6] = q[4];
	res[7] = q[49];
	res[8] = q[43];
	res[9] = q[6];
	// Leaf function
	_computeModule(0, 5, 38, 24, 0, 2, 0);
	acquire(5, anc, 28, nb);
	Recompute (res, 0, anc, 5, 38, 24){
		Toffoli( q[16], q[35], q[28] );
		CNOT( q[49], q[2] );
		Toffoli( q[26], q[50], q[2] );
		CNOT( anc[1], q[45] );
		CNOT( q[20], anc[2] );
		CNOT( q[31], anc[0] );
		Toffoli( q[37], q[48], q[46] );
		Toffoli( q[37], q[21], q[3] );
		Toffoli( q[49], q[20], q[51] );
		CNOT( q[24], anc[2] );
		CNOT( q[48], q[3] );
		CNOT( q[32], q[11] );
		CNOT( anc[4], q[13] );
		CNOT( q[11], q[48] );
	}
	Restore {
		CNOT( q[45], res[0] );
		CNOT( q[49], res[1] );
		CNOT( q[31], res[2] );
		CNOT( q[27], res[3] );
		CNOT( anc[3], res[4] );
		CNOT( q[1], res[5] );
		CNOT( anc[1], res[6] );
		CNOT( q[29], res[7] );
		CNOT( q[13], res[8] );
		CNOT( q[0], res[9] );
	}
	Unrecompute {
		CNOT( q[11], q[48] );
		CNOT( anc[4], q[13] );
		CNOT( q[32], q[11] );
		CNOT( q[48], q[3] );
		CNOT( q[24], anc[2] );
		Toffoli( q[49], q[20], q[51] );
		Toffoli( q[37], q[21], q[3] );
		Toffoli( q[37], q[48], q[46] );
		CNOT( q[31], anc[0] );
		CNOT( q[20], anc[2] );
		CNOT( anc[1], q[45] );
		Toffoli( q[26], q[50], q[2] );
		CNOT( q[49], q[2] );
		Toffoli( q[16], q[35], q[28] );
	} Refree(anc, 5) {}
}
// Function 7 with degree 0
// nq: 52, na: 3, ng: 4
void func7(qbit **q, int n) {
printf("func7\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[9]; // interacting bits
	qbit *res[26];
	nb[0] = q[37];
	nb[1] = q[36];
	nb[2] = q[30];
	nb[3] = q[43];
	nb[4] = q[25];
	nb[5] = q[45];
	nb[6] = q[38];
	nb[7] = q[15];
	nb[8] = q[1];
	res[0] = q[50];
	res[1] = q[1];
	res[2] = q[8];
	res[3] = q[18];
	res[4] = q[44];
	res[5] = q[40];
	res[6] = q[4];
	res[7] = q[29];
	res[8] = q[6];
	res[9] = q[25];
	res[10] = q[24];
	res[11] = q[27];
	res[12] = q[36];
	res[13] = q[30];
	res[14] = q[31];
	res[15] = q[28];
	res[16] = q[19];
	res[17] = q[17];
	res[18] = q[48];
	res[19] = q[15];
	res[20] = q[10];
	res[21] = q[3];
	res[22] = q[41];
	res[23] = q[49];
	res[24] = q[9];
	res[25] = q[0];
	// Leaf function
	Compute (0, 3, 34, 30, 0, 2, 0) {
		acquire(3, anc, 9, nb);
		Toffoli( q[37], q[36], q[30] );
		CNOT( q[43], q[25] );
		Toffoli( q[45], anc[2], q[38] );
		CNOT( q[15], q[1] );
	}
	Store {
		CNOT( q[5], res[0] );
		CNOT( q[26], res[1] );
		CNOT( q[27], res[2] );
		CNOT( q[37], res[3] );
		CNOT( q[41], res[4] );
		CNOT( q[4], res[5] );
		CNOT( q[21], res[6] );
		CNOT( anc[0], res[7] );
		CNOT( q[20], res[8] );
		CNOT( q[38], res[9] );
		CNOT( q[3], res[10] );
		CNOT( q[39], res[11] );
		CNOT( q[22], res[12] );
		CNOT( q[44], res[13] );
		CNOT( q[14], res[14] );
		CNOT( q[7], res[15] );
		CNOT( q[42], res[16] );
		CNOT( q[51], res[17] );
		CNOT( q[13], res[18] );
		CNOT( q[33], res[19] );
		CNOT( q[23], res[20] );
		CNOT( q[2], res[21] );
		CNOT( q[9], res[22] );
		CNOT( q[28], res[23] );
		CNOT( q[24], res[24] );
		CNOT( q[18], res[25] );
	}
	Uncompute(res, 0, anc, 3, 34, 30){
		CNOT( q[15], q[1] );
		Toffoli( q[45], anc[2], q[38] );
		CNOT( q[43], q[25] );
		Toffoli( q[37], q[36], q[30] );
	} Free(anc, 3) {}
}
// Function 7 with degree 0
// nq: 52, na: 3, ng: 4
void func7R(qbit **q, int n) {
printf("func7R\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[9]; // interacting bits
	qbit *res[26];
	nb[0] = q[37];
	nb[1] = q[36];
	nb[2] = q[30];
	nb[3] = q[43];
	nb[4] = q[25];
	nb[5] = q[45];
	nb[6] = q[38];
	nb[7] = q[15];
	nb[8] = q[1];
	res[0] = q[50];
	res[1] = q[1];
	res[2] = q[8];
	res[3] = q[18];
	res[4] = q[44];
	res[5] = q[40];
	res[6] = q[4];
	res[7] = q[29];
	res[8] = q[6];
	res[9] = q[25];
	res[10] = q[24];
	res[11] = q[27];
	res[12] = q[36];
	res[13] = q[30];
	res[14] = q[31];
	res[15] = q[28];
	res[16] = q[19];
	res[17] = q[17];
	res[18] = q[48];
	res[19] = q[15];
	res[20] = q[10];
	res[21] = q[3];
	res[22] = q[41];
	res[23] = q[49];
	res[24] = q[9];
	res[25] = q[0];
	// Leaf function
	_computeModule(0, 3, 34, 30, 0, 2, 0);
	acquire(3, anc, 9, nb);
	Recompute (res, 0, anc, 3, 34, 30){
		CNOT( q[15], q[1] );
		Toffoli( q[45], anc[2], q[38] );
		CNOT( q[43], q[25] );
		Toffoli( q[37], q[36], q[30] );
	}
	Restore {
		CNOT( q[5], res[0] );
		CNOT( q[26], res[1] );
		CNOT( q[27], res[2] );
		CNOT( q[37], res[3] );
		CNOT( q[41], res[4] );
		CNOT( q[4], res[5] );
		CNOT( q[21], res[6] );
		CNOT( anc[0], res[7] );
		CNOT( q[20], res[8] );
		CNOT( q[38], res[9] );
		CNOT( q[3], res[10] );
		CNOT( q[39], res[11] );
		CNOT( q[22], res[12] );
		CNOT( q[44], res[13] );
		CNOT( q[14], res[14] );
		CNOT( q[7], res[15] );
		CNOT( q[42], res[16] );
		CNOT( q[51], res[17] );
		CNOT( q[13], res[18] );
		CNOT( q[33], res[19] );
		CNOT( q[23], res[20] );
		CNOT( q[2], res[21] );
		CNOT( q[9], res[22] );
		CNOT( q[28], res[23] );
		CNOT( q[24], res[24] );
		CNOT( q[18], res[25] );
	}
	Unrecompute {
		Toffoli( q[37], q[36], q[30] );
		CNOT( q[43], q[25] );
		Toffoli( q[45], anc[2], q[38] );
		CNOT( q[15], q[1] );
	} Refree(anc, 3) {}
}
// Function 6 with degree 1
// nq: 54, na: 1, ng: 16
void func6(qbit **q, int n) {
printf("func6\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[44]; // interacting bits
	qbit *res[50];
	qbit *nq0[55];
	nb[0] = q[9];
	nb[1] = q[21];
	nb[2] = q[41];
	nb[3] = q[38];
	nb[4] = q[44];
	nb[5] = q[39];
	nb[6] = q[26];
	nb[7] = q[25];
	nb[8] = q[50];
	nb[9] = q[20];
	nb[10] = q[3];
	nb[11] = q[13];
	nb[12] = q[16];
	nb[13] = q[6];
	nb[14] = q[31];
	nb[15] = q[20];
	nb[16] = q[2];
	nb[17] = q[13];
	nb[18] = q[22];
	nb[19] = q[35];
	nb[20] = q[0];
	nb[21] = q[5];
	nb[22] = q[38];
	nb[23] = q[28];
	nb[24] = q[29];
	nb[25] = q[15];
	nb[26] = q[42];
	nb[27] = q[37];
	nb[28] = q[46];
	nb[29] = q[5];
	nb[30] = q[48];
	nb[31] = q[6];
	nb[32] = q[44];
	nb[33] = q[23];
	nb[34] = q[46];
	nb[35] = q[4];
	nb[36] = q[20];
	nb[37] = q[53];
	nb[38] = q[10];
	nb[39] = q[9];
	nb[40] = q[24];
	nb[41] = q[6];
	nb[42] = q[17];
	nb[43] = q[26];
	res[0] = q[43];
	res[1] = q[12];
	res[2] = q[23];
	res[3] = q[46];
	res[4] = q[39];
	res[5] = q[36];
	res[6] = q[4];
	res[7] = q[16];
	res[8] = q[26];
	res[9] = q[10];
	res[10] = q[48];
	res[11] = q[30];
	res[12] = q[6];
	res[13] = q[34];
	res[14] = q[0];
	res[15] = q[52];
	res[16] = q[29];
	res[17] = q[37];
	res[18] = q[45];
	res[19] = q[35];
	res[20] = q[47];
	res[21] = q[32];
	res[22] = q[9];
	res[23] = q[14];
	res[24] = q[11];
	res[25] = q[25];
	res[26] = q[27];
	res[27] = q[1];
	res[28] = q[5];
	res[29] = q[2];
	res[30] = q[50];
	res[31] = q[51];
	res[32] = q[17];
	res[33] = q[38];
	res[34] = q[42];
	res[35] = q[13];
	res[36] = q[22];
	res[37] = q[7];
	res[38] = q[31];
	res[39] = q[19];
	res[40] = q[21];
	res[41] = q[49];
	res[42] = q[18];
	res[43] = q[3];
	res[44] = q[53];
	res[45] = q[20];
	res[46] = q[24];
	res[47] = q[44];
	res[48] = q[41];
	res[49] = q[33];
	// Non-leaf function
	Compute (0, 1, 82, 66, 1, 1, 0){
		acquire(1, anc, 44, nb);
	nq0[0] = q[2];
	nq0[1] = q[36];
	nq0[2] = q[11];
	nq0[3] = q[10];
	nq0[4] = q[22];
	nq0[5] = q[15];
	nq0[6] = q[41];
	nq0[7] = q[14];
	nq0[8] = q[53];
	nq0[9] = q[18];
	nq0[10] = q[21];
	nq0[11] = q[50];
	nq0[12] = q[52];
	nq0[13] = q[3];
	nq0[14] = q[24];
	nq0[15] = q[45];
	nq0[16] = q[46];
	nq0[17] = q[30];
	nq0[18] = q[43];
	nq0[19] = q[5];
	nq0[20] = anc[0];
	nq0[21] = q[26];
	nq0[22] = q[44];
	nq0[23] = q[39];
	nq0[24] = q[34];
	nq0[25] = q[29];
	nq0[26] = q[49];
	nq0[27] = q[16];
	nq0[28] = q[37];
	nq0[29] = q[38];
	nq0[30] = q[25];
	nq0[31] = q[27];
	nq0[32] = q[1];
	nq0[33] = q[9];
	nq0[34] = q[20];
	nq0[35] = q[12];
	nq0[36] = q[28];
	nq0[37] = q[47];
	nq0[38] = q[17];
	nq0[39] = q[35];
	nq0[40] = q[48];
	nq0[41] = q[32];
	nq0[42] = q[0];
	nq0[43] = q[51];
	nq0[44] = q[23];
	nq0[45] = q[4];
	nq0[46] = q[6];
	nq0[47] = q[7];
	nq0[48] = q[33];
	nq0[49] = q[42];
	nq0[50] = q[19];
	nq0[51] = q[31];
	nq0[52] = q[40];
	nq0[53] = q[8];
	nq0[54] = q[13];
		CNOT( q[26], q[25] );
		Toffoli( q[0], q[5], q[38] );
		Toffoli( q[42], q[37], q[46] );
		Toffoli( q[13], q[22], q[35] );
		Toffoli( q[9], q[21], q[41] );
		Toffoli( q[6], q[17], q[26] );
		CNOT( q[44], q[23] );
		CNOT( q[9], q[24] );
		Toffoli( q[20], q[53], q[10] );
		Toffoli( q[38], q[44], q[39] );
		Toffoli( q[13], q[16], q[6] );
		Toffoli( q[5], q[48], q[6] );
		Toffoli( q[28], q[29], q[15] );
		Toffoli( q[50], q[20], q[3] );
		func9(nq0, 55);
		Toffoli( q[31], q[20], q[2] );
		CNOT( q[46], q[4] );
	}
	Store {
		CNOT( q[10], res[0] );
		CNOT( q[20], res[1] );
		CNOT( q[45], res[2] );
		CNOT( q[7], res[3] );
		CNOT( q[15], res[4] );
		CNOT( q[2], res[5] );
		CNOT( q[28], res[6] );
		CNOT( q[27], res[7] );
		CNOT( q[8], res[8] );
		CNOT( q[47], res[9] );
		CNOT( q[21], res[10] );
		CNOT( q[48], res[11] );
		CNOT( q[39], res[12] );
		CNOT( anc[0], res[13] );
		CNOT( q[40], res[14] );
		CNOT( q[35], res[15] );
		CNOT( anc[0], res[16] );
		CNOT( q[46], res[17] );
		CNOT( q[16], res[18] );
		CNOT( q[3], res[19] );
		CNOT( anc[0], res[20] );
		CNOT( q[36], res[21] );
		CNOT( q[44], res[22] );
		CNOT( q[18], res[23] );
		CNOT( q[51], res[24] );
		CNOT( q[38], res[25] );
		CNOT( q[11], res[26] );
		CNOT( q[25], res[27] );
		CNOT( q[31], res[28] );
		CNOT( q[50], res[29] );
		CNOT( q[22], res[30] );
		CNOT( q[37], res[31] );
		CNOT( anc[0], res[32] );
		CNOT( q[52], res[33] );
		CNOT( q[53], res[34] );
		CNOT( q[19], res[35] );
		CNOT( q[32], res[36] );
		CNOT( q[30], res[37] );
		CNOT( q[4], res[38] );
		CNOT( q[33], res[39] );
		CNOT( q[24], res[40] );
		CNOT( q[5], res[41] );
		CNOT( q[6], res[42] );
		CNOT( q[1], res[43] );
		CNOT( q[9], res[44] );
		CNOT( q[42], res[45] );
		CNOT( q[0], res[46] );
		CNOT( q[26], res[47] );
		CNOT( q[14], res[48] );
		CNOT( q[13], res[49] );
	}
	Uncompute(res, 0, anc, 1, 82, 66){
		CNOT( q[46], q[4] );
		Toffoli( q[31], q[20], q[2] );
		func9R(nq0, 55);
		Toffoli( q[50], q[20], q[3] );
		Toffoli( q[28], q[29], q[15] );
		Toffoli( q[5], q[48], q[6] );
		Toffoli( q[13], q[16], q[6] );
		Toffoli( q[38], q[44], q[39] );
		Toffoli( q[20], q[53], q[10] );
		CNOT( q[9], q[24] );
		CNOT( q[44], q[23] );
		Toffoli( q[6], q[17], q[26] );
		Toffoli( q[9], q[21], q[41] );
		Toffoli( q[13], q[22], q[35] );
		Toffoli( q[42], q[37], q[46] );
		Toffoli( q[0], q[5], q[38] );
		CNOT( q[26], q[25] );
	} Free(anc, 1) {}
}
// Function 6 with degree 1
// nq: 54, na: 1, ng: 16
void func6R(qbit **q, int n) {
printf("func6R\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[44]; // interacting bits
	qbit *res[50];
	qbit *nq0[55];
	nb[0] = q[9];
	nb[1] = q[21];
	nb[2] = q[41];
	nb[3] = q[38];
	nb[4] = q[44];
	nb[5] = q[39];
	nb[6] = q[26];
	nb[7] = q[25];
	nb[8] = q[50];
	nb[9] = q[20];
	nb[10] = q[3];
	nb[11] = q[13];
	nb[12] = q[16];
	nb[13] = q[6];
	nb[14] = q[31];
	nb[15] = q[20];
	nb[16] = q[2];
	nb[17] = q[13];
	nb[18] = q[22];
	nb[19] = q[35];
	nb[20] = q[0];
	nb[21] = q[5];
	nb[22] = q[38];
	nb[23] = q[28];
	nb[24] = q[29];
	nb[25] = q[15];
	nb[26] = q[42];
	nb[27] = q[37];
	nb[28] = q[46];
	nb[29] = q[5];
	nb[30] = q[48];
	nb[31] = q[6];
	nb[32] = q[44];
	nb[33] = q[23];
	nb[34] = q[46];
	nb[35] = q[4];
	nb[36] = q[20];
	nb[37] = q[53];
	nb[38] = q[10];
	nb[39] = q[9];
	nb[40] = q[24];
	nb[41] = q[6];
	nb[42] = q[17];
	nb[43] = q[26];
	res[0] = q[43];
	res[1] = q[12];
	res[2] = q[23];
	res[3] = q[46];
	res[4] = q[39];
	res[5] = q[36];
	res[6] = q[4];
	res[7] = q[16];
	res[8] = q[26];
	res[9] = q[10];
	res[10] = q[48];
	res[11] = q[30];
	res[12] = q[6];
	res[13] = q[34];
	res[14] = q[0];
	res[15] = q[52];
	res[16] = q[29];
	res[17] = q[37];
	res[18] = q[45];
	res[19] = q[35];
	res[20] = q[47];
	res[21] = q[32];
	res[22] = q[9];
	res[23] = q[14];
	res[24] = q[11];
	res[25] = q[25];
	res[26] = q[27];
	res[27] = q[1];
	res[28] = q[5];
	res[29] = q[2];
	res[30] = q[50];
	res[31] = q[51];
	res[32] = q[17];
	res[33] = q[38];
	res[34] = q[42];
	res[35] = q[13];
	res[36] = q[22];
	res[37] = q[7];
	res[38] = q[31];
	res[39] = q[19];
	res[40] = q[21];
	res[41] = q[49];
	res[42] = q[18];
	res[43] = q[3];
	res[44] = q[53];
	res[45] = q[20];
	res[46] = q[24];
	res[47] = q[44];
	res[48] = q[41];
	res[49] = q[33];
	// Non-leaf function
	_computeModule(0, 1, 82, 66, 1, 1, 0);
	acquire(1, anc, 44, nb);
	nq0[0] = q[2];
	nq0[1] = q[36];
	nq0[2] = q[11];
	nq0[3] = q[10];
	nq0[4] = q[22];
	nq0[5] = q[15];
	nq0[6] = q[41];
	nq0[7] = q[14];
	nq0[8] = q[53];
	nq0[9] = q[18];
	nq0[10] = q[21];
	nq0[11] = q[50];
	nq0[12] = q[52];
	nq0[13] = q[3];
	nq0[14] = q[24];
	nq0[15] = q[45];
	nq0[16] = q[46];
	nq0[17] = q[30];
	nq0[18] = q[43];
	nq0[19] = q[5];
	nq0[20] = anc[0];
	nq0[21] = q[26];
	nq0[22] = q[44];
	nq0[23] = q[39];
	nq0[24] = q[34];
	nq0[25] = q[29];
	nq0[26] = q[49];
	nq0[27] = q[16];
	nq0[28] = q[37];
	nq0[29] = q[38];
	nq0[30] = q[25];
	nq0[31] = q[27];
	nq0[32] = q[1];
	nq0[33] = q[9];
	nq0[34] = q[20];
	nq0[35] = q[12];
	nq0[36] = q[28];
	nq0[37] = q[47];
	nq0[38] = q[17];
	nq0[39] = q[35];
	nq0[40] = q[48];
	nq0[41] = q[32];
	nq0[42] = q[0];
	nq0[43] = q[51];
	nq0[44] = q[23];
	nq0[45] = q[4];
	nq0[46] = q[6];
	nq0[47] = q[7];
	nq0[48] = q[33];
	nq0[49] = q[42];
	nq0[50] = q[19];
	nq0[51] = q[31];
	nq0[52] = q[40];
	nq0[53] = q[8];
	nq0[54] = q[13];
	Recompute(res, 0, anc, 1, 82, 66){
		CNOT( q[26], q[25] );
		Toffoli( q[0], q[5], q[38] );
		Toffoli( q[42], q[37], q[46] );
		Toffoli( q[13], q[22], q[35] );
		Toffoli( q[9], q[21], q[41] );
		Toffoli( q[6], q[17], q[26] );
		CNOT( q[44], q[23] );
		CNOT( q[9], q[24] );
		Toffoli( q[20], q[53], q[10] );
		Toffoli( q[38], q[44], q[39] );
		Toffoli( q[13], q[16], q[6] );
		Toffoli( q[5], q[48], q[6] );
		Toffoli( q[28], q[29], q[15] );
		Toffoli( q[50], q[20], q[3] );
		func9(nq0, 55);
		Toffoli( q[31], q[20], q[2] );
		CNOT( q[46], q[4] );
	}
	Restore {
		CNOT( q[10], res[0] );
		CNOT( q[20], res[1] );
		CNOT( q[45], res[2] );
		CNOT( q[7], res[3] );
		CNOT( q[15], res[4] );
		CNOT( q[2], res[5] );
		CNOT( q[28], res[6] );
		CNOT( q[27], res[7] );
		CNOT( q[8], res[8] );
		CNOT( q[47], res[9] );
		CNOT( q[21], res[10] );
		CNOT( q[48], res[11] );
		CNOT( q[39], res[12] );
		CNOT( anc[0], res[13] );
		CNOT( q[40], res[14] );
		CNOT( q[35], res[15] );
		CNOT( anc[0], res[16] );
		CNOT( q[46], res[17] );
		CNOT( q[16], res[18] );
		CNOT( q[3], res[19] );
		CNOT( anc[0], res[20] );
		CNOT( q[36], res[21] );
		CNOT( q[44], res[22] );
		CNOT( q[18], res[23] );
		CNOT( q[51], res[24] );
		CNOT( q[38], res[25] );
		CNOT( q[11], res[26] );
		CNOT( q[25], res[27] );
		CNOT( q[31], res[28] );
		CNOT( q[50], res[29] );
		CNOT( q[22], res[30] );
		CNOT( q[37], res[31] );
		CNOT( anc[0], res[32] );
		CNOT( q[52], res[33] );
		CNOT( q[53], res[34] );
		CNOT( q[19], res[35] );
		CNOT( q[32], res[36] );
		CNOT( q[30], res[37] );
		CNOT( q[4], res[38] );
		CNOT( q[33], res[39] );
		CNOT( q[24], res[40] );
		CNOT( q[5], res[41] );
		CNOT( q[6], res[42] );
		CNOT( q[1], res[43] );
		CNOT( q[9], res[44] );
		CNOT( q[42], res[45] );
		CNOT( q[0], res[46] );
		CNOT( q[26], res[47] );
		CNOT( q[14], res[48] );
		CNOT( q[13], res[49] );
	}
	Unrecompute {
		CNOT( q[46], q[4] );
		Toffoli( q[31], q[20], q[2] );
		func9R(nq0, 55);
		Toffoli( q[50], q[20], q[3] );
		Toffoli( q[28], q[29], q[15] );
		Toffoli( q[5], q[48], q[6] );
		Toffoli( q[13], q[16], q[6] );
		Toffoli( q[38], q[44], q[39] );
		Toffoli( q[20], q[53], q[10] );
		CNOT( q[9], q[24] );
		CNOT( q[44], q[23] );
		Toffoli( q[6], q[17], q[26] );
		Toffoli( q[9], q[21], q[41] );
		Toffoli( q[13], q[22], q[35] );
		Toffoli( q[42], q[37], q[46] );
		Toffoli( q[0], q[5], q[38] );
		CNOT( q[26], q[25] );
	} Refree(anc, 1) {}
}
// Function 5 with degree 2
// nq: 98, na: 6, ng: 3
void func5(qbit **q, int n) {
printf("func5\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[7]; // interacting bits
	qbit *res[9];
	qbit *nq0[52];
	qbit *nq1[52];
	nb[0] = q[78];
	nb[1] = q[64];
	nb[2] = q[75];
	nb[3] = q[27];
	nb[4] = q[90];
	nb[5] = q[93];
	nb[6] = q[90];
	res[0] = q[64];
	res[1] = q[75];
	res[2] = q[66];
	res[3] = q[61];
	res[4] = q[38];
	res[5] = q[7];
	res[6] = q[77];
	res[7] = q[86];
	res[8] = q[41];
	// Non-leaf function
	Compute (0, 6, 15, 12, 2, 1, 0){
		acquire(6, anc, 7, nb);
	nq0[0] = q[34];
	nq0[1] = q[62];
	nq0[2] = q[16];
	nq0[3] = q[39];
	nq0[4] = q[26];
	nq0[5] = q[87];
	nq0[6] = q[80];
	nq0[7] = q[70];
	nq0[8] = q[42];
	nq0[9] = q[3];
	nq0[10] = q[74];
	nq0[11] = q[50];
	nq0[12] = q[60];
	nq0[13] = q[63];
	nq0[14] = q[13];
	nq0[15] = q[54];
	nq0[16] = q[47];
	nq0[17] = q[17];
	nq0[18] = q[49];
	nq0[19] = anc[5];
	nq0[20] = q[5];
	nq0[21] = anc[1];
	nq0[22] = q[33];
	nq0[23] = q[95];
	nq0[24] = q[30];
	nq0[25] = q[91];
	nq0[26] = q[67];
	nq0[27] = q[89];
	nq0[28] = q[57];
	nq0[29] = q[37];
	nq0[30] = q[77];
	nq0[31] = q[46];
	nq0[32] = q[11];
	nq0[33] = q[18];
	nq0[34] = q[28];
	nq0[35] = q[68];
	nq0[36] = q[73];
	nq0[37] = q[27];
	nq0[38] = q[53];
	nq0[39] = q[10];
	nq0[40] = q[82];
	nq0[41] = q[69];
	nq0[42] = q[75];
	nq0[43] = q[76];
	nq0[44] = q[61];
	nq0[45] = q[14];
	nq0[46] = q[19];
	nq0[47] = q[7];
	nq0[48] = q[38];
	nq0[49] = q[36];
	nq0[50] = q[92];
	nq0[51] = q[6];
	nq1[0] = q[25];
	nq1[1] = q[66];
	nq1[2] = q[84];
	nq1[3] = q[52];
	nq1[4] = q[31];
	nq1[5] = q[90];
	nq1[6] = q[59];
	nq1[7] = q[45];
	nq1[8] = q[55];
	nq1[9] = q[20];
	nq1[10] = q[41];
	nq1[11] = anc[0];
	nq1[12] = q[58];
	nq1[13] = q[29];
	nq1[14] = q[21];
	nq1[15] = q[2];
	nq1[16] = q[40];
	nq1[17] = q[35];
	nq1[18] = anc[4];
	nq1[19] = q[24];
	nq1[20] = q[23];
	nq1[21] = q[64];
	nq1[22] = q[79];
	nq1[23] = q[86];
	nq1[24] = q[78];
	nq1[25] = q[72];
	nq1[26] = q[0];
	nq1[27] = q[65];
	nq1[28] = q[9];
	nq1[29] = anc[3];
	nq1[30] = q[12];
	nq1[31] = q[88];
	nq1[32] = q[51];
	nq1[33] = q[83];
	nq1[34] = q[48];
	nq1[35] = q[81];
	nq1[36] = q[56];
	nq1[37] = q[32];
	nq1[38] = q[71];
	nq1[39] = q[43];
	nq1[40] = q[94];
	nq1[41] = q[97];
	nq1[42] = q[22];
	nq1[43] = q[44];
	nq1[44] = q[8];
	nq1[45] = anc[2];
	nq1[46] = q[15];
	nq1[47] = q[96];
	nq1[48] = q[4];
	nq1[49] = q[85];
	nq1[50] = q[93];
	nq1[51] = q[1];
		CNOT( q[93], q[90] );
		func8(nq1, 52);
		func7(nq0, 52);
		Toffoli( q[78], q[64], q[75] );
		CNOT( q[27], q[90] );
	}
	Store {
		CNOT( q[88], res[0] );
		CNOT( q[62], res[1] );
		CNOT( q[10], res[2] );
		CNOT( q[25], res[3] );
		CNOT( q[65], res[4] );
		CNOT( anc[0], res[5] );
		CNOT( q[81], res[6] );
		CNOT( q[63], res[7] );
		CNOT( q[5], res[8] );
	}
	Uncompute(res, 0, anc, 6, 15, 12){
		CNOT( q[27], q[90] );
		Toffoli( q[78], q[64], q[75] );
		func7R(nq0, 52);
		func8R(nq1, 52);
		CNOT( q[93], q[90] );
	} Free(anc, 6) {}
}
// Function 5 with degree 2
// nq: 98, na: 6, ng: 3
void func5R(qbit **q, int n) {
printf("func5R\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[7]; // interacting bits
	qbit *res[9];
	qbit *nq0[52];
	qbit *nq1[52];
	nb[0] = q[78];
	nb[1] = q[64];
	nb[2] = q[75];
	nb[3] = q[27];
	nb[4] = q[90];
	nb[5] = q[93];
	nb[6] = q[90];
	res[0] = q[64];
	res[1] = q[75];
	res[2] = q[66];
	res[3] = q[61];
	res[4] = q[38];
	res[5] = q[7];
	res[6] = q[77];
	res[7] = q[86];
	res[8] = q[41];
	// Non-leaf function
	_computeModule(0, 6, 15, 12, 2, 1, 0);
	acquire(6, anc, 7, nb);
	nq0[0] = q[34];
	nq0[1] = q[62];
	nq0[2] = q[16];
	nq0[3] = q[39];
	nq0[4] = q[26];
	nq0[5] = q[87];
	nq0[6] = q[80];
	nq0[7] = q[70];
	nq0[8] = q[42];
	nq0[9] = q[3];
	nq0[10] = q[74];
	nq0[11] = q[50];
	nq0[12] = q[60];
	nq0[13] = q[63];
	nq0[14] = q[13];
	nq0[15] = q[54];
	nq0[16] = q[47];
	nq0[17] = q[17];
	nq0[18] = q[49];
	nq0[19] = anc[5];
	nq0[20] = q[5];
	nq0[21] = anc[1];
	nq0[22] = q[33];
	nq0[23] = q[95];
	nq0[24] = q[30];
	nq0[25] = q[91];
	nq0[26] = q[67];
	nq0[27] = q[89];
	nq0[28] = q[57];
	nq0[29] = q[37];
	nq0[30] = q[77];
	nq0[31] = q[46];
	nq0[32] = q[11];
	nq0[33] = q[18];
	nq0[34] = q[28];
	nq0[35] = q[68];
	nq0[36] = q[73];
	nq0[37] = q[27];
	nq0[38] = q[53];
	nq0[39] = q[10];
	nq0[40] = q[82];
	nq0[41] = q[69];
	nq0[42] = q[75];
	nq0[43] = q[76];
	nq0[44] = q[61];
	nq0[45] = q[14];
	nq0[46] = q[19];
	nq0[47] = q[7];
	nq0[48] = q[38];
	nq0[49] = q[36];
	nq0[50] = q[92];
	nq0[51] = q[6];
	nq1[0] = q[25];
	nq1[1] = q[66];
	nq1[2] = q[84];
	nq1[3] = q[52];
	nq1[4] = q[31];
	nq1[5] = q[90];
	nq1[6] = q[59];
	nq1[7] = q[45];
	nq1[8] = q[55];
	nq1[9] = q[20];
	nq1[10] = q[41];
	nq1[11] = anc[0];
	nq1[12] = q[58];
	nq1[13] = q[29];
	nq1[14] = q[21];
	nq1[15] = q[2];
	nq1[16] = q[40];
	nq1[17] = q[35];
	nq1[18] = anc[4];
	nq1[19] = q[24];
	nq1[20] = q[23];
	nq1[21] = q[64];
	nq1[22] = q[79];
	nq1[23] = q[86];
	nq1[24] = q[78];
	nq1[25] = q[72];
	nq1[26] = q[0];
	nq1[27] = q[65];
	nq1[28] = q[9];
	nq1[29] = anc[3];
	nq1[30] = q[12];
	nq1[31] = q[88];
	nq1[32] = q[51];
	nq1[33] = q[83];
	nq1[34] = q[48];
	nq1[35] = q[81];
	nq1[36] = q[56];
	nq1[37] = q[32];
	nq1[38] = q[71];
	nq1[39] = q[43];
	nq1[40] = q[94];
	nq1[41] = q[97];
	nq1[42] = q[22];
	nq1[43] = q[44];
	nq1[44] = q[8];
	nq1[45] = anc[2];
	nq1[46] = q[15];
	nq1[47] = q[96];
	nq1[48] = q[4];
	nq1[49] = q[85];
	nq1[50] = q[93];
	nq1[51] = q[1];
	Recompute(res, 0, anc, 6, 15, 12){
		CNOT( q[93], q[90] );
		func8(nq1, 52);
		func7(nq0, 52);
		Toffoli( q[78], q[64], q[75] );
		CNOT( q[27], q[90] );
	}
	Restore {
		CNOT( q[88], res[0] );
		CNOT( q[62], res[1] );
		CNOT( q[10], res[2] );
		CNOT( q[25], res[3] );
		CNOT( q[65], res[4] );
		CNOT( anc[0], res[5] );
		CNOT( q[81], res[6] );
		CNOT( q[63], res[7] );
		CNOT( q[5], res[8] );
	}
	Unrecompute {
		CNOT( q[27], q[90] );
		Toffoli( q[78], q[64], q[75] );
		func7R(nq0, 52);
		func8R(nq1, 52);
		CNOT( q[93], q[90] );
	} Refree(anc, 6) {}
}
// Function 4 with degree 1
// nq: 51, na: 3, ng: 11
void func4(qbit **q, int n) {
printf("func4\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[26]; // interacting bits
	qbit *res[43];
	qbit *nq0[54];
	nb[0] = q[6];
	nb[1] = q[49];
	nb[2] = q[31];
	nb[3] = q[29];
	nb[4] = q[17];
	nb[5] = q[37];
	nb[6] = q[27];
	nb[7] = q[17];
	nb[8] = q[13];
	nb[9] = q[40];
	nb[10] = q[7];
	nb[11] = q[41];
	nb[12] = q[47];
	nb[13] = q[42];
	nb[14] = q[36];
	nb[15] = q[6];
	nb[16] = q[48];
	nb[17] = q[29];
	nb[18] = q[23];
	nb[19] = q[15];
	nb[20] = q[39];
	nb[21] = q[20];
	nb[22] = q[22];
	nb[23] = q[33];
	nb[24] = q[16];
	nb[25] = q[38];
	res[0] = q[24];
	res[1] = q[4];
	res[2] = q[27];
	res[3] = q[44];
	res[4] = q[8];
	res[5] = q[42];
	res[6] = q[7];
	res[7] = q[38];
	res[8] = q[3];
	res[9] = q[0];
	res[10] = q[49];
	res[11] = q[50];
	res[12] = q[17];
	res[13] = q[23];
	res[14] = q[33];
	res[15] = q[21];
	res[16] = q[9];
	res[17] = q[1];
	res[18] = q[34];
	res[19] = q[30];
	res[20] = q[47];
	res[21] = q[43];
	res[22] = q[13];
	res[23] = q[28];
	res[24] = q[10];
	res[25] = q[41];
	res[26] = q[26];
	res[27] = q[5];
	res[28] = q[40];
	res[29] = q[6];
	res[30] = q[37];
	res[31] = q[19];
	res[32] = q[12];
	res[33] = q[29];
	res[34] = q[45];
	res[35] = q[25];
	res[36] = q[32];
	res[37] = q[31];
	res[38] = q[15];
	res[39] = q[2];
	res[40] = q[36];
	res[41] = q[35];
	res[42] = q[18];
	// Non-leaf function
	Compute (0, 3, 65, 54, 1, 2, 0){
		acquire(3, anc, 26, nb);
	nq0[0] = q[7];
	nq0[1] = q[44];
	nq0[2] = anc[2];
	nq0[3] = q[0];
	nq0[4] = q[9];
	nq0[5] = q[24];
	nq0[6] = q[48];
	nq0[7] = q[43];
	nq0[8] = q[2];
	nq0[9] = q[3];
	nq0[10] = q[35];
	nq0[11] = q[15];
	nq0[12] = q[5];
	nq0[13] = q[4];
	nq0[14] = q[32];
	nq0[15] = q[39];
	nq0[16] = q[31];
	nq0[17] = q[41];
	nq0[18] = anc[1];
	nq0[19] = q[21];
	nq0[20] = q[28];
	nq0[21] = q[6];
	nq0[22] = q[50];
	nq0[23] = q[33];
	nq0[24] = q[30];
	nq0[25] = q[46];
	nq0[26] = q[27];
	nq0[27] = anc[0];
	nq0[28] = q[38];
	nq0[29] = q[19];
	nq0[30] = q[18];
	nq0[31] = q[49];
	nq0[32] = q[17];
	nq0[33] = q[40];
	nq0[34] = q[14];
	nq0[35] = q[29];
	nq0[36] = q[47];
	nq0[37] = q[45];
	nq0[38] = q[34];
	nq0[39] = q[23];
	nq0[40] = q[26];
	nq0[41] = q[37];
	nq0[42] = q[16];
	nq0[43] = q[25];
	nq0[44] = q[42];
	nq0[45] = q[10];
	nq0[46] = q[22];
	nq0[47] = q[11];
	nq0[48] = q[36];
	nq0[49] = q[1];
	nq0[50] = q[13];
	nq0[51] = q[20];
	nq0[52] = q[8];
	nq0[53] = q[12];
		Toffoli( q[29], q[17], q[37] );
		func6(nq0, 54);
		Toffoli( q[6], q[49], q[31] );
		CNOT( q[41], q[47] );
		Toffoli( q[27], q[17], q[13] );
		Toffoli( q[48], anc[2], q[29] );
		CNOT( anc[0], q[22] );
		CNOT( q[40], q[7] );
		Toffoli( q[33], q[16], q[38] );
		CNOT( q[23], q[15] );
		CNOT( q[39], q[20] );
		Toffoli( q[42], q[36], q[6] );
	}
	Store {
		CNOT( q[27], res[0] );
		CNOT( q[14], res[1] );
		CNOT( q[11], res[2] );
		CNOT( q[2], res[3] );
		CNOT( q[15], res[4] );
		CNOT( q[9], res[5] );
		CNOT( q[36], res[6] );
		CNOT( q[23], res[7] );
		CNOT( q[6], res[8] );
		CNOT( q[39], res[9] );
		CNOT( q[48], res[10] );
		CNOT( q[19], res[11] );
		CNOT( q[21], res[12] );
		CNOT( q[17], res[13] );
		CNOT( anc[1], res[14] );
		CNOT( q[25], res[15] );
		CNOT( anc[0], res[16] );
		CNOT( q[37], res[17] );
		CNOT( q[28], res[18] );
		CNOT( q[38], res[19] );
		CNOT( q[7], res[20] );
		CNOT( q[20], res[21] );
		CNOT( anc[2], res[22] );
		CNOT( q[49], res[23] );
		CNOT( q[50], res[24] );
		CNOT( q[32], res[25] );
		CNOT( q[30], res[26] );
		CNOT( q[46], res[27] );
		CNOT( q[5], res[28] );
		CNOT( q[43], res[29] );
		CNOT( q[40], res[30] );
		CNOT( q[12], res[31] );
		CNOT( q[42], res[32] );
		CNOT( q[1], res[33] );
		CNOT( q[0], res[34] );
		CNOT( q[16], res[35] );
		CNOT( q[35], res[36] );
		CNOT( q[26], res[37] );
		CNOT( q[13], res[38] );
		CNOT( q[41], res[39] );
		CNOT( q[22], res[40] );
		CNOT( q[10], res[41] );
		CNOT( q[4], res[42] );
	}
	Uncompute(res, 0, anc, 3, 65, 54){
		Toffoli( q[42], q[36], q[6] );
		CNOT( q[39], q[20] );
		CNOT( q[23], q[15] );
		Toffoli( q[33], q[16], q[38] );
		CNOT( q[40], q[7] );
		CNOT( anc[0], q[22] );
		Toffoli( q[48], anc[2], q[29] );
		Toffoli( q[27], q[17], q[13] );
		CNOT( q[41], q[47] );
		Toffoli( q[6], q[49], q[31] );
		func6R(nq0, 54);
		Toffoli( q[29], q[17], q[37] );
	} Free(anc, 3) {}
}
// Function 4 with degree 1
// nq: 51, na: 3, ng: 11
void func4R(qbit **q, int n) {
printf("func4R\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[26]; // interacting bits
	qbit *res[43];
	qbit *nq0[54];
	nb[0] = q[6];
	nb[1] = q[49];
	nb[2] = q[31];
	nb[3] = q[29];
	nb[4] = q[17];
	nb[5] = q[37];
	nb[6] = q[27];
	nb[7] = q[17];
	nb[8] = q[13];
	nb[9] = q[40];
	nb[10] = q[7];
	nb[11] = q[41];
	nb[12] = q[47];
	nb[13] = q[42];
	nb[14] = q[36];
	nb[15] = q[6];
	nb[16] = q[48];
	nb[17] = q[29];
	nb[18] = q[23];
	nb[19] = q[15];
	nb[20] = q[39];
	nb[21] = q[20];
	nb[22] = q[22];
	nb[23] = q[33];
	nb[24] = q[16];
	nb[25] = q[38];
	res[0] = q[24];
	res[1] = q[4];
	res[2] = q[27];
	res[3] = q[44];
	res[4] = q[8];
	res[5] = q[42];
	res[6] = q[7];
	res[7] = q[38];
	res[8] = q[3];
	res[9] = q[0];
	res[10] = q[49];
	res[11] = q[50];
	res[12] = q[17];
	res[13] = q[23];
	res[14] = q[33];
	res[15] = q[21];
	res[16] = q[9];
	res[17] = q[1];
	res[18] = q[34];
	res[19] = q[30];
	res[20] = q[47];
	res[21] = q[43];
	res[22] = q[13];
	res[23] = q[28];
	res[24] = q[10];
	res[25] = q[41];
	res[26] = q[26];
	res[27] = q[5];
	res[28] = q[40];
	res[29] = q[6];
	res[30] = q[37];
	res[31] = q[19];
	res[32] = q[12];
	res[33] = q[29];
	res[34] = q[45];
	res[35] = q[25];
	res[36] = q[32];
	res[37] = q[31];
	res[38] = q[15];
	res[39] = q[2];
	res[40] = q[36];
	res[41] = q[35];
	res[42] = q[18];
	// Non-leaf function
	_computeModule(0, 3, 65, 54, 1, 2, 0);
	acquire(3, anc, 26, nb);
	nq0[0] = q[7];
	nq0[1] = q[44];
	nq0[2] = anc[2];
	nq0[3] = q[0];
	nq0[4] = q[9];
	nq0[5] = q[24];
	nq0[6] = q[48];
	nq0[7] = q[43];
	nq0[8] = q[2];
	nq0[9] = q[3];
	nq0[10] = q[35];
	nq0[11] = q[15];
	nq0[12] = q[5];
	nq0[13] = q[4];
	nq0[14] = q[32];
	nq0[15] = q[39];
	nq0[16] = q[31];
	nq0[17] = q[41];
	nq0[18] = anc[1];
	nq0[19] = q[21];
	nq0[20] = q[28];
	nq0[21] = q[6];
	nq0[22] = q[50];
	nq0[23] = q[33];
	nq0[24] = q[30];
	nq0[25] = q[46];
	nq0[26] = q[27];
	nq0[27] = anc[0];
	nq0[28] = q[38];
	nq0[29] = q[19];
	nq0[30] = q[18];
	nq0[31] = q[49];
	nq0[32] = q[17];
	nq0[33] = q[40];
	nq0[34] = q[14];
	nq0[35] = q[29];
	nq0[36] = q[47];
	nq0[37] = q[45];
	nq0[38] = q[34];
	nq0[39] = q[23];
	nq0[40] = q[26];
	nq0[41] = q[37];
	nq0[42] = q[16];
	nq0[43] = q[25];
	nq0[44] = q[42];
	nq0[45] = q[10];
	nq0[46] = q[22];
	nq0[47] = q[11];
	nq0[48] = q[36];
	nq0[49] = q[1];
	nq0[50] = q[13];
	nq0[51] = q[20];
	nq0[52] = q[8];
	nq0[53] = q[12];
	Recompute(res, 0, anc, 3, 65, 54){
		Toffoli( q[29], q[17], q[37] );
		func6(nq0, 54);
		Toffoli( q[6], q[49], q[31] );
		CNOT( q[41], q[47] );
		Toffoli( q[27], q[17], q[13] );
		Toffoli( q[48], anc[2], q[29] );
		CNOT( anc[0], q[22] );
		CNOT( q[40], q[7] );
		Toffoli( q[33], q[16], q[38] );
		CNOT( q[23], q[15] );
		CNOT( q[39], q[20] );
		Toffoli( q[42], q[36], q[6] );
	}
	Restore {
		CNOT( q[27], res[0] );
		CNOT( q[14], res[1] );
		CNOT( q[11], res[2] );
		CNOT( q[2], res[3] );
		CNOT( q[15], res[4] );
		CNOT( q[9], res[5] );
		CNOT( q[36], res[6] );
		CNOT( q[23], res[7] );
		CNOT( q[6], res[8] );
		CNOT( q[39], res[9] );
		CNOT( q[48], res[10] );
		CNOT( q[19], res[11] );
		CNOT( q[21], res[12] );
		CNOT( q[17], res[13] );
		CNOT( anc[1], res[14] );
		CNOT( q[25], res[15] );
		CNOT( anc[0], res[16] );
		CNOT( q[37], res[17] );
		CNOT( q[28], res[18] );
		CNOT( q[38], res[19] );
		CNOT( q[7], res[20] );
		CNOT( q[20], res[21] );
		CNOT( anc[2], res[22] );
		CNOT( q[49], res[23] );
		CNOT( q[50], res[24] );
		CNOT( q[32], res[25] );
		CNOT( q[30], res[26] );
		CNOT( q[46], res[27] );
		CNOT( q[5], res[28] );
		CNOT( q[43], res[29] );
		CNOT( q[40], res[30] );
		CNOT( q[12], res[31] );
		CNOT( q[42], res[32] );
		CNOT( q[1], res[33] );
		CNOT( q[0], res[34] );
		CNOT( q[16], res[35] );
		CNOT( q[35], res[36] );
		CNOT( q[26], res[37] );
		CNOT( q[13], res[38] );
		CNOT( q[41], res[39] );
		CNOT( q[22], res[40] );
		CNOT( q[10], res[41] );
		CNOT( q[4], res[42] );
	}
	Unrecompute {
		Toffoli( q[42], q[36], q[6] );
		CNOT( q[39], q[20] );
		CNOT( q[23], q[15] );
		Toffoli( q[33], q[16], q[38] );
		CNOT( q[40], q[7] );
		CNOT( anc[0], q[22] );
		Toffoli( q[48], anc[2], q[29] );
		Toffoli( q[27], q[17], q[13] );
		CNOT( q[41], q[47] );
		Toffoli( q[6], q[49], q[31] );
		func6R(nq0, 54);
		Toffoli( q[29], q[17], q[37] );
	} Refree(anc, 3) {}
}
// Function 3 with degree 0
// nq: 51, na: 5, ng: 9
void func3(qbit **q, int n) {
printf("func3\n");
fflush(stderr);
	qbit *anc[5]; // ancilla
	qbit *nb[20]; // interacting bits
	qbit *res[23];
	nb[0] = q[35];
	nb[1] = q[47];
	nb[2] = q[14];
	nb[3] = q[9];
	nb[4] = q[11];
	nb[5] = q[50];
	nb[6] = q[41];
	nb[7] = q[44];
	nb[8] = q[43];
	nb[9] = q[16];
	nb[10] = q[41];
	nb[11] = q[27];
	nb[12] = q[20];
	nb[13] = q[3];
	nb[14] = q[42];
	nb[15] = q[21];
	nb[16] = q[11];
	nb[17] = q[24];
	nb[18] = q[2];
	nb[19] = q[48];
	res[0] = q[9];
	res[1] = q[22];
	res[2] = q[44];
	res[3] = q[12];
	res[4] = q[40];
	res[5] = q[42];
	res[6] = q[43];
	res[7] = q[33];
	res[8] = q[13];
	res[9] = q[29];
	res[10] = q[30];
	res[11] = q[10];
	res[12] = q[19];
	res[13] = q[35];
	res[14] = q[41];
	res[15] = q[31];
	res[16] = q[49];
	res[17] = q[45];
	res[18] = q[34];
	res[19] = q[18];
	res[20] = q[25];
	res[21] = q[15];
	res[22] = q[37];
	// Leaf function
	Compute (0, 5, 41, 32, 0, 2, 0) {
		acquire(5, anc, 20, nb);
		CNOT( q[35], q[47] );
		CNOT( q[14], q[9] );
		CNOT( q[11], anc[4] );
		CNOT( q[50], q[41] );
		Toffoli( q[44], q[43], q[16] );
		Toffoli( q[41], q[27], q[20] );
		CNOT( q[3], q[42] );
		Toffoli( q[21], q[11], q[24] );
		CNOT( q[2], q[48] );
	}
	Store {
		CNOT( q[44], res[0] );
		CNOT( q[24], res[1] );
		CNOT( q[1], res[2] );
		CNOT( q[28], res[3] );
		CNOT( q[20], res[4] );
		CNOT( q[32], res[5] );
		CNOT( q[40], res[6] );
		CNOT( q[12], res[7] );
		CNOT( anc[1], res[8] );
		CNOT( q[19], res[9] );
		CNOT( anc[1], res[10] );
		CNOT( q[42], res[11] );
		CNOT( q[21], res[12] );
		CNOT( q[0], res[13] );
		CNOT( q[49], res[14] );
		CNOT( q[38], res[15] );
		CNOT( q[4], res[16] );
		CNOT( q[7], res[17] );
		CNOT( q[14], res[18] );
		CNOT( q[6], res[19] );
		CNOT( q[2], res[20] );
		CNOT( q[45], res[21] );
		CNOT( anc[4], res[22] );
	}
	Uncompute(res, 0, anc, 5, 41, 32){
		CNOT( q[2], q[48] );
		Toffoli( q[21], q[11], q[24] );
		CNOT( q[3], q[42] );
		Toffoli( q[41], q[27], q[20] );
		Toffoli( q[44], q[43], q[16] );
		CNOT( q[50], q[41] );
		CNOT( q[11], anc[4] );
		CNOT( q[14], q[9] );
		CNOT( q[35], q[47] );
	} Free(anc, 5) {}
}
// Function 3 with degree 0
// nq: 51, na: 5, ng: 9
void func3R(qbit **q, int n) {
printf("func3R\n");
fflush(stderr);
	qbit *anc[5]; // ancilla
	qbit *nb[20]; // interacting bits
	qbit *res[23];
	nb[0] = q[35];
	nb[1] = q[47];
	nb[2] = q[14];
	nb[3] = q[9];
	nb[4] = q[11];
	nb[5] = q[50];
	nb[6] = q[41];
	nb[7] = q[44];
	nb[8] = q[43];
	nb[9] = q[16];
	nb[10] = q[41];
	nb[11] = q[27];
	nb[12] = q[20];
	nb[13] = q[3];
	nb[14] = q[42];
	nb[15] = q[21];
	nb[16] = q[11];
	nb[17] = q[24];
	nb[18] = q[2];
	nb[19] = q[48];
	res[0] = q[9];
	res[1] = q[22];
	res[2] = q[44];
	res[3] = q[12];
	res[4] = q[40];
	res[5] = q[42];
	res[6] = q[43];
	res[7] = q[33];
	res[8] = q[13];
	res[9] = q[29];
	res[10] = q[30];
	res[11] = q[10];
	res[12] = q[19];
	res[13] = q[35];
	res[14] = q[41];
	res[15] = q[31];
	res[16] = q[49];
	res[17] = q[45];
	res[18] = q[34];
	res[19] = q[18];
	res[20] = q[25];
	res[21] = q[15];
	res[22] = q[37];
	// Leaf function
	_computeModule(0, 5, 41, 32, 0, 2, 0);
	acquire(5, anc, 20, nb);
	Recompute (res, 0, anc, 5, 41, 32){
		CNOT( q[2], q[48] );
		Toffoli( q[21], q[11], q[24] );
		CNOT( q[3], q[42] );
		Toffoli( q[41], q[27], q[20] );
		Toffoli( q[44], q[43], q[16] );
		CNOT( q[50], q[41] );
		CNOT( q[11], anc[4] );
		CNOT( q[14], q[9] );
		CNOT( q[35], q[47] );
	}
	Restore {
		CNOT( q[44], res[0] );
		CNOT( q[24], res[1] );
		CNOT( q[1], res[2] );
		CNOT( q[28], res[3] );
		CNOT( q[20], res[4] );
		CNOT( q[32], res[5] );
		CNOT( q[40], res[6] );
		CNOT( q[12], res[7] );
		CNOT( anc[1], res[8] );
		CNOT( q[19], res[9] );
		CNOT( anc[1], res[10] );
		CNOT( q[42], res[11] );
		CNOT( q[21], res[12] );
		CNOT( q[0], res[13] );
		CNOT( q[49], res[14] );
		CNOT( q[38], res[15] );
		CNOT( q[4], res[16] );
		CNOT( q[7], res[17] );
		CNOT( q[14], res[18] );
		CNOT( q[6], res[19] );
		CNOT( q[2], res[20] );
		CNOT( q[45], res[21] );
		CNOT( anc[4], res[22] );
	}
	Unrecompute {
		CNOT( q[35], q[47] );
		CNOT( q[14], q[9] );
		CNOT( q[11], anc[4] );
		CNOT( q[50], q[41] );
		Toffoli( q[44], q[43], q[16] );
		Toffoli( q[41], q[27], q[20] );
		CNOT( q[3], q[42] );
		Toffoli( q[21], q[11], q[24] );
		CNOT( q[2], q[48] );
	} Refree(anc, 5) {}
}
// Function 2 with degree 1
// nq: 96, na: 2, ng: 16
void func2(qbit **q, int n) {
printf("func2\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[37]; // interacting bits
	qbit *res[5];
	qbit *nq0[98];
	nb[0] = q[29];
	nb[1] = q[1];
	nb[2] = q[39];
	nb[3] = q[25];
	nb[4] = q[75];
	nb[5] = q[73];
	nb[6] = q[79];
	nb[7] = q[94];
	nb[8] = q[46];
	nb[9] = q[17];
	nb[10] = q[72];
	nb[11] = q[57];
	nb[12] = q[95];
	nb[13] = q[45];
	nb[14] = q[56];
	nb[15] = q[37];
	nb[16] = q[53];
	nb[17] = q[6];
	nb[18] = q[17];
	nb[19] = q[60];
	nb[20] = q[5];
	nb[21] = q[49];
	nb[22] = q[57];
	nb[23] = q[5];
	nb[24] = q[61];
	nb[25] = q[8];
	nb[26] = q[52];
	nb[27] = q[77];
	nb[28] = q[4];
	nb[29] = q[80];
	nb[30] = q[66];
	nb[31] = q[18];
	nb[32] = q[55];
	nb[33] = q[82];
	nb[34] = q[52];
	nb[35] = q[22];
	nb[36] = q[87];
	res[0] = q[73];
	res[1] = q[31];
	res[2] = q[25];
	res[3] = q[95];
	res[4] = q[91];
	// Non-leaf function
	Compute (0, 2, 37, 21, 1, 64, 0){
		acquire(2, anc, 37, nb);
	nq0[0] = q[16];
	nq0[1] = q[41];
	nq0[2] = q[42];
	nq0[3] = q[35];
	nq0[4] = q[45];
	nq0[5] = q[29];
	nq0[6] = q[4];
	nq0[7] = q[47];
	nq0[8] = q[71];
	nq0[9] = q[21];
	nq0[10] = anc[1];
	nq0[11] = q[91];
	nq0[12] = q[86];
	nq0[13] = q[76];
	nq0[14] = q[3];
	nq0[15] = q[89];
	nq0[16] = q[7];
	nq0[17] = q[54];
	nq0[18] = q[46];
	nq0[19] = q[9];
	nq0[20] = q[77];
	nq0[21] = q[78];
	nq0[22] = q[38];
	nq0[23] = q[74];
	nq0[24] = q[73];
	nq0[25] = q[93];
	nq0[26] = q[2];
	nq0[27] = q[84];
	nq0[28] = q[56];
	nq0[29] = q[67];
	nq0[30] = q[75];
	nq0[31] = q[81];
	nq0[32] = q[40];
	nq0[33] = q[28];
	nq0[34] = q[20];
	nq0[35] = q[33];
	nq0[36] = q[62];
	nq0[37] = q[95];
	nq0[38] = q[59];
	nq0[39] = q[14];
	nq0[40] = q[43];
	nq0[41] = q[66];
	nq0[42] = q[26];
	nq0[43] = q[57];
	nq0[44] = q[80];
	nq0[45] = q[50];
	nq0[46] = q[30];
	nq0[47] = q[37];
	nq0[48] = q[82];
	nq0[49] = q[0];
	nq0[50] = q[55];
	nq0[51] = q[22];
	nq0[52] = anc[0];
	nq0[53] = q[88];
	nq0[54] = q[85];
	nq0[55] = q[19];
	nq0[56] = q[34];
	nq0[57] = q[72];
	nq0[58] = q[63];
	nq0[59] = q[79];
	nq0[60] = q[18];
	nq0[61] = q[39];
	nq0[62] = q[31];
	nq0[63] = q[53];
	nq0[64] = q[60];
	nq0[65] = q[90];
	nq0[66] = q[83];
	nq0[67] = q[64];
	nq0[68] = q[15];
	nq0[69] = q[44];
	nq0[70] = q[87];
	nq0[71] = q[11];
	nq0[72] = q[49];
	nq0[73] = q[12];
	nq0[74] = q[5];
	nq0[75] = q[23];
	nq0[76] = q[1];
	nq0[77] = q[51];
	nq0[78] = q[25];
	nq0[79] = q[69];
	nq0[80] = q[94];
	nq0[81] = q[27];
	nq0[82] = q[6];
	nq0[83] = q[8];
	nq0[84] = q[10];
	nq0[85] = q[32];
	nq0[86] = q[70];
	nq0[87] = q[52];
	nq0[88] = q[65];
	nq0[89] = q[68];
	nq0[90] = q[24];
	nq0[91] = q[17];
	nq0[92] = q[36];
	nq0[93] = q[58];
	nq0[94] = q[92];
	nq0[95] = q[48];
	nq0[96] = q[61];
	nq0[97] = q[13];
		CNOT( q[22], q[87] );
		CNOT( q[66], q[18] );
		CNOT( q[94], q[46] );
		CNOT( q[17], q[72] );
		Toffoli( q[57], q[95], q[45] );
		CNOT( q[6], q[17] );
		CNOT( q[61], q[8] );
		CNOT( q[39], q[25] );
		CNOT( q[4], q[80] );
		func5(nq0, 98);
		Toffoli( q[55], q[82], q[52] );
		Toffoli( q[56], q[37], q[53] );
		CNOT( q[29], q[1] );
		CNOT( q[52], q[77] );
		Toffoli( q[75], q[73], q[79] );
		CNOT( q[57], q[5] );
		Toffoli( q[60], q[5], q[49] );
	}
	Store {
		CNOT( q[86], res[0] );
		CNOT( q[14], res[1] );
		CNOT( q[7], res[2] );
		CNOT( q[52], res[3] );
		CNOT( q[89], res[4] );
	}
	Uncompute(res, 0, anc, 2, 37, 21){
		Toffoli( q[60], q[5], q[49] );
		CNOT( q[57], q[5] );
		Toffoli( q[75], q[73], q[79] );
		CNOT( q[52], q[77] );
		CNOT( q[29], q[1] );
		Toffoli( q[56], q[37], q[53] );
		Toffoli( q[55], q[82], q[52] );
		func5R(nq0, 98);
		CNOT( q[4], q[80] );
		CNOT( q[39], q[25] );
		CNOT( q[61], q[8] );
		CNOT( q[6], q[17] );
		Toffoli( q[57], q[95], q[45] );
		CNOT( q[17], q[72] );
		CNOT( q[94], q[46] );
		CNOT( q[66], q[18] );
		CNOT( q[22], q[87] );
	} Free(anc, 2) {}
}
// Function 2 with degree 1
// nq: 96, na: 2, ng: 16
void func2R(qbit **q, int n) {
printf("func2R\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[37]; // interacting bits
	qbit *res[5];
	qbit *nq0[98];
	nb[0] = q[29];
	nb[1] = q[1];
	nb[2] = q[39];
	nb[3] = q[25];
	nb[4] = q[75];
	nb[5] = q[73];
	nb[6] = q[79];
	nb[7] = q[94];
	nb[8] = q[46];
	nb[9] = q[17];
	nb[10] = q[72];
	nb[11] = q[57];
	nb[12] = q[95];
	nb[13] = q[45];
	nb[14] = q[56];
	nb[15] = q[37];
	nb[16] = q[53];
	nb[17] = q[6];
	nb[18] = q[17];
	nb[19] = q[60];
	nb[20] = q[5];
	nb[21] = q[49];
	nb[22] = q[57];
	nb[23] = q[5];
	nb[24] = q[61];
	nb[25] = q[8];
	nb[26] = q[52];
	nb[27] = q[77];
	nb[28] = q[4];
	nb[29] = q[80];
	nb[30] = q[66];
	nb[31] = q[18];
	nb[32] = q[55];
	nb[33] = q[82];
	nb[34] = q[52];
	nb[35] = q[22];
	nb[36] = q[87];
	res[0] = q[73];
	res[1] = q[31];
	res[2] = q[25];
	res[3] = q[95];
	res[4] = q[91];
	// Non-leaf function
	_computeModule(0, 2, 37, 21, 1, 64, 0);
	acquire(2, anc, 37, nb);
	nq0[0] = q[16];
	nq0[1] = q[41];
	nq0[2] = q[42];
	nq0[3] = q[35];
	nq0[4] = q[45];
	nq0[5] = q[29];
	nq0[6] = q[4];
	nq0[7] = q[47];
	nq0[8] = q[71];
	nq0[9] = q[21];
	nq0[10] = anc[1];
	nq0[11] = q[91];
	nq0[12] = q[86];
	nq0[13] = q[76];
	nq0[14] = q[3];
	nq0[15] = q[89];
	nq0[16] = q[7];
	nq0[17] = q[54];
	nq0[18] = q[46];
	nq0[19] = q[9];
	nq0[20] = q[77];
	nq0[21] = q[78];
	nq0[22] = q[38];
	nq0[23] = q[74];
	nq0[24] = q[73];
	nq0[25] = q[93];
	nq0[26] = q[2];
	nq0[27] = q[84];
	nq0[28] = q[56];
	nq0[29] = q[67];
	nq0[30] = q[75];
	nq0[31] = q[81];
	nq0[32] = q[40];
	nq0[33] = q[28];
	nq0[34] = q[20];
	nq0[35] = q[33];
	nq0[36] = q[62];
	nq0[37] = q[95];
	nq0[38] = q[59];
	nq0[39] = q[14];
	nq0[40] = q[43];
	nq0[41] = q[66];
	nq0[42] = q[26];
	nq0[43] = q[57];
	nq0[44] = q[80];
	nq0[45] = q[50];
	nq0[46] = q[30];
	nq0[47] = q[37];
	nq0[48] = q[82];
	nq0[49] = q[0];
	nq0[50] = q[55];
	nq0[51] = q[22];
	nq0[52] = anc[0];
	nq0[53] = q[88];
	nq0[54] = q[85];
	nq0[55] = q[19];
	nq0[56] = q[34];
	nq0[57] = q[72];
	nq0[58] = q[63];
	nq0[59] = q[79];
	nq0[60] = q[18];
	nq0[61] = q[39];
	nq0[62] = q[31];
	nq0[63] = q[53];
	nq0[64] = q[60];
	nq0[65] = q[90];
	nq0[66] = q[83];
	nq0[67] = q[64];
	nq0[68] = q[15];
	nq0[69] = q[44];
	nq0[70] = q[87];
	nq0[71] = q[11];
	nq0[72] = q[49];
	nq0[73] = q[12];
	nq0[74] = q[5];
	nq0[75] = q[23];
	nq0[76] = q[1];
	nq0[77] = q[51];
	nq0[78] = q[25];
	nq0[79] = q[69];
	nq0[80] = q[94];
	nq0[81] = q[27];
	nq0[82] = q[6];
	nq0[83] = q[8];
	nq0[84] = q[10];
	nq0[85] = q[32];
	nq0[86] = q[70];
	nq0[87] = q[52];
	nq0[88] = q[65];
	nq0[89] = q[68];
	nq0[90] = q[24];
	nq0[91] = q[17];
	nq0[92] = q[36];
	nq0[93] = q[58];
	nq0[94] = q[92];
	nq0[95] = q[48];
	nq0[96] = q[61];
	nq0[97] = q[13];
	Recompute(res, 0, anc, 2, 37, 21){
		CNOT( q[22], q[87] );
		CNOT( q[66], q[18] );
		CNOT( q[94], q[46] );
		CNOT( q[17], q[72] );
		Toffoli( q[57], q[95], q[45] );
		CNOT( q[6], q[17] );
		CNOT( q[61], q[8] );
		CNOT( q[39], q[25] );
		CNOT( q[4], q[80] );
		func5(nq0, 98);
		Toffoli( q[55], q[82], q[52] );
		Toffoli( q[56], q[37], q[53] );
		CNOT( q[29], q[1] );
		CNOT( q[52], q[77] );
		Toffoli( q[75], q[73], q[79] );
		CNOT( q[57], q[5] );
		Toffoli( q[60], q[5], q[49] );
	}
	Restore {
		CNOT( q[86], res[0] );
		CNOT( q[14], res[1] );
		CNOT( q[7], res[2] );
		CNOT( q[52], res[3] );
		CNOT( q[89], res[4] );
	}
	Unrecompute {
		Toffoli( q[60], q[5], q[49] );
		CNOT( q[57], q[5] );
		Toffoli( q[75], q[73], q[79] );
		CNOT( q[52], q[77] );
		CNOT( q[29], q[1] );
		Toffoli( q[56], q[37], q[53] );
		Toffoli( q[55], q[82], q[52] );
		func5R(nq0, 98);
		CNOT( q[4], q[80] );
		CNOT( q[39], q[25] );
		CNOT( q[61], q[8] );
		CNOT( q[6], q[17] );
		Toffoli( q[57], q[95], q[45] );
		CNOT( q[17], q[72] );
		CNOT( q[94], q[46] );
		CNOT( q[66], q[18] );
		CNOT( q[22], q[87] );
	} Refree(anc, 2) {}
}
// Function 1 with degree 2
// nq: 96, na: 6, ng: 16
void func1(qbit **q, int n) {
printf("func1\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[37]; // interacting bits
	qbit *res[43];
	qbit *nq0[51];
	qbit *nq1[51];
	nb[0] = q[43];
	nb[1] = q[33];
	nb[2] = q[77];
	nb[3] = q[44];
	nb[4] = q[43];
	nb[5] = q[22];
	nb[6] = q[21];
	nb[7] = q[12];
	nb[8] = q[52];
	nb[9] = q[33];
	nb[10] = q[2];
	nb[11] = q[40];
	nb[12] = q[3];
	nb[13] = q[91];
	nb[14] = q[51];
	nb[15] = q[72];
	nb[16] = q[7];
	nb[17] = q[15];
	nb[18] = q[87];
	nb[19] = q[28];
	nb[20] = q[38];
	nb[21] = q[95];
	nb[22] = q[5];
	nb[23] = q[53];
	nb[24] = q[81];
	nb[25] = q[68];
	nb[26] = q[92];
	nb[27] = q[79];
	nb[28] = q[26];
	nb[29] = q[29];
	nb[30] = q[22];
	nb[31] = q[22];
	nb[32] = q[46];
	nb[33] = q[40];
	nb[34] = q[72];
	nb[35] = q[6];
	nb[36] = q[75];
	res[0] = q[74];
	res[1] = q[31];
	res[2] = q[2];
	res[3] = q[18];
	res[4] = q[25];
	res[5] = q[83];
	res[6] = q[19];
	res[7] = q[42];
	res[8] = q[20];
	res[9] = q[63];
	res[10] = q[62];
	res[11] = q[28];
	res[12] = q[70];
	res[13] = q[35];
	res[14] = q[24];
	res[15] = q[17];
	res[16] = q[9];
	res[17] = q[4];
	res[18] = q[66];
	res[19] = q[51];
	res[20] = q[85];
	res[21] = q[43];
	res[22] = q[56];
	res[23] = q[38];
	res[24] = q[90];
	res[25] = q[0];
	res[26] = q[11];
	res[27] = q[59];
	res[28] = q[79];
	res[29] = q[86];
	res[30] = q[53];
	res[31] = q[94];
	res[32] = q[5];
	res[33] = q[15];
	res[34] = q[41];
	res[35] = q[48];
	res[36] = q[27];
	res[37] = q[47];
	res[38] = q[16];
	res[39] = q[45];
	res[40] = q[6];
	res[41] = q[80];
	res[42] = q[69];
	// Non-leaf function
	Compute (0, 6, 75, 59, 2, 64, 0){
		acquire(6, anc, 37, nb);
	nq0[0] = q[89];
	nq0[1] = q[79];
	nq0[2] = q[34];
	nq0[3] = q[61];
	nq0[4] = q[32];
	nq0[5] = q[28];
	nq0[6] = q[95];
	nq0[7] = q[69];
	nq0[8] = q[82];
	nq0[9] = q[27];
	nq0[10] = q[72];
	nq0[11] = q[18];
	nq0[12] = q[39];
	nq0[13] = q[55];
	nq0[14] = q[45];
	nq0[15] = q[70];
	nq0[16] = q[43];
	nq0[17] = q[91];
	nq0[18] = q[37];
	nq0[19] = q[73];
	nq0[20] = q[86];
	nq0[21] = q[50];
	nq0[22] = anc[5];
	nq0[23] = q[40];
	nq0[24] = q[10];
	nq0[25] = q[94];
	nq0[26] = q[65];
	nq0[27] = q[4];
	nq0[28] = q[48];
	nq0[29] = q[20];
	nq0[30] = q[22];
	nq0[31] = q[52];
	nq0[32] = q[87];
	nq0[33] = q[21];
	nq0[34] = q[9];
	nq0[35] = q[78];
	nq0[36] = q[93];
	nq0[37] = q[2];
	nq0[38] = q[47];
	nq0[39] = q[56];
	nq0[40] = q[16];
	nq0[41] = q[26];
	nq0[42] = q[35];
	nq0[43] = q[3];
	nq0[44] = q[64];
	nq0[45] = q[84];
	nq0[46] = q[83];
	nq0[47] = q[85];
	nq0[48] = q[77];
	nq0[49] = q[31];
	nq0[50] = q[54];
	nq1[0] = q[59];
	nq1[1] = q[63];
	nq1[2] = q[75];
	nq1[3] = q[44];
	nq1[4] = q[80];
	nq1[5] = q[33];
	nq1[6] = q[66];
	nq1[7] = q[11];
	nq1[8] = q[49];
	nq1[9] = q[8];
	nq1[10] = q[68];
	nq1[11] = q[41];
	nq1[12] = q[23];
	nq1[13] = q[76];
	nq1[14] = q[90];
	nq1[15] = q[58];
	nq1[16] = q[17];
	nq1[17] = q[13];
	nq1[18] = q[46];
	nq1[19] = q[53];
	nq1[20] = q[14];
	nq1[21] = q[92];
	nq1[22] = q[25];
	nq1[23] = anc[4];
	nq1[24] = anc[3];
	nq1[25] = q[19];
	nq1[26] = q[36];
	nq1[27] = q[71];
	nq1[28] = q[30];
	nq1[29] = q[60];
	nq1[30] = q[51];
	nq1[31] = q[12];
	nq1[32] = q[7];
	nq1[33] = q[6];
	nq1[34] = q[42];
	nq1[35] = q[88];
	nq1[36] = q[57];
	nq1[37] = q[29];
	nq1[38] = q[74];
	nq1[39] = q[67];
	nq1[40] = anc[0];
	nq1[41] = q[15];
	nq1[42] = anc[1];
	nq1[43] = q[62];
	nq1[44] = anc[2];
	nq1[45] = q[81];
	nq1[46] = q[1];
	nq1[47] = q[24];
	nq1[48] = q[0];
	nq1[49] = q[5];
	nq1[50] = q[38];
		Toffoli( q[22], q[46], q[40] );
		CNOT( anc[4], q[75] );
		CNOT( q[53], q[81] );
		func4(nq1, 51);
		Toffoli( q[87], q[28], q[38] );
		Toffoli( q[79], q[26], q[29] );
		CNOT( q[40], q[3] );
		CNOT( anc[1], q[22] );
		Toffoli( q[43], anc[3], q[33] );
		Toffoli( q[95], q[5], anc[4] );
		Toffoli( q[77], q[44], q[43] );
		Toffoli( q[52], q[33], q[2] );
		Toffoli( q[91], q[51], q[72] );
		CNOT( q[72], q[6] );
		CNOT( q[7], q[15] );
		Toffoli( q[68], q[92], anc[1] );
		func3(nq0, 51);
		Toffoli( q[22], q[21], q[12] );
	}
	Store {
		CNOT( q[8], res[0] );
		CNOT( q[39], res[1] );
		CNOT( q[18], res[2] );
		CNOT( q[14], res[3] );
		CNOT( q[13], res[4] );
		CNOT( q[94], res[5] );
		CNOT( q[26], res[6] );
		CNOT( q[41], res[7] );
		CNOT( q[25], res[8] );
		CNOT( q[40], res[9] );
		CNOT( q[47], res[10] );
		CNOT( q[23], res[11] );
		CNOT( q[33], res[12] );
		CNOT( q[36], res[13] );
		CNOT( q[45], res[14] );
		CNOT( q[15], res[15] );
		CNOT( anc[5], res[16] );
		CNOT( q[24], res[17] );
		CNOT( q[75], res[18] );
		CNOT( anc[4], res[19] );
		CNOT( q[54], res[20] );
		CNOT( q[4], res[21] );
		CNOT( q[91], res[22] );
		CNOT( q[61], res[23] );
		CNOT( q[35], res[24] );
		CNOT( q[27], res[25] );
		CNOT( q[62], res[26] );
		CNOT( q[34], res[27] );
		CNOT( q[60], res[28] );
		CNOT( q[11], res[29] );
		CNOT( q[2], res[30] );
		CNOT( q[21], res[31] );
		CNOT( q[74], res[32] );
		CNOT( q[52], res[33] );
		CNOT( q[3], res[34] );
		CNOT( q[20], res[35] );
		CNOT( q[73], res[36] );
		CNOT( q[7], res[37] );
		CNOT( q[92], res[38] );
		CNOT( q[85], res[39] );
		CNOT( q[55], res[40] );
		CNOT( q[81], res[41] );
		CNOT( q[90], res[42] );
	}
	Uncompute(res, 0, anc, 6, 75, 59){
		Toffoli( q[22], q[21], q[12] );
		func3R(nq0, 51);
		Toffoli( q[68], q[92], anc[1] );
		CNOT( q[7], q[15] );
		CNOT( q[72], q[6] );
		Toffoli( q[91], q[51], q[72] );
		Toffoli( q[52], q[33], q[2] );
		Toffoli( q[77], q[44], q[43] );
		Toffoli( q[95], q[5], anc[4] );
		Toffoli( q[43], anc[3], q[33] );
		CNOT( anc[1], q[22] );
		CNOT( q[40], q[3] );
		Toffoli( q[79], q[26], q[29] );
		Toffoli( q[87], q[28], q[38] );
		func4R(nq1, 51);
		CNOT( q[53], q[81] );
		CNOT( anc[4], q[75] );
		Toffoli( q[22], q[46], q[40] );
	} Free(anc, 6) {}
}
// Function 1 with degree 2
// nq: 96, na: 6, ng: 16
void func1R(qbit **q, int n) {
printf("func1R\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[37]; // interacting bits
	qbit *res[43];
	qbit *nq0[51];
	qbit *nq1[51];
	nb[0] = q[43];
	nb[1] = q[33];
	nb[2] = q[77];
	nb[3] = q[44];
	nb[4] = q[43];
	nb[5] = q[22];
	nb[6] = q[21];
	nb[7] = q[12];
	nb[8] = q[52];
	nb[9] = q[33];
	nb[10] = q[2];
	nb[11] = q[40];
	nb[12] = q[3];
	nb[13] = q[91];
	nb[14] = q[51];
	nb[15] = q[72];
	nb[16] = q[7];
	nb[17] = q[15];
	nb[18] = q[87];
	nb[19] = q[28];
	nb[20] = q[38];
	nb[21] = q[95];
	nb[22] = q[5];
	nb[23] = q[53];
	nb[24] = q[81];
	nb[25] = q[68];
	nb[26] = q[92];
	nb[27] = q[79];
	nb[28] = q[26];
	nb[29] = q[29];
	nb[30] = q[22];
	nb[31] = q[22];
	nb[32] = q[46];
	nb[33] = q[40];
	nb[34] = q[72];
	nb[35] = q[6];
	nb[36] = q[75];
	res[0] = q[74];
	res[1] = q[31];
	res[2] = q[2];
	res[3] = q[18];
	res[4] = q[25];
	res[5] = q[83];
	res[6] = q[19];
	res[7] = q[42];
	res[8] = q[20];
	res[9] = q[63];
	res[10] = q[62];
	res[11] = q[28];
	res[12] = q[70];
	res[13] = q[35];
	res[14] = q[24];
	res[15] = q[17];
	res[16] = q[9];
	res[17] = q[4];
	res[18] = q[66];
	res[19] = q[51];
	res[20] = q[85];
	res[21] = q[43];
	res[22] = q[56];
	res[23] = q[38];
	res[24] = q[90];
	res[25] = q[0];
	res[26] = q[11];
	res[27] = q[59];
	res[28] = q[79];
	res[29] = q[86];
	res[30] = q[53];
	res[31] = q[94];
	res[32] = q[5];
	res[33] = q[15];
	res[34] = q[41];
	res[35] = q[48];
	res[36] = q[27];
	res[37] = q[47];
	res[38] = q[16];
	res[39] = q[45];
	res[40] = q[6];
	res[41] = q[80];
	res[42] = q[69];
	// Non-leaf function
	_computeModule(0, 6, 75, 59, 2, 64, 0);
	acquire(6, anc, 37, nb);
	nq0[0] = q[89];
	nq0[1] = q[79];
	nq0[2] = q[34];
	nq0[3] = q[61];
	nq0[4] = q[32];
	nq0[5] = q[28];
	nq0[6] = q[95];
	nq0[7] = q[69];
	nq0[8] = q[82];
	nq0[9] = q[27];
	nq0[10] = q[72];
	nq0[11] = q[18];
	nq0[12] = q[39];
	nq0[13] = q[55];
	nq0[14] = q[45];
	nq0[15] = q[70];
	nq0[16] = q[43];
	nq0[17] = q[91];
	nq0[18] = q[37];
	nq0[19] = q[73];
	nq0[20] = q[86];
	nq0[21] = q[50];
	nq0[22] = anc[5];
	nq0[23] = q[40];
	nq0[24] = q[10];
	nq0[25] = q[94];
	nq0[26] = q[65];
	nq0[27] = q[4];
	nq0[28] = q[48];
	nq0[29] = q[20];
	nq0[30] = q[22];
	nq0[31] = q[52];
	nq0[32] = q[87];
	nq0[33] = q[21];
	nq0[34] = q[9];
	nq0[35] = q[78];
	nq0[36] = q[93];
	nq0[37] = q[2];
	nq0[38] = q[47];
	nq0[39] = q[56];
	nq0[40] = q[16];
	nq0[41] = q[26];
	nq0[42] = q[35];
	nq0[43] = q[3];
	nq0[44] = q[64];
	nq0[45] = q[84];
	nq0[46] = q[83];
	nq0[47] = q[85];
	nq0[48] = q[77];
	nq0[49] = q[31];
	nq0[50] = q[54];
	nq1[0] = q[59];
	nq1[1] = q[63];
	nq1[2] = q[75];
	nq1[3] = q[44];
	nq1[4] = q[80];
	nq1[5] = q[33];
	nq1[6] = q[66];
	nq1[7] = q[11];
	nq1[8] = q[49];
	nq1[9] = q[8];
	nq1[10] = q[68];
	nq1[11] = q[41];
	nq1[12] = q[23];
	nq1[13] = q[76];
	nq1[14] = q[90];
	nq1[15] = q[58];
	nq1[16] = q[17];
	nq1[17] = q[13];
	nq1[18] = q[46];
	nq1[19] = q[53];
	nq1[20] = q[14];
	nq1[21] = q[92];
	nq1[22] = q[25];
	nq1[23] = anc[4];
	nq1[24] = anc[3];
	nq1[25] = q[19];
	nq1[26] = q[36];
	nq1[27] = q[71];
	nq1[28] = q[30];
	nq1[29] = q[60];
	nq1[30] = q[51];
	nq1[31] = q[12];
	nq1[32] = q[7];
	nq1[33] = q[6];
	nq1[34] = q[42];
	nq1[35] = q[88];
	nq1[36] = q[57];
	nq1[37] = q[29];
	nq1[38] = q[74];
	nq1[39] = q[67];
	nq1[40] = anc[0];
	nq1[41] = q[15];
	nq1[42] = anc[1];
	nq1[43] = q[62];
	nq1[44] = anc[2];
	nq1[45] = q[81];
	nq1[46] = q[1];
	nq1[47] = q[24];
	nq1[48] = q[0];
	nq1[49] = q[5];
	nq1[50] = q[38];
	Recompute(res, 0, anc, 6, 75, 59){
		Toffoli( q[22], q[46], q[40] );
		CNOT( anc[4], q[75] );
		CNOT( q[53], q[81] );
		func4(nq1, 51);
		Toffoli( q[87], q[28], q[38] );
		Toffoli( q[79], q[26], q[29] );
		CNOT( q[40], q[3] );
		CNOT( anc[1], q[22] );
		Toffoli( q[43], anc[3], q[33] );
		Toffoli( q[95], q[5], anc[4] );
		Toffoli( q[77], q[44], q[43] );
		Toffoli( q[52], q[33], q[2] );
		Toffoli( q[91], q[51], q[72] );
		CNOT( q[72], q[6] );
		CNOT( q[7], q[15] );
		Toffoli( q[68], q[92], anc[1] );
		func3(nq0, 51);
		Toffoli( q[22], q[21], q[12] );
	}
	Restore {
		CNOT( q[8], res[0] );
		CNOT( q[39], res[1] );
		CNOT( q[18], res[2] );
		CNOT( q[14], res[3] );
		CNOT( q[13], res[4] );
		CNOT( q[94], res[5] );
		CNOT( q[26], res[6] );
		CNOT( q[41], res[7] );
		CNOT( q[25], res[8] );
		CNOT( q[40], res[9] );
		CNOT( q[47], res[10] );
		CNOT( q[23], res[11] );
		CNOT( q[33], res[12] );
		CNOT( q[36], res[13] );
		CNOT( q[45], res[14] );
		CNOT( q[15], res[15] );
		CNOT( anc[5], res[16] );
		CNOT( q[24], res[17] );
		CNOT( q[75], res[18] );
		CNOT( anc[4], res[19] );
		CNOT( q[54], res[20] );
		CNOT( q[4], res[21] );
		CNOT( q[91], res[22] );
		CNOT( q[61], res[23] );
		CNOT( q[35], res[24] );
		CNOT( q[27], res[25] );
		CNOT( q[62], res[26] );
		CNOT( q[34], res[27] );
		CNOT( q[60], res[28] );
		CNOT( q[11], res[29] );
		CNOT( q[2], res[30] );
		CNOT( q[21], res[31] );
		CNOT( q[74], res[32] );
		CNOT( q[52], res[33] );
		CNOT( q[3], res[34] );
		CNOT( q[20], res[35] );
		CNOT( q[73], res[36] );
		CNOT( q[7], res[37] );
		CNOT( q[92], res[38] );
		CNOT( q[85], res[39] );
		CNOT( q[55], res[40] );
		CNOT( q[81], res[41] );
		CNOT( q[90], res[42] );
	}
	Unrecompute {
		Toffoli( q[22], q[21], q[12] );
		func3R(nq0, 51);
		Toffoli( q[68], q[92], anc[1] );
		CNOT( q[7], q[15] );
		CNOT( q[72], q[6] );
		Toffoli( q[91], q[51], q[72] );
		Toffoli( q[52], q[33], q[2] );
		Toffoli( q[77], q[44], q[43] );
		Toffoli( q[95], q[5], anc[4] );
		Toffoli( q[43], anc[3], q[33] );
		CNOT( anc[1], q[22] );
		CNOT( q[40], q[3] );
		Toffoli( q[79], q[26], q[29] );
		Toffoli( q[87], q[28], q[38] );
		func4R(nq1, 51);
		CNOT( q[53], q[81] );
		CNOT( anc[4], q[75] );
		Toffoli( q[22], q[46], q[40] );
	} Refree(anc, 6) {}
}
// main function
int main() {
	qbit *new[192];
	acquire(192, new, 0, NULL);
	// Intialize inputs
	X (new[167]);
	X (new[170]);
	X (new[73]);
	X (new[114]);
	X (new[91]);
	X (new[169]);
	X (new[131]);
	X (new[129]);
	X (new[109]);
	X (new[155]);
	X (new[2]);
	X (new[24]);
	X (new[174]);
	X (new[134]);
	X (new[67]);
	X (new[79]);
	X (new[38]);
	X (new[95]);
	X (new[125]);
	X (new[87]);
	X (new[105]);
	X (new[47]);
	X (new[45]);
	X (new[12]);
	X (new[75]);
	X (new[42]);
	X (new[26]);
	X (new[77]);
	X (new[191]);
	X (new[0]);
	X (new[22]);
	X (new[41]);
	X (new[70]);
	X (new[157]);
	X (new[19]);
	X (new[122]);
	X (new[69]);
	X (new[7]);
	X (new[15]);
	X (new[43]);
	X (new[140]);
	X (new[183]);
	X (new[107]);
	X (new[127]);
	X (new[102]);
	X (new[5]);
	X (new[130]);
	X (new[58]);
	X (new[78]);
	X (new[124]);
	X (new[35]);
	X (new[136]);
	X (new[188]);
	X (new[39]);
	X (new[141]);
	// Start computation
	qbit *nq0[96];
	qbit *nq1[96];
	nq0[0] = new[22];
	nq0[1] = new[103];
	nq0[2] = new[88];
	nq0[3] = new[53];
	nq0[4] = new[25];
	nq0[5] = new[0];
	nq0[6] = new[99];
	nq0[7] = new[163];
	nq0[8] = new[35];
	nq0[9] = new[31];
	nq0[10] = new[147];
	nq0[11] = new[72];
	nq0[12] = new[104];
	nq0[13] = new[65];
	nq0[14] = new[146];
	nq0[15] = new[9];
	nq0[16] = new[13];
	nq0[17] = new[30];
	nq0[18] = new[101];
	nq0[19] = new[120];
	nq0[20] = new[185];
	nq0[21] = new[107];
	nq0[22] = new[158];
	nq0[23] = new[67];
	nq0[24] = new[45];
	nq0[25] = new[29];
	nq0[26] = new[70];
	nq0[27] = new[173];
	nq0[28] = new[113];
	nq0[29] = new[151];
	nq0[30] = new[17];
	nq0[31] = new[1];
	nq0[32] = new[149];
	nq0[33] = new[46];
	nq0[34] = new[171];
	nq0[35] = new[11];
	nq0[36] = new[177];
	nq0[37] = new[168];
	nq0[38] = new[89];
	nq0[39] = new[110];
	nq0[40] = new[15];
	nq0[41] = new[59];
	nq0[42] = new[118];
	nq0[43] = new[174];
	nq0[44] = new[156];
	nq0[45] = new[4];
	nq0[46] = new[108];
	nq0[47] = new[78];
	nq0[48] = new[6];
	nq0[49] = new[170];
	nq0[50] = new[39];
	nq0[51] = new[102];
	nq0[52] = new[3];
	nq0[53] = new[80];
	nq0[54] = new[94];
	nq0[55] = new[24];
	nq0[56] = new[126];
	nq0[57] = new[5];
	nq0[58] = new[55];
	nq0[59] = new[155];
	nq0[60] = new[52];
	nq0[61] = new[125];
	nq0[62] = new[169];
	nq0[63] = new[148];
	nq0[64] = new[76];
	nq0[65] = new[178];
	nq0[66] = new[41];
	nq0[67] = new[98];
	nq0[68] = new[73];
	nq0[69] = new[135];
	nq0[70] = new[20];
	nq0[71] = new[38];
	nq0[72] = new[121];
	nq0[73] = new[139];
	nq0[74] = new[57];
	nq0[75] = new[161];
	nq0[76] = new[188];
	nq0[77] = new[187];
	nq0[78] = new[123];
	nq0[79] = new[62];
	nq0[80] = new[112];
	nq0[81] = new[134];
	nq0[82] = new[106];
	nq0[83] = new[119];
	nq0[84] = new[128];
	nq0[85] = new[127];
	nq0[86] = new[21];
	nq0[87] = new[160];
	nq0[88] = new[28];
	nq0[89] = new[143];
	nq0[90] = new[130];
	nq0[91] = new[7];
	nq0[92] = new[16];
	nq0[93] = new[50];
	nq0[94] = new[152];
	nq0[95] = new[75];
	nq1[0] = new[96];
	nq1[1] = new[68];
	nq1[2] = new[138];
	nq1[3] = new[10];
	nq1[4] = new[87];
	nq1[5] = new[175];
	nq1[6] = new[166];
	nq1[7] = new[92];
	nq1[8] = new[109];
	nq1[9] = new[64];
	nq1[10] = new[86];
	nq1[11] = new[117];
	nq1[12] = new[60];
	nq1[13] = new[44];
	nq1[14] = new[54];
	nq1[15] = new[37];
	nq1[16] = new[77];
	nq1[17] = new[191];
	nq1[18] = new[182];
	nq1[19] = new[122];
	nq1[20] = new[32];
	nq1[21] = new[49];
	nq1[22] = new[141];
	nq1[23] = new[150];
	nq1[24] = new[172];
	nq1[25] = new[186];
	nq1[26] = new[176];
	nq1[27] = new[190];
	nq1[28] = new[48];
	nq1[29] = new[63];
	nq1[30] = new[136];
	nq1[31] = new[116];
	nq1[32] = new[14];
	nq1[33] = new[115];
	nq1[34] = new[129];
	nq1[35] = new[34];
	nq1[36] = new[144];
	nq1[37] = new[61];
	nq1[38] = new[43];
	nq1[39] = new[84];
	nq1[40] = new[90];
	nq1[41] = new[137];
	nq1[42] = new[184];
	nq1[43] = new[47];
	nq1[44] = new[23];
	nq1[45] = new[153];
	nq1[46] = new[40];
	nq1[47] = new[132];
	nq1[48] = new[140];
	nq1[49] = new[183];
	nq1[50] = new[12];
	nq1[51] = new[36];
	nq1[52] = new[124];
	nq1[53] = new[91];
	nq1[54] = new[95];
	nq1[55] = new[157];
	nq1[56] = new[79];
	nq1[57] = new[142];
	nq1[58] = new[180];
	nq1[59] = new[18];
	nq1[60] = new[27];
	nq1[61] = new[71];
	nq1[62] = new[111];
	nq1[63] = new[154];
	nq1[64] = new[33];
	nq1[65] = new[26];
	nq1[66] = new[69];
	nq1[67] = new[93];
	nq1[68] = new[97];
	nq1[69] = new[56];
	nq1[70] = new[19];
	nq1[71] = new[42];
	nq1[72] = new[159];
	nq1[73] = new[167];
	nq1[74] = new[164];
	nq1[75] = new[66];
	nq1[76] = new[74];
	nq1[77] = new[2];
	nq1[78] = new[8];
	nq1[79] = new[100];
	nq1[80] = new[81];
	nq1[81] = new[162];
	nq1[82] = new[179];
	nq1[83] = new[181];
	nq1[84] = new[83];
	nq1[85] = new[58];
	nq1[86] = new[85];
	nq1[87] = new[165];
	nq1[88] = new[51];
	nq1[89] = new[131];
	nq1[90] = new[114];
	nq1[91] = new[133];
	nq1[92] = new[105];
	nq1[93] = new[189];
	nq1[94] = new[82];
	nq1[95] = new[145];
	for (int i = 0; i < LOOP; i++) {
		func1(nq0, 96);
		func2(nq1, 96);
	}
	return 0;
}
