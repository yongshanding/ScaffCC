#include <stdlib.h>
#include "qalloc.h"
#include "uncompute.h"

//void acquire(int n, qbit **addr) {
//	qbit *new = (qbit *)malloc(sizeof(qbit)*n);
//	*addr = new;
//}
//
//void release(qbit **out, int n1, qbit **anc, int n2);


void addMod(qbit **a, qbit **b, int n) {
	printf("func addMod\n");
	qbit *d[2*32];
	for (int i = 0; i < 32; i++) {
		d[i] = a[i];
		d[32+i] = b[i];
	}
	qbit *c[1];

	Compute(0, 1, 30*3+2+30*3, 30*3+2, 0, 32*7, 0){
		acquire(1, c, 64, d);
	
		CNOT(a[0], b[0]);
		CNOT(a[0], c[0]);
		Toffoli(c[0], b[0], a[0]);
		for (int i = 1; i < n-1; i++) {
			CNOT(a[i],b[i]);
			CNOT(a[i],a[i-1]);
			Toffoli(a[i-1],b[i],a[i]);
		}
	}
	Store{
		CNOT(a[n-1], b[n-1]);
		CNOT(a[n-2], b[n-1]);
	}
	Uncompute(b, 0, c, 1, 30*3+2+30*3, 30*3+2){
		for (int i = 2; i < n; i++) {
			Toffoli(a[n-i-1],b[n-i],a[n-i]);
			CNOT(a[n-i],a[n-i-1]);
			CNOT(b[n-i],a[n-i-1]);
		}
		Toffoli(c[0], b[0], a[0]);
		CNOT(a[0], c[0]);
		CNOT(c[0], b[0]);
	}Free(c, 1){}
	//release(b, 32, c, 1, NULL);
}

void ch(qbit **e, qbit **f, qbit **g, qbit **h, int n){
	printf("func ch\n");
	qbit *d[3*32];
	for (int i = 0; i < 32; i++) {
		d[i] = e[i];
		d[32+i] = f[i];
		d[64+i] = g[i];
	}
	qbit *anc[2*n];
	qbit **t = &anc[32];

	Compute(0, 64, 2*32+32+2*32, 2*32+32, 0, 32*7, 0){
		acquire(64, anc, 96, d);
		for (int i = 0; i < n; i++){
			Toffoli(e[i], f[i], anc[i]);
			Toffoli(anc[i], g[i], t[i]);
		}
	}
	Store{
		for (int i = 0; i < 32; i++){
			CNOT(t[i], h[i]);
		}
	}
	Uncompute(h, 0, anc, 64, 2*32+32+2*32, 2*32+32){
		for (int i = n-1; i >= 0; i--){
			Toffoli(anc[i], g[i], t[i]);
			Toffoli(e[i], f[i], anc[i]);
		}
	}Free(anc, 64){}
}

void ch_param(qbit **e, qbit **f, qbit **g, qbit **t, qbit **anc, int n){
	printf("func ch_param\n");
	for (int i = 0; i < n; i++){
		Toffoli(e[i], f[i], anc[i]);
		Toffoli(anc[i], g[i], t[i]);
	}
}

void toffLoopHelper(qbit *a, qbit *b, qbit *c, qbit *t, qbit *ttemp){
	printf("func toffLoopHelper\n");
	qbit *d[4];
	d[0] = a;
	d[1] = b;
	d[2] = c;
	d[3] = t;
	qbit *anc[1];
	Compute(0, 1, 4+1+4, 4+1, 0, 32, 0){
		acquire(1, anc, 4, d);
		Toffoli(a,b,anc[0]);
		Toffoli(a,c,anc[0]);
		Toffoli(b,c,anc[0]);
		CNOT(anc[0], t);
	}
	Store{
		CNOT(t, ttemp);
	}
	Uncompute(&ttemp, 0, anc, 1, 4+1+4, 4+1){
		CNOT(anc[0], t);
		Toffoli(b,c,anc[0]);
		Toffoli(a,c,anc[0]);
		Toffoli(a,b,anc[0]);
	}Free(anc, 1){}
}

void ma(qbit **a, qbit **b, qbit **c, qbit **h, int n){
	printf("func ma\n");
	qbit *d[3*32];
	for (int i = 0; i < 32; i++) {
		d[i] = a[i];
		d[32+i] = b[i];
		d[64+i] = c[i];
	}
	qbit *t[33];
	qbit **ttemp;
	Compute(0, 33, 0+1+0, 0+1, 32, 32*7, 0){
		acquire(33,t, 96, d);
		ttemp = &t[32];
		for (int i = 0; i < n; i++){
			toffLoopHelper(a[i],b[i],c[i], t[i], ttemp[0]);	
		}
	}
	Store{
		for (int i = 0; i < 32; i++){
			CNOT(t[i], h[i]);
		}
	}
	Uncompute(h, 0, t, 33, 0+1+0, 0+1){
		for (int i = n - 1; i >= 0; i--){
			toffLoopHelper(a[i],b[i],c[i], t[i], ttemp[0]);	
		}
	}Free(t, 33) {}

}

void rot(qbit **a, qbit **b, int n, int shift){
	printf("func rot\n");
	int j = 0;
	for (int i = n - shift - 1; i < n; i++){
		b[j] = a[i];
		j += 1;
	}
	for (int i = 0; i < n - shift - 1; i++){
		b[j] = a[i];
		j += 1;
	}
}

void s0(qbit **a, qbit **h, int n){
	printf("func s0\n");
	qbit *t[32];

	qbit *a2[32];
	qbit *a13[32];
	qbit *a22[32];

	Compute(0, 32, 32*3+32+32*3, 32*3+32, 0, 32*7, 0){
		acquire(32,t, 32, a);
		//rot(a, a2, n, 2);
		//rot(a, a13, n, 13);
		//rot(a, a22, n, 22);

		for (int i = 0; i < n; i++){
			CNOT(a2[i], t[i]);	
			CNOT(a13[i], t[i]);	
			CNOT(a22[i], t[i]);	
		}
	}

	Store{
		for (int i = 0; i < 32; i++){
			CNOT(t[i], h[i]);
		}
	}

	Uncompute(h, 0, t, 32, 32*3+32+32*3, 32*3+32){
		for (int i = n - 1; i >= 0; i--){
			CNOT(a22[i], t[i]);
			CNOT(a13[i], t[i]);
			CNOT(a2[i], t[i]);
		}
		//_reverse_rot(a, a22, n, 22);
		//_reverse_rot(a, a13, n, 13);
		//_reverse_rot(a, a2, n, 2);
	}Free(t, 32){}
}
void s1(qbit **a, qbit **h, int n){
	printf("func s1\n");
	qbit *t[32];
	qbit *a6[32];
	qbit *a11[32];
	qbit *a25[32];
	Compute(0, 32, 32*3+32+32*3, 32*3+32, 0, 32*7,0){
		acquire(32,t, 32, a);
		//rot(a, a6, n, 6);
		//rot(a, a11, n, 11);
		//rot(a, a25, n, 25);

		for (int i = 0; i < n; i++){
			CNOT(a6[i], t[i]);
			CNOT(a11[i], t[i]);
			CNOT(a25[i], t[i]);
		}
	}

	Store{
		for (int i = 0; i < 32; i++){
			CNOT(t[i], h[i]);
		}
	}
	Uncompute(h, 0, t, 32, 32*3+32+32*3, 32*3+32){
		for (int i = n - 1; i >= 0; i--){
			CNOT(a25[i], t[i]);
			CNOT(a11[i], t[i]);
			CNOT(a6[i], t[i]);
		}
		//_reverse_rot(a, a25, n, 25);
		//_reverse_rot(a, a11, n, 11);
		//_reverse_rot(a, a6, n, 6);

	}Free(t, 32){}
}

//void ch_addMod(qbit **e, qbit **f, qbit **g, qbit **h, qbit **t0, int n){
//	qbit *anc[32];
//	acquire(32,anc);
//	ch_param(e,f,g,t0,anc,32);
//	addMod(t0,h,32);
//	release(h,32,anc,32,);
//}

void hsh(qbit **k, qbit **w, qbit **x){
	printf("func hsh\n");
	//qbit *htemp[32];
	//acquire(32,htemp);
	qbit **a = &x[0];
	qbit **b = &x[32];
	qbit **c = &x[64];
	qbit **d = &x[96];
	qbit **e = &x[128];
	qbit **f = &x[160];
	qbit **g = &x[192];
	qbit **h = &x[224];
	//ch_addMod(e,f,g,h,t0,32);

	ch(e, f, g, h, 32);
	//addMod(k,w,32);
	s0(a, h, 32);
	////addMod(t1,h,32);
	addMod(w, h, 32);
	addMod(k, h, 32);
	addMod(h, d, 32);
	ma(a, b, c, h, 32);
	////addMod(t2, h, 32);
	s1(e, h, 32);
	//addMod(t3, h, 32);

	//release(x, 256, t,32, xtemp);

}

void sha2Looper(qbit **k, qbit **w, qbit **x, int val){
	printf("func sha2Looper\n");
	//qbit *anc[256];
	//rot(x,anc,256,val);
	//x = anc;
	hsh(k,w,x);

}

void sha2(qbit **k, qbit **w, qbit **x, int n){
	printf("func sha2\n");
	//qbit *xtemp[256];
	//acquire(256,xtemp);
	for (int i = 0; i < n; i++){
		int idx = (32 * i) % 256;
		sha2Looper(k,w,x,idx);
	}
}

int main() {
	int n = 32;
	qbit *new[2*32+256];
	acquire(2*32+256, new, 0, NULL);
	qbit **k = &new[0];
	qbit **w = &new[32];
	qbit **x = &new[64];
	sha2(k,w,x,32);
	return 0;

}
