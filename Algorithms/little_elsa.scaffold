// Scaffold file synthesized by rand-bench.py
// qubits: 2 ancilla: 2 gates: 4 levels: 2 degrees: 3
#include "qalloc.h"
#include "uncompute.h"
// Call list: 1,2,3;;4,5,6;;7
// Function 7 with degree 0
// nq: 2, na: 2, ng: 2
void func7(qbit **q, int n) {
printf("func7\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[2]; // interacting bits
	qbit *res[1];
	nb[0] = q[0];
	nb[1] = q[1];
	res[0] = q[0];
	// Leaf function
	Compute (0, 2, 5, 3, 0, 1, 0) {
		acquire(2, anc, 2, nb);
		CNOT( anc[1], q[0] );
		CNOT( q[1], anc[1] );
	}
	Store {
		CNOT( anc[1], res[0] );
	}
	Uncompute(res, 0, anc, 2, 5, 3){
		CNOT( q[1], anc[1] );
		CNOT( anc[1], q[0] );
	} Free(anc, 2) {}
}
// Function 7 with degree 0
// nq: 2, na: 2, ng: 2
void func7R(qbit **q, int n) {
printf("func7R\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[2]; // interacting bits
	qbit *res[1];
	nb[0] = q[0];
	nb[1] = q[1];
	res[0] = q[0];
	// Leaf function
	_computeModule(0, 2, 5, 3, 0, 1, 0);
	acquire(2, anc, 2, nb);
	Recompute (res, 0, anc, 2, 5, 3){
		CNOT( q[1], anc[1] );
		CNOT( anc[1], q[0] );
	}
	Restore {
		CNOT( anc[1], res[0] );
	}
	Unrecompute {
		CNOT( anc[1], q[0] );
		CNOT( q[1], anc[1] );
	} Refree(anc, 2) {}
}
// Function 6 with degree 0
// nq: 2, na: 2, ng: 1
void func6(qbit **q, int n) {
printf("func6\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[1]; // interacting bits
	qbit *res[1];
	nb[0] = q[1];
	res[0] = q[0];
	// Leaf function
	Compute (0, 2, 3, 2, 0, 3, 0) {
		acquire(2, anc, 1, nb);
		CNOT( q[1], anc[0] );
	}
	Store {
		CNOT( anc[1], res[0] );
	}
	Uncompute(res, 0, anc, 2, 3, 2){
		CNOT( q[1], anc[0] );
	} Free(anc, 2) {}
}
// Function 6 with degree 0
// nq: 2, na: 2, ng: 1
void func6R(qbit **q, int n) {
printf("func6R\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[1]; // interacting bits
	qbit *res[1];
	nb[0] = q[1];
	res[0] = q[0];
	// Leaf function
	_computeModule(0, 2, 3, 2, 0, 3, 0);
	acquire(2, anc, 1, nb);
	Recompute (res, 0, anc, 2, 3, 2){
		CNOT( q[1], anc[0] );
	}
	Restore {
		CNOT( anc[1], res[0] );
	}
	Unrecompute {
		CNOT( q[1], anc[0] );
	} Refree(anc, 2) {}
}
// Function 5 with degree 0
// nq: 2, na: 1, ng: 4
void func5(qbit **q, int n) {
printf("func5\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[7]; // interacting bits
	qbit *res[1];
	nb[0] = q[1];
	nb[1] = q[0];
	nb[2] = q[1];
	nb[3] = q[0];
	nb[4] = q[1];
	nb[5] = q[1];
	nb[6] = q[0];
	res[0] = q[1];
	// Leaf function
	Compute (0, 1, 9, 5, 0, 3, 0) {
		acquire(1, anc, 7, nb);
		Toffoli( q[1], anc[0], q[0] );
		Toffoli( anc[0], q[1], q[0] );
		CNOT( q[1], anc[0] );
		Toffoli( q[1], anc[0], q[0] );
	}
	Store {
		CNOT( anc[0], res[0] );
	}
	Uncompute(res, 0, anc, 1, 9, 5){
		Toffoli( q[1], anc[0], q[0] );
		CNOT( q[1], anc[0] );
		Toffoli( anc[0], q[1], q[0] );
		Toffoli( q[1], anc[0], q[0] );
	} Free(anc, 1) {}
}
// Function 5 with degree 0
// nq: 2, na: 1, ng: 4
void func5R(qbit **q, int n) {
printf("func5R\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[7]; // interacting bits
	qbit *res[1];
	nb[0] = q[1];
	nb[1] = q[0];
	nb[2] = q[1];
	nb[3] = q[0];
	nb[4] = q[1];
	nb[5] = q[1];
	nb[6] = q[0];
	res[0] = q[1];
	// Leaf function
	_computeModule(0, 1, 9, 5, 0, 3, 0);
	acquire(1, anc, 7, nb);
	Recompute (res, 0, anc, 1, 9, 5){
		Toffoli( q[1], anc[0], q[0] );
		CNOT( q[1], anc[0] );
		Toffoli( anc[0], q[1], q[0] );
		Toffoli( q[1], anc[0], q[0] );
	}
	Restore {
		CNOT( anc[0], res[0] );
	}
	Unrecompute {
		Toffoli( q[1], anc[0], q[0] );
		Toffoli( anc[0], q[1], q[0] );
		CNOT( q[1], anc[0] );
		Toffoli( q[1], anc[0], q[0] );
	} Refree(anc, 1) {}
}
// Function 4 with degree 1
// nq: 2, na: 2, ng: 3
void func4(qbit **q, int n) {
printf("func4\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[5]; // interacting bits
	qbit *res[2];
	qbit *nq0[2];
	nb[0] = q[1];
	nb[1] = q[0];
	nb[2] = q[0];
	nb[3] = q[1];
	nb[4] = q[0];
	res[0] = q[0];
	res[1] = q[1];
	// Non-leaf function
	Compute (0, 2, 8, 5, 1, 3, 0){
		acquire(2, anc, 5, nb);
	nq0[0] = q[1];
	nq0[1] = anc[1];
		Toffoli( q[1], anc[0], q[0] );
		func7(nq0, 2);
		CNOT( q[0], anc[0] );
		Toffoli( anc[0], q[0], q[1] );
	}
	Store {
		CNOT( anc[0], res[0] );
		CNOT( anc[1], res[1] );
	}
	Uncompute(res, 0, anc, 2, 8, 5){
		Toffoli( anc[0], q[0], q[1] );
		CNOT( q[0], anc[0] );
		func7R(nq0, 2);
		Toffoli( q[1], anc[0], q[0] );
	} Free(anc, 2) {}
}
// Function 4 with degree 1
// nq: 2, na: 2, ng: 3
void func4R(qbit **q, int n) {
printf("func4R\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[5]; // interacting bits
	qbit *res[2];
	qbit *nq0[2];
	nb[0] = q[1];
	nb[1] = q[0];
	nb[2] = q[0];
	nb[3] = q[1];
	nb[4] = q[0];
	res[0] = q[0];
	res[1] = q[1];
	// Non-leaf function
	_computeModule(0, 2, 8, 5, 1, 3, 0);
	acquire(2, anc, 5, nb);
	nq0[0] = q[1];
	nq0[1] = anc[1];
	Recompute(res, 0, anc, 2, 8, 5){
		Toffoli( q[1], anc[0], q[0] );
		func7(nq0, 2);
		CNOT( q[0], anc[0] );
		Toffoli( anc[0], q[0], q[1] );
	}
	Restore {
		CNOT( anc[0], res[0] );
		CNOT( anc[1], res[1] );
	}
	Unrecompute {
		Toffoli( anc[0], q[0], q[1] );
		CNOT( q[0], anc[0] );
		func7R(nq0, 2);
		Toffoli( q[1], anc[0], q[0] );
	} Refree(anc, 2) {}
}
// Function 3 with degree 0
// nq: 2, na: 2, ng: 3
void func3(qbit **q, int n) {
printf("func3\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[3]; // interacting bits
	qbit *res[2];
	nb[0] = q[1];
	nb[1] = q[0];
	nb[2] = q[1];
	res[0] = q[0];
	res[1] = q[1];
	// Leaf function
	Compute (0, 2, 8, 5, 0, 3, 0) {
		acquire(2, anc, 3, nb);
		Toffoli( anc[0], q[1], q[0] );
		CNOT( anc[0], anc[1] );
		Toffoli( q[1], anc[1], anc[0] );
	}
	Store {
		CNOT( anc[1], res[0] );
		CNOT( anc[0], res[1] );
	}
	Uncompute(res, 0, anc, 2, 8, 5){
		Toffoli( q[1], anc[1], anc[0] );
		CNOT( anc[0], anc[1] );
		Toffoli( anc[0], q[1], q[0] );
	} Free(anc, 2) {}
}
// Function 3 with degree 0
// nq: 2, na: 2, ng: 3
void func3R(qbit **q, int n) {
printf("func3R\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[3]; // interacting bits
	qbit *res[2];
	nb[0] = q[1];
	nb[1] = q[0];
	nb[2] = q[1];
	res[0] = q[0];
	res[1] = q[1];
	// Leaf function
	_computeModule(0, 2, 8, 5, 0, 3, 0);
	acquire(2, anc, 3, nb);
	Recompute (res, 0, anc, 2, 8, 5){
		Toffoli( q[1], anc[1], anc[0] );
		CNOT( anc[0], anc[1] );
		Toffoli( anc[0], q[1], q[0] );
	}
	Restore {
		CNOT( anc[1], res[0] );
		CNOT( anc[0], res[1] );
	}
	Unrecompute {
		Toffoli( anc[0], q[1], q[0] );
		CNOT( anc[0], anc[1] );
		Toffoli( q[1], anc[1], anc[0] );
	} Refree(anc, 2) {}
}
// Function 2 with degree 3
// nq: 2, na: 2, ng: 1
void func2(qbit **q, int n) {
printf("func2\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[1]; // interacting bits
	qbit *res[1];
	qbit *nq0[2];
	qbit *nq1[2];
	qbit *nq2[2];
	nb[0] = q[1];
	res[0] = q[0];
	// Non-leaf function
	Compute (0, 2, 3, 2, 3, 3, 0){
		acquire(2, anc, 1, nb);
	nq0[0] = anc[1];
	nq0[1] = q[0];
	nq1[0] = q[1];
	nq1[1] = anc[1];
	nq2[0] = anc[1];
	nq2[1] = anc[0];
		CNOT( anc[1], q[1] );
		func5(nq1, 2);
		func4(nq0, 2);
		func6(nq2, 2);
	}
	Store {
		CNOT( anc[0], res[0] );
	}
	Uncompute(res, 0, anc, 2, 3, 2){
		func6R(nq2, 2);
		func4R(nq0, 2);
		func5R(nq1, 2);
		CNOT( anc[1], q[1] );
	} Free(anc, 2) {}
}
// Function 2 with degree 3
// nq: 2, na: 2, ng: 1
void func2R(qbit **q, int n) {
printf("func2R\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[1]; // interacting bits
	qbit *res[1];
	qbit *nq0[2];
	qbit *nq1[2];
	qbit *nq2[2];
	nb[0] = q[1];
	res[0] = q[0];
	// Non-leaf function
	_computeModule(0, 2, 3, 2, 3, 3, 0);
	acquire(2, anc, 1, nb);
	nq0[0] = anc[1];
	nq0[1] = q[0];
	nq1[0] = q[1];
	nq1[1] = anc[1];
	nq2[0] = anc[1];
	nq2[1] = anc[0];
	Recompute(res, 0, anc, 2, 3, 2){
		CNOT( anc[1], q[1] );
		func5(nq1, 2);
		func4(nq0, 2);
		func6(nq2, 2);
	}
	Restore {
		CNOT( anc[0], res[0] );
	}
	Unrecompute {
		func6R(nq2, 2);
		func4R(nq0, 2);
		func5R(nq1, 2);
		CNOT( anc[1], q[1] );
	} Refree(anc, 2) {}
}
// Function 1 with degree 0
// nq: 2, na: 2, ng: 4
void func1(qbit **q, int n) {
printf("func1\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[4]; // interacting bits
	qbit *res[2];
	nb[0] = q[0];
	nb[1] = q[0];
	nb[2] = q[1];
	nb[3] = q[0];
	res[0] = q[0];
	res[1] = q[1];
	// Leaf function
	Compute (0, 2, 10, 6, 0, 3, 0) {
		acquire(2, anc, 4, nb);
		CNOT( anc[0], q[0] );
		CNOT( anc[0], anc[1] );
		Toffoli( q[0], anc[0], q[1] );
		Toffoli( anc[1], anc[0], q[0] );
	}
	Store {
		CNOT( anc[1], res[0] );
		CNOT( anc[0], res[1] );
	}
	Uncompute(res, 0, anc, 2, 10, 6){
		Toffoli( anc[1], anc[0], q[0] );
		Toffoli( q[0], anc[0], q[1] );
		CNOT( anc[0], anc[1] );
		CNOT( anc[0], q[0] );
	} Free(anc, 2) {}
}
// Function 1 with degree 0
// nq: 2, na: 2, ng: 4
void func1R(qbit **q, int n) {
printf("func1R\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[4]; // interacting bits
	qbit *res[2];
	nb[0] = q[0];
	nb[1] = q[0];
	nb[2] = q[1];
	nb[3] = q[0];
	res[0] = q[0];
	res[1] = q[1];
	// Leaf function
	_computeModule(0, 2, 10, 6, 0, 3, 0);
	acquire(2, anc, 4, nb);
	Recompute (res, 0, anc, 2, 10, 6){
		Toffoli( anc[1], anc[0], q[0] );
		Toffoli( q[0], anc[0], q[1] );
		CNOT( anc[0], anc[1] );
		CNOT( anc[0], q[0] );
	}
	Restore {
		CNOT( anc[1], res[0] );
		CNOT( anc[0], res[1] );
	}
	Unrecompute {
		CNOT( anc[0], q[0] );
		CNOT( anc[0], anc[1] );
		Toffoli( q[0], anc[0], q[1] );
		Toffoli( anc[1], anc[0], q[0] );
	} Refree(anc, 2) {}
}
// main function
int main() {
	qbit *new[2];
	acquire(2, new, 0, NULL);
	// Intialize inputs
	X (new[1]);
	// Start computation
	qbit *nq0[2];
	qbit *nq1[2];
	qbit *nq2[2];
	nq0[0] = new[0];
	nq0[1] = new[1];
	nq1[0] = new[0];
	nq1[1] = new[1];
	nq2[0] = new[0];
	nq2[1] = new[1];
	func1(nq0, 2);
	func2(nq1, 2);
	func3(nq2, 2);
    MeasZ(new[0]);
    MeasZ(new[1]);
	return 0;
}
