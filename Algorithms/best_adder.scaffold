#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "qalloc.h"
#include "uncompute.h"

#define N 8

/*arxiv:1202.6614*/
void CMaj(qbit *ctrl, qbit *x, qbit *y, qbit *z) {
	Toffoli(ctrl, z, y);
	CNOT(z, x);
	Toffoli(x, y, z);
}

void CUma(qbit *ctrl, qbit *x, qbit *y, qbit *z) {
	Toffoli(x, y, z);
	CNOT(z, x);
	Toffoli(ctrl, x, y);
}


/* In place: a,b -> a+b, b, arxiv:1202.6614*/
void cucarroAdderIn(qbit *ctrl, qbit **a, qbit **b, int n) {
	qbit *anc[2];
	acquire(2, anc, 1, a);
	qbit *cin = anc[0];
	qbit *cout = anc[1];
	qbit *x; qbit *y; qbit *z; // rename
	int ng = n * (14+1+14);
	Compute{
		for (int i = 0; i < n; i++) {
			if (i == 0) {
				x = cin;
				y = a[0];
				z = b[0];
			} else {
				x = b[i-1];
				y = a[i];
				z = b[i];
			}
			CMaj(ctrl, x, y, z);
		}
	}
	Store{
		Toffoli(ctrl, b[n-1], cout);
		Toffoli(ctrl, cout, a[n]);
	}
	Uncompute(anc,2,a,n,ng){
		for (int i = n-1; i >=0; i--) {
			if (i == 0) {
				x = cin;
				y = a[0];
				z = b[0];
			} else {
				x = b[i-1];
				y = a[i];
				z = b[i];
			}
			CUma(ctrl, x, y, z);
		}
	} Free(anc,2) {}
}

void inPlaceAdd(qbit *ctrl, qbit **a, qbit **b, int n) {
	cucarroAdderIn(ctrl, a, b, n);
}




int main() {
	int n = N;
	qbit *new[2*N+2];
	acquire(2*N+2, new, 0, NULL);
	qbit **ctrl = &new[0]; // 1 bit
	qbit **a = &new[1]; // N+1 bits (last bit for resulting carry bit)
	qbit **b = &new[N+2]; // N bits
	/* Initialize a, b here; default a=b=0 */
	X(ctrl[0]);
	//X(a[1]);
	//X(a[3]);
	//X(a[5]);
	//X(b[1]);
	//X(b[3]);
	//X(b[5]);
	/* In place addition */
	inPlaceAdd(ctrl[0], a, b, N);
	for (int i = 0; i < N+1; i++) {
		MeasZ(a[i]);
	}
	return 0;
	
}

