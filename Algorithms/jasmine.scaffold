// Scaffold file synthesized by para-bench.py
// qubits: 16 ancilla: 16 gates: 32 levels: 2 degrees: 4 loops: 32
#include "qalloc.h"
#include "uncompute.h"
#define LOOP 32
// Call list: 1,2,3,4;5,6,7,8;9,10;11;12,13,14;15,16,17,18
// Function 18 with degree 0
// nq: 2, na: 4, ng: 21
void func18(qbit **q, int n) {
printf("func18\n");
fflush(stderr);
	qbit *anc[4]; // ancilla
	qbit *nb[15]; // interacting bits
	qbit *res[2];
	nb[0] = q[0];
	nb[1] = q[1];
	nb[2] = q[0];
	nb[3] = q[1];
	nb[4] = q[0];
	nb[5] = q[0];
	nb[6] = q[0];
	nb[7] = q[0];
	nb[8] = q[0];
	nb[9] = q[1];
	nb[10] = q[1];
	nb[11] = q[0];
	nb[12] = q[1];
	nb[13] = q[0];
	nb[14] = q[1];
	res[0] = q[1];
	res[1] = q[0];
	// Leaf function
	Compute (0, 4, 44, 23, 0, 4, 0) {
		acquire(4, anc, 15, nb);
		Toffoli( anc[1], q[0], anc[3] );
		CNOT( q[1], anc[1] );
		CNOT( q[0], q[1] );
		CNOT( anc[0], q[0] );
		CNOT( anc[1], q[0] );
		Toffoli( anc[2], anc[1], anc[3] );
		CNOT( anc[3], q[0] );
		CNOT( q[0], anc[2] );
		Toffoli( anc[2], anc[1], anc[0] );
		Toffoli( anc[2], anc[0], anc[1] );
		CNOT( anc[0], anc[2] );
		CNOT( anc[1], anc[0] );
		Toffoli( anc[1], q[0], anc[2] );
		CNOT( anc[2], anc[3] );
		CNOT( q[1], anc[3] );
		Toffoli( anc[2], anc[0], q[1] );
		Toffoli( anc[2], anc[1], q[0] );
		Toffoli( anc[2], anc[3], q[1] );
		Toffoli( anc[2], q[0], anc[3] );
		Toffoli( q[1], anc[2], anc[0] );
		Toffoli( anc[2], anc[0], anc[1] );
	}
	Store {
		CNOT( anc[2], res[0] );
		CNOT( anc[3], res[1] );
	}
	Uncompute(res, 0, anc, 4, 44, 23){
		Toffoli( anc[2], anc[0], anc[1] );
		Toffoli( q[1], anc[2], anc[0] );
		Toffoli( anc[2], q[0], anc[3] );
		Toffoli( anc[2], anc[3], q[1] );
		Toffoli( anc[2], anc[1], q[0] );
		Toffoli( anc[2], anc[0], q[1] );
		CNOT( q[1], anc[3] );
		CNOT( anc[2], anc[3] );
		Toffoli( anc[1], q[0], anc[2] );
		CNOT( anc[1], anc[0] );
		CNOT( anc[0], anc[2] );
		Toffoli( anc[2], anc[0], anc[1] );
		Toffoli( anc[2], anc[1], anc[0] );
		CNOT( q[0], anc[2] );
		CNOT( anc[3], q[0] );
		Toffoli( anc[2], anc[1], anc[3] );
		CNOT( anc[1], q[0] );
		CNOT( anc[0], q[0] );
		CNOT( q[0], q[1] );
		CNOT( q[1], anc[1] );
		Toffoli( anc[1], q[0], anc[3] );
	} Free(anc, 4) {}
}
// Function 18 with degree 0
// nq: 2, na: 4, ng: 21
void func18R(qbit **q, int n) {
printf("func18R\n");
fflush(stderr);
	qbit *anc[4]; // ancilla
	qbit *nb[15]; // interacting bits
	qbit *res[2];
	nb[0] = q[0];
	nb[1] = q[1];
	nb[2] = q[0];
	nb[3] = q[1];
	nb[4] = q[0];
	nb[5] = q[0];
	nb[6] = q[0];
	nb[7] = q[0];
	nb[8] = q[0];
	nb[9] = q[1];
	nb[10] = q[1];
	nb[11] = q[0];
	nb[12] = q[1];
	nb[13] = q[0];
	nb[14] = q[1];
	res[0] = q[1];
	res[1] = q[0];
	// Leaf function
	_computeModule(0, 4, 44, 23, 0, 4, 0);
	acquire(4, anc, 15, nb);
	Recompute (res, 0, anc, 4, 44, 23){
		Toffoli( anc[2], anc[0], anc[1] );
		Toffoli( q[1], anc[2], anc[0] );
		Toffoli( anc[2], q[0], anc[3] );
		Toffoli( anc[2], anc[3], q[1] );
		Toffoli( anc[2], anc[1], q[0] );
		Toffoli( anc[2], anc[0], q[1] );
		CNOT( q[1], anc[3] );
		CNOT( anc[2], anc[3] );
		Toffoli( anc[1], q[0], anc[2] );
		CNOT( anc[1], anc[0] );
		CNOT( anc[0], anc[2] );
		Toffoli( anc[2], anc[0], anc[1] );
		Toffoli( anc[2], anc[1], anc[0] );
		CNOT( q[0], anc[2] );
		CNOT( anc[3], q[0] );
		Toffoli( anc[2], anc[1], anc[3] );
		CNOT( anc[1], q[0] );
		CNOT( anc[0], q[0] );
		CNOT( q[0], q[1] );
		CNOT( q[1], anc[1] );
		Toffoli( anc[1], q[0], anc[3] );
	}
	Restore {
		CNOT( anc[2], res[0] );
		CNOT( anc[3], res[1] );
	}
	Unrecompute {
		Toffoli( anc[1], q[0], anc[3] );
		CNOT( q[1], anc[1] );
		CNOT( q[0], q[1] );
		CNOT( anc[0], q[0] );
		CNOT( anc[1], q[0] );
		Toffoli( anc[2], anc[1], anc[3] );
		CNOT( anc[3], q[0] );
		CNOT( q[0], anc[2] );
		Toffoli( anc[2], anc[1], anc[0] );
		Toffoli( anc[2], anc[0], anc[1] );
		CNOT( anc[0], anc[2] );
		CNOT( anc[1], anc[0] );
		Toffoli( anc[1], q[0], anc[2] );
		CNOT( anc[2], anc[3] );
		CNOT( q[1], anc[3] );
		Toffoli( anc[2], anc[0], q[1] );
		Toffoli( anc[2], anc[1], q[0] );
		Toffoli( anc[2], anc[3], q[1] );
		Toffoli( anc[2], q[0], anc[3] );
		Toffoli( q[1], anc[2], anc[0] );
		Toffoli( anc[2], anc[0], anc[1] );
	} Refree(anc, 4) {}
}
// Function 17 with degree 0
// nq: 2, na: 3, ng: 15
void func17(qbit **q, int n) {
printf("func17\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[11]; // interacting bits
	qbit *res[1];
	nb[0] = q[0];
	nb[1] = q[0];
	nb[2] = q[0];
	nb[3] = q[0];
	nb[4] = q[1];
	nb[5] = q[0];
	nb[6] = q[1];
	nb[7] = q[1];
	nb[8] = q[0];
	nb[9] = q[1];
	nb[10] = q[0];
	res[0] = q[1];
	// Leaf function
	Compute (0, 3, 31, 16, 0, 4, 0) {
		acquire(3, anc, 11, nb);
		Toffoli( q[0], anc[1], anc[0] );
		CNOT( anc[1], q[0] );
		CNOT( anc[1], anc[2] );
		CNOT( anc[0], q[0] );
		Toffoli( anc[2], q[0], q[1] );
		CNOT( anc[1], anc[2] );
		CNOT( anc[2], anc[1] );
		CNOT( anc[2], q[0] );
		CNOT( anc[2], anc[0] );
		CNOT( q[1], anc[0] );
		Toffoli( anc[2], anc[0], anc[1] );
		CNOT( anc[2], anc[1] );
		Toffoli( q[1], anc[0], q[0] );
		CNOT( anc[2], anc[0] );
		Toffoli( q[1], anc[1], q[0] );
	}
	Store {
		CNOT( anc[0], res[0] );
	}
	Uncompute(res, 0, anc, 3, 31, 16){
		Toffoli( q[1], anc[1], q[0] );
		CNOT( anc[2], anc[0] );
		Toffoli( q[1], anc[0], q[0] );
		CNOT( anc[2], anc[1] );
		Toffoli( anc[2], anc[0], anc[1] );
		CNOT( q[1], anc[0] );
		CNOT( anc[2], anc[0] );
		CNOT( anc[2], q[0] );
		CNOT( anc[2], anc[1] );
		CNOT( anc[1], anc[2] );
		Toffoli( anc[2], q[0], q[1] );
		CNOT( anc[0], q[0] );
		CNOT( anc[1], anc[2] );
		CNOT( anc[1], q[0] );
		Toffoli( q[0], anc[1], anc[0] );
	} Free(anc, 3) {}
}
// Function 17 with degree 0
// nq: 2, na: 3, ng: 15
void func17R(qbit **q, int n) {
printf("func17R\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[11]; // interacting bits
	qbit *res[1];
	nb[0] = q[0];
	nb[1] = q[0];
	nb[2] = q[0];
	nb[3] = q[0];
	nb[4] = q[1];
	nb[5] = q[0];
	nb[6] = q[1];
	nb[7] = q[1];
	nb[8] = q[0];
	nb[9] = q[1];
	nb[10] = q[0];
	res[0] = q[1];
	// Leaf function
	_computeModule(0, 3, 31, 16, 0, 4, 0);
	acquire(3, anc, 11, nb);
	Recompute (res, 0, anc, 3, 31, 16){
		Toffoli( q[1], anc[1], q[0] );
		CNOT( anc[2], anc[0] );
		Toffoli( q[1], anc[0], q[0] );
		CNOT( anc[2], anc[1] );
		Toffoli( anc[2], anc[0], anc[1] );
		CNOT( q[1], anc[0] );
		CNOT( anc[2], anc[0] );
		CNOT( anc[2], q[0] );
		CNOT( anc[2], anc[1] );
		CNOT( anc[1], anc[2] );
		Toffoli( anc[2], q[0], q[1] );
		CNOT( anc[0], q[0] );
		CNOT( anc[1], anc[2] );
		CNOT( anc[1], q[0] );
		Toffoli( q[0], anc[1], anc[0] );
	}
	Restore {
		CNOT( anc[0], res[0] );
	}
	Unrecompute {
		Toffoli( q[0], anc[1], anc[0] );
		CNOT( anc[1], q[0] );
		CNOT( anc[1], anc[2] );
		CNOT( anc[0], q[0] );
		Toffoli( anc[2], q[0], q[1] );
		CNOT( anc[1], anc[2] );
		CNOT( anc[2], anc[1] );
		CNOT( anc[2], q[0] );
		CNOT( anc[2], anc[0] );
		CNOT( q[1], anc[0] );
		Toffoli( anc[2], anc[0], anc[1] );
		CNOT( anc[2], anc[1] );
		Toffoli( q[1], anc[0], q[0] );
		CNOT( anc[2], anc[0] );
		Toffoli( q[1], anc[1], q[0] );
	} Refree(anc, 3) {}
}
// Function 16 with degree 0
// nq: 2, na: 1, ng: 16
void func16(qbit **q, int n) {
printf("func16\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[27]; // interacting bits
	qbit *res[2];
	nb[0] = q[1];
	nb[1] = q[0];
	nb[2] = q[1];
	nb[3] = q[0];
	nb[4] = q[0];
	nb[5] = q[1];
	nb[6] = q[1];
	nb[7] = q[0];
	nb[8] = q[1];
	nb[9] = q[0];
	nb[10] = q[1];
	nb[11] = q[0];
	nb[12] = q[1];
	nb[13] = q[1];
	nb[14] = q[0];
	nb[15] = q[0];
	nb[16] = q[1];
	nb[17] = q[1];
	nb[18] = q[0];
	nb[19] = q[1];
	nb[20] = q[0];
	nb[21] = q[0];
	nb[22] = q[0];
	nb[23] = q[1];
	nb[24] = q[0];
	nb[25] = q[1];
	nb[26] = q[0];
	res[0] = q[1];
	res[1] = q[0];
	// Leaf function
	Compute (0, 1, 34, 18, 0, 4, 0) {
		acquire(1, anc, 27, nb);
		Toffoli( q[1], anc[0], q[0] );
		Toffoli( anc[0], q[1], q[0] );
		Toffoli( q[0], q[1], anc[0] );
		CNOT( q[1], q[0] );
		CNOT( anc[0], q[1] );
		CNOT( q[0], q[1] );
		Toffoli( q[0], q[1], anc[0] );
		CNOT( q[1], anc[0] );
		CNOT( q[0], anc[0] );
		Toffoli( anc[0], q[0], q[1] );
		Toffoli( anc[0], q[1], q[0] );
		Toffoli( anc[0], q[1], q[0] );
		CNOT( anc[0], q[0] );
		Toffoli( q[0], q[1], anc[0] );
		Toffoli( q[0], anc[0], q[1] );
		CNOT( q[0], anc[0] );
	}
	Store {
		CNOT( anc[0], res[0] );
		CNOT( anc[0], res[1] );
	}
	Uncompute(res, 0, anc, 1, 34, 18){
		CNOT( q[0], anc[0] );
		Toffoli( q[0], anc[0], q[1] );
		Toffoli( q[0], q[1], anc[0] );
		CNOT( anc[0], q[0] );
		Toffoli( anc[0], q[1], q[0] );
		Toffoli( anc[0], q[1], q[0] );
		Toffoli( anc[0], q[0], q[1] );
		CNOT( q[0], anc[0] );
		CNOT( q[1], anc[0] );
		Toffoli( q[0], q[1], anc[0] );
		CNOT( q[0], q[1] );
		CNOT( anc[0], q[1] );
		CNOT( q[1], q[0] );
		Toffoli( q[0], q[1], anc[0] );
		Toffoli( anc[0], q[1], q[0] );
		Toffoli( q[1], anc[0], q[0] );
	} Free(anc, 1) {}
}
// Function 16 with degree 0
// nq: 2, na: 1, ng: 16
void func16R(qbit **q, int n) {
printf("func16R\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[27]; // interacting bits
	qbit *res[2];
	nb[0] = q[1];
	nb[1] = q[0];
	nb[2] = q[1];
	nb[3] = q[0];
	nb[4] = q[0];
	nb[5] = q[1];
	nb[6] = q[1];
	nb[7] = q[0];
	nb[8] = q[1];
	nb[9] = q[0];
	nb[10] = q[1];
	nb[11] = q[0];
	nb[12] = q[1];
	nb[13] = q[1];
	nb[14] = q[0];
	nb[15] = q[0];
	nb[16] = q[1];
	nb[17] = q[1];
	nb[18] = q[0];
	nb[19] = q[1];
	nb[20] = q[0];
	nb[21] = q[0];
	nb[22] = q[0];
	nb[23] = q[1];
	nb[24] = q[0];
	nb[25] = q[1];
	nb[26] = q[0];
	res[0] = q[1];
	res[1] = q[0];
	// Leaf function
	_computeModule(0, 1, 34, 18, 0, 4, 0);
	acquire(1, anc, 27, nb);
	Recompute (res, 0, anc, 1, 34, 18){
		CNOT( q[0], anc[0] );
		Toffoli( q[0], anc[0], q[1] );
		Toffoli( q[0], q[1], anc[0] );
		CNOT( anc[0], q[0] );
		Toffoli( anc[0], q[1], q[0] );
		Toffoli( anc[0], q[1], q[0] );
		Toffoli( anc[0], q[0], q[1] );
		CNOT( q[0], anc[0] );
		CNOT( q[1], anc[0] );
		Toffoli( q[0], q[1], anc[0] );
		CNOT( q[0], q[1] );
		CNOT( anc[0], q[1] );
		CNOT( q[1], q[0] );
		Toffoli( q[0], q[1], anc[0] );
		Toffoli( anc[0], q[1], q[0] );
		Toffoli( q[1], anc[0], q[0] );
	}
	Restore {
		CNOT( anc[0], res[0] );
		CNOT( anc[0], res[1] );
	}
	Unrecompute {
		Toffoli( q[1], anc[0], q[0] );
		Toffoli( anc[0], q[1], q[0] );
		Toffoli( q[0], q[1], anc[0] );
		CNOT( q[1], q[0] );
		CNOT( anc[0], q[1] );
		CNOT( q[0], q[1] );
		Toffoli( q[0], q[1], anc[0] );
		CNOT( q[1], anc[0] );
		CNOT( q[0], anc[0] );
		Toffoli( anc[0], q[0], q[1] );
		Toffoli( anc[0], q[1], q[0] );
		Toffoli( anc[0], q[1], q[0] );
		CNOT( anc[0], q[0] );
		Toffoli( q[0], q[1], anc[0] );
		Toffoli( q[0], anc[0], q[1] );
		CNOT( q[0], anc[0] );
	} Refree(anc, 1) {}
}
// Function 15 with degree 0
// nq: 2, na: 6, ng: 6
void func15(qbit **q, int n) {
printf("func15\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[2]; // interacting bits
	qbit *res[2];
	nb[0] = q[1];
	nb[1] = q[0];
	res[0] = q[0];
	res[1] = q[1];
	// Leaf function
	Compute (0, 6, 14, 8, 0, 4, 0) {
		acquire(6, anc, 2, nb);
		Toffoli( anc[3], anc[5], anc[1] );
		Toffoli( anc[1], anc[0], anc[4] );
		Toffoli( q[1], anc[2], anc[0] );
		Toffoli( anc[1], anc[3], anc[0] );
		CNOT( anc[5], anc[3] );
		CNOT( anc[5], q[0] );
	}
	Store {
		CNOT( anc[2], res[0] );
		CNOT( anc[0], res[1] );
	}
	Uncompute(res, 0, anc, 6, 14, 8){
		CNOT( anc[5], q[0] );
		CNOT( anc[5], anc[3] );
		Toffoli( anc[1], anc[3], anc[0] );
		Toffoli( q[1], anc[2], anc[0] );
		Toffoli( anc[1], anc[0], anc[4] );
		Toffoli( anc[3], anc[5], anc[1] );
	} Free(anc, 6) {}
}
// Function 15 with degree 0
// nq: 2, na: 6, ng: 6
void func15R(qbit **q, int n) {
printf("func15R\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[2]; // interacting bits
	qbit *res[2];
	nb[0] = q[1];
	nb[1] = q[0];
	res[0] = q[0];
	res[1] = q[1];
	// Leaf function
	_computeModule(0, 6, 14, 8, 0, 4, 0);
	acquire(6, anc, 2, nb);
	Recompute (res, 0, anc, 6, 14, 8){
		CNOT( anc[5], q[0] );
		CNOT( anc[5], anc[3] );
		Toffoli( anc[1], anc[3], anc[0] );
		Toffoli( q[1], anc[2], anc[0] );
		Toffoli( anc[1], anc[0], anc[4] );
		Toffoli( anc[3], anc[5], anc[1] );
	}
	Restore {
		CNOT( anc[2], res[0] );
		CNOT( anc[0], res[1] );
	}
	Unrecompute {
		Toffoli( anc[3], anc[5], anc[1] );
		Toffoli( anc[1], anc[0], anc[4] );
		Toffoli( q[1], anc[2], anc[0] );
		Toffoli( anc[1], anc[3], anc[0] );
		CNOT( anc[5], anc[3] );
		CNOT( anc[5], q[0] );
	} Refree(anc, 6) {}
}
// Function 14 with degree 0
// nq: 4, na: 16, ng: 12
void func14(qbit **q, int n) {
printf("func14\n");
fflush(stderr);
	qbit *anc[16]; // ancilla
	qbit *nb[8]; // interacting bits
	qbit *res[3];
	nb[0] = q[3];
	nb[1] = q[3];
	nb[2] = q[1];
	nb[3] = q[0];
	nb[4] = q[1];
	nb[5] = q[2];
	nb[6] = q[2];
	nb[7] = q[2];
	res[0] = q[0];
	res[1] = q[1];
	res[2] = q[2];
	// Leaf function
	Compute (0, 16, 27, 15, 0, 3, 0) {
		acquire(16, anc, 8, nb);
		Toffoli( q[3], anc[4], anc[3] );
		CNOT( anc[5], anc[2] );
		CNOT( anc[6], anc[11] );
		CNOT( q[3], q[1] );
		CNOT( anc[13], q[0] );
		Toffoli( q[1], anc[8], anc[6] );
		CNOT( anc[15], q[2] );
		Toffoli( anc[15], anc[14], anc[7] );
		CNOT( q[2], anc[11] );
		Toffoli( anc[7], q[2], anc[15] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[9], anc[14], anc[0] );
	}
	Store {
		CNOT( anc[11], res[0] );
		CNOT( anc[14], res[1] );
		CNOT( anc[6], res[2] );
	}
	Uncompute(res, 0, anc, 16, 27, 15){
		Toffoli( anc[9], anc[14], anc[0] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[7], q[2], anc[15] );
		CNOT( q[2], anc[11] );
		Toffoli( anc[15], anc[14], anc[7] );
		CNOT( anc[15], q[2] );
		Toffoli( q[1], anc[8], anc[6] );
		CNOT( anc[13], q[0] );
		CNOT( q[3], q[1] );
		CNOT( anc[6], anc[11] );
		CNOT( anc[5], anc[2] );
		Toffoli( q[3], anc[4], anc[3] );
	} Free(anc, 16) {}
}
// Function 14 with degree 0
// nq: 4, na: 16, ng: 12
void func14R(qbit **q, int n) {
printf("func14R\n");
fflush(stderr);
	qbit *anc[16]; // ancilla
	qbit *nb[8]; // interacting bits
	qbit *res[3];
	nb[0] = q[3];
	nb[1] = q[3];
	nb[2] = q[1];
	nb[3] = q[0];
	nb[4] = q[1];
	nb[5] = q[2];
	nb[6] = q[2];
	nb[7] = q[2];
	res[0] = q[0];
	res[1] = q[1];
	res[2] = q[2];
	// Leaf function
	_computeModule(0, 16, 27, 15, 0, 3, 0);
	acquire(16, anc, 8, nb);
	Recompute (res, 0, anc, 16, 27, 15){
		Toffoli( anc[9], anc[14], anc[0] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[7], q[2], anc[15] );
		CNOT( q[2], anc[11] );
		Toffoli( anc[15], anc[14], anc[7] );
		CNOT( anc[15], q[2] );
		Toffoli( q[1], anc[8], anc[6] );
		CNOT( anc[13], q[0] );
		CNOT( q[3], q[1] );
		CNOT( anc[6], anc[11] );
		CNOT( anc[5], anc[2] );
		Toffoli( q[3], anc[4], anc[3] );
	}
	Restore {
		CNOT( anc[11], res[0] );
		CNOT( anc[14], res[1] );
		CNOT( anc[6], res[2] );
	}
	Unrecompute {
		Toffoli( q[3], anc[4], anc[3] );
		CNOT( anc[5], anc[2] );
		CNOT( anc[6], anc[11] );
		CNOT( q[3], q[1] );
		CNOT( anc[13], q[0] );
		Toffoli( q[1], anc[8], anc[6] );
		CNOT( anc[15], q[2] );
		Toffoli( anc[15], anc[14], anc[7] );
		CNOT( q[2], anc[11] );
		Toffoli( anc[7], q[2], anc[15] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[9], anc[14], anc[0] );
	} Refree(anc, 16) {}
}
// Function 13 with degree 0
// nq: 4, na: 1, ng: 13
void func13(qbit **q, int n) {
printf("func13\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[26]; // interacting bits
	qbit *res[4];
	nb[0] = q[0];
	nb[1] = q[1];
	nb[2] = q[1];
	nb[3] = q[2];
	nb[4] = q[3];
	nb[5] = q[2];
	nb[6] = q[1];
	nb[7] = q[0];
	nb[8] = q[1];
	nb[9] = q[0];
	nb[10] = q[3];
	nb[11] = q[1];
	nb[12] = q[2];
	nb[13] = q[1];
	nb[14] = q[0];
	nb[15] = q[1];
	nb[16] = q[0];
	nb[17] = q[3];
	nb[18] = q[0];
	nb[19] = q[1];
	nb[20] = q[1];
	nb[21] = q[3];
	nb[22] = q[2];
	nb[23] = q[2];
	nb[24] = q[1];
	nb[25] = q[1];
	res[0] = q[0];
	res[1] = q[1];
	res[2] = q[3];
	res[3] = q[2];
	// Leaf function
	Compute (0, 1, 30, 17, 0, 3, 0) {
		acquire(1, anc, 26, nb);
		Toffoli( q[0], anc[0], q[1] );
		CNOT( anc[0], q[1] );
		CNOT( q[2], q[3] );
		Toffoli( q[2], anc[0], q[1] );
		Toffoli( anc[0], q[0], q[1] );
		Toffoli( q[0], q[3], q[1] );
		Toffoli( q[2], q[1], q[0] );
		Toffoli( q[1], q[0], q[3] );
		CNOT( q[0], q[1] );
		CNOT( anc[0], q[1] );
		Toffoli( q[3], anc[0], q[2] );
		Toffoli( q[2], anc[0], q[1] );
		CNOT( q[1], anc[0] );
	}
	Store {
		CNOT( anc[0], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( q[2], res[2] );
		CNOT( q[3], res[3] );
	}
	Uncompute(res, 0, anc, 1, 30, 17){
		CNOT( q[1], anc[0] );
		Toffoli( q[2], anc[0], q[1] );
		Toffoli( q[3], anc[0], q[2] );
		CNOT( anc[0], q[1] );
		CNOT( q[0], q[1] );
		Toffoli( q[1], q[0], q[3] );
		Toffoli( q[2], q[1], q[0] );
		Toffoli( q[0], q[3], q[1] );
		Toffoli( anc[0], q[0], q[1] );
		Toffoli( q[2], anc[0], q[1] );
		CNOT( q[2], q[3] );
		CNOT( anc[0], q[1] );
		Toffoli( q[0], anc[0], q[1] );
	} Free(anc, 1) {}
}
// Function 13 with degree 0
// nq: 4, na: 1, ng: 13
void func13R(qbit **q, int n) {
printf("func13R\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[26]; // interacting bits
	qbit *res[4];
	nb[0] = q[0];
	nb[1] = q[1];
	nb[2] = q[1];
	nb[3] = q[2];
	nb[4] = q[3];
	nb[5] = q[2];
	nb[6] = q[1];
	nb[7] = q[0];
	nb[8] = q[1];
	nb[9] = q[0];
	nb[10] = q[3];
	nb[11] = q[1];
	nb[12] = q[2];
	nb[13] = q[1];
	nb[14] = q[0];
	nb[15] = q[1];
	nb[16] = q[0];
	nb[17] = q[3];
	nb[18] = q[0];
	nb[19] = q[1];
	nb[20] = q[1];
	nb[21] = q[3];
	nb[22] = q[2];
	nb[23] = q[2];
	nb[24] = q[1];
	nb[25] = q[1];
	res[0] = q[0];
	res[1] = q[1];
	res[2] = q[3];
	res[3] = q[2];
	// Leaf function
	_computeModule(0, 1, 30, 17, 0, 3, 0);
	acquire(1, anc, 26, nb);
	Recompute (res, 0, anc, 1, 30, 17){
		CNOT( q[1], anc[0] );
		Toffoli( q[2], anc[0], q[1] );
		Toffoli( q[3], anc[0], q[2] );
		CNOT( anc[0], q[1] );
		CNOT( q[0], q[1] );
		Toffoli( q[1], q[0], q[3] );
		Toffoli( q[2], q[1], q[0] );
		Toffoli( q[0], q[3], q[1] );
		Toffoli( anc[0], q[0], q[1] );
		Toffoli( q[2], anc[0], q[1] );
		CNOT( q[2], q[3] );
		CNOT( anc[0], q[1] );
		Toffoli( q[0], anc[0], q[1] );
	}
	Restore {
		CNOT( anc[0], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( q[2], res[2] );
		CNOT( q[3], res[3] );
	}
	Unrecompute {
		Toffoli( q[0], anc[0], q[1] );
		CNOT( anc[0], q[1] );
		CNOT( q[2], q[3] );
		Toffoli( q[2], anc[0], q[1] );
		Toffoli( anc[0], q[0], q[1] );
		Toffoli( q[0], q[3], q[1] );
		Toffoli( q[2], q[1], q[0] );
		Toffoli( q[1], q[0], q[3] );
		CNOT( q[0], q[1] );
		CNOT( anc[0], q[1] );
		Toffoli( q[3], anc[0], q[2] );
		Toffoli( q[2], anc[0], q[1] );
		CNOT( q[1], anc[0] );
	} Refree(anc, 1) {}
}
// Function 12 with degree 0
// nq: 4, na: 1, ng: 14
void func12(qbit **q, int n) {
printf("func12\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[24]; // interacting bits
	qbit *res[4];
	nb[0] = q[2];
	nb[1] = q[0];
	nb[2] = q[2];
	nb[3] = q[0];
	nb[4] = q[3];
	nb[5] = q[0];
	nb[6] = q[3];
	nb[7] = q[0];
	nb[8] = q[3];
	nb[9] = q[0];
	nb[10] = q[3];
	nb[11] = q[3];
	nb[12] = q[3];
	nb[13] = q[0];
	nb[14] = q[0];
	nb[15] = q[3];
	nb[16] = q[1];
	nb[17] = q[2];
	nb[18] = q[0];
	nb[19] = q[3];
	nb[20] = q[1];
	nb[21] = q[2];
	nb[22] = q[1];
	nb[23] = q[1];
	res[0] = q[0];
	res[1] = q[3];
	res[2] = q[1];
	res[3] = q[2];
	// Leaf function
	Compute (0, 1, 32, 18, 0, 3, 0) {
		acquire(1, anc, 24, nb);
		CNOT( q[2], anc[0] );
		Toffoli( q[0], anc[0], q[2] );
		CNOT( q[0], anc[0] );
		Toffoli( anc[0], q[3], q[0] );
		CNOT( q[3], anc[0] );
		CNOT( q[0], q[3] );
		Toffoli( q[0], q[3], anc[0] );
		CNOT( q[3], anc[0] );
		CNOT( q[3], q[0] );
		Toffoli( q[0], q[3], anc[0] );
		Toffoli( q[1], q[2], q[0] );
		CNOT( q[3], q[1] );
		Toffoli( q[2], q[1], anc[0] );
		CNOT( anc[0], q[1] );
	}
	Store {
		CNOT( q[3], res[0] );
		CNOT( q[0], res[1] );
		CNOT( anc[0], res[2] );
		CNOT( anc[0], res[3] );
	}
	Uncompute(res, 0, anc, 1, 32, 18){
		CNOT( anc[0], q[1] );
		Toffoli( q[2], q[1], anc[0] );
		CNOT( q[3], q[1] );
		Toffoli( q[1], q[2], q[0] );
		Toffoli( q[0], q[3], anc[0] );
		CNOT( q[3], q[0] );
		CNOT( q[3], anc[0] );
		Toffoli( q[0], q[3], anc[0] );
		CNOT( q[0], q[3] );
		CNOT( q[3], anc[0] );
		Toffoli( anc[0], q[3], q[0] );
		CNOT( q[0], anc[0] );
		Toffoli( q[0], anc[0], q[2] );
		CNOT( q[2], anc[0] );
	} Free(anc, 1) {}
}
// Function 12 with degree 0
// nq: 4, na: 1, ng: 14
void func12R(qbit **q, int n) {
printf("func12R\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[24]; // interacting bits
	qbit *res[4];
	nb[0] = q[2];
	nb[1] = q[0];
	nb[2] = q[2];
	nb[3] = q[0];
	nb[4] = q[3];
	nb[5] = q[0];
	nb[6] = q[3];
	nb[7] = q[0];
	nb[8] = q[3];
	nb[9] = q[0];
	nb[10] = q[3];
	nb[11] = q[3];
	nb[12] = q[3];
	nb[13] = q[0];
	nb[14] = q[0];
	nb[15] = q[3];
	nb[16] = q[1];
	nb[17] = q[2];
	nb[18] = q[0];
	nb[19] = q[3];
	nb[20] = q[1];
	nb[21] = q[2];
	nb[22] = q[1];
	nb[23] = q[1];
	res[0] = q[0];
	res[1] = q[3];
	res[2] = q[1];
	res[3] = q[2];
	// Leaf function
	_computeModule(0, 1, 32, 18, 0, 3, 0);
	acquire(1, anc, 24, nb);
	Recompute (res, 0, anc, 1, 32, 18){
		CNOT( anc[0], q[1] );
		Toffoli( q[2], q[1], anc[0] );
		CNOT( q[3], q[1] );
		Toffoli( q[1], q[2], q[0] );
		Toffoli( q[0], q[3], anc[0] );
		CNOT( q[3], q[0] );
		CNOT( q[3], anc[0] );
		Toffoli( q[0], q[3], anc[0] );
		CNOT( q[0], q[3] );
		CNOT( q[3], anc[0] );
		Toffoli( anc[0], q[3], q[0] );
		CNOT( q[0], anc[0] );
		Toffoli( q[0], anc[0], q[2] );
		CNOT( q[2], anc[0] );
	}
	Restore {
		CNOT( q[3], res[0] );
		CNOT( q[0], res[1] );
		CNOT( anc[0], res[2] );
		CNOT( anc[0], res[3] );
	}
	Unrecompute {
		CNOT( q[2], anc[0] );
		Toffoli( q[0], anc[0], q[2] );
		CNOT( q[0], anc[0] );
		Toffoli( anc[0], q[3], q[0] );
		CNOT( q[3], anc[0] );
		CNOT( q[0], q[3] );
		Toffoli( q[0], q[3], anc[0] );
		CNOT( q[3], anc[0] );
		CNOT( q[3], q[0] );
		Toffoli( q[0], q[3], anc[0] );
		Toffoli( q[1], q[2], q[0] );
		CNOT( q[3], q[1] );
		Toffoli( q[2], q[1], anc[0] );
		CNOT( anc[0], q[1] );
	} Refree(anc, 1) {}
}
// Function 11 with degree 0
// nq: 7, na: 4, ng: 3
void func11(qbit **q, int n) {
printf("func11\n");
fflush(stderr);
	qbit *anc[4]; // ancilla
	qbit *nb[6]; // interacting bits
	qbit *res[2];
	nb[0] = q[4];
	nb[1] = q[0];
	nb[2] = q[5];
	nb[3] = q[6];
	nb[4] = q[6];
	nb[5] = q[5];
	res[0] = q[4];
	res[1] = q[2];
	// Leaf function
	Compute (0, 4, 8, 5, 0, 1, 0) {
		acquire(4, anc, 6, nb);
		Toffoli( anc[1], q[4], q[0] );
		Toffoli( q[5], q[6], anc[2] );
		CNOT( q[6], q[5] );
	}
	Store {
		CNOT( q[0], res[0] );
		CNOT( q[3], res[1] );
	}
	Uncompute(res, 0, anc, 4, 8, 5){
		CNOT( q[6], q[5] );
		Toffoli( q[5], q[6], anc[2] );
		Toffoli( anc[1], q[4], q[0] );
	} Free(anc, 4) {}
}
// Function 11 with degree 0
// nq: 7, na: 4, ng: 3
void func11R(qbit **q, int n) {
printf("func11R\n");
fflush(stderr);
	qbit *anc[4]; // ancilla
	qbit *nb[6]; // interacting bits
	qbit *res[2];
	nb[0] = q[4];
	nb[1] = q[0];
	nb[2] = q[5];
	nb[3] = q[6];
	nb[4] = q[6];
	nb[5] = q[5];
	res[0] = q[4];
	res[1] = q[2];
	// Leaf function
	_computeModule(0, 4, 8, 5, 0, 1, 0);
	acquire(4, anc, 6, nb);
	Recompute (res, 0, anc, 4, 8, 5){
		CNOT( q[6], q[5] );
		Toffoli( q[5], q[6], anc[2] );
		Toffoli( anc[1], q[4], q[0] );
	}
	Restore {
		CNOT( q[0], res[0] );
		CNOT( q[3], res[1] );
	}
	Unrecompute {
		Toffoli( anc[1], q[4], q[0] );
		Toffoli( q[5], q[6], anc[2] );
		CNOT( q[6], q[5] );
	} Refree(anc, 4) {}
}
// Function 10 with degree 0
// nq: 6, na: 11, ng: 3
void func10(qbit **q, int n) {
printf("func10\n");
fflush(stderr);
	qbit *anc[11]; // ancilla
	qbit *nb[2]; // interacting bits
	qbit *res[2];
	nb[0] = q[2];
	nb[1] = q[2];
	res[0] = q[2];
	res[1] = q[4];
	// Leaf function
	Compute (0, 11, 8, 5, 0, 2, 0) {
		acquire(11, anc, 2, nb);
		CNOT( anc[2], anc[0] );
		Toffoli( anc[8], q[2], anc[5] );
		Toffoli( anc[9], anc[4], q[2] );
	}
	Store {
		CNOT( anc[10], res[0] );
		CNOT( anc[0], res[1] );
	}
	Uncompute(res, 0, anc, 11, 8, 5){
		Toffoli( anc[9], anc[4], q[2] );
		Toffoli( anc[8], q[2], anc[5] );
		CNOT( anc[2], anc[0] );
	} Free(anc, 11) {}
}
// Function 10 with degree 0
// nq: 6, na: 11, ng: 3
void func10R(qbit **q, int n) {
printf("func10R\n");
fflush(stderr);
	qbit *anc[11]; // ancilla
	qbit *nb[2]; // interacting bits
	qbit *res[2];
	nb[0] = q[2];
	nb[1] = q[2];
	res[0] = q[2];
	res[1] = q[4];
	// Leaf function
	_computeModule(0, 11, 8, 5, 0, 2, 0);
	acquire(11, anc, 2, nb);
	Recompute (res, 0, anc, 11, 8, 5){
		Toffoli( anc[9], anc[4], q[2] );
		Toffoli( anc[8], q[2], anc[5] );
		CNOT( anc[2], anc[0] );
	}
	Restore {
		CNOT( anc[10], res[0] );
		CNOT( anc[0], res[1] );
	}
	Unrecompute {
		CNOT( anc[2], anc[0] );
		Toffoli( anc[8], q[2], anc[5] );
		Toffoli( anc[9], anc[4], q[2] );
	} Refree(anc, 11) {}
}
// Function 9 with degree 0
// nq: 6, na: 15, ng: 10
void func9(qbit **q, int n) {
printf("func9\n");
fflush(stderr);
	qbit *anc[15]; // ancilla
	qbit *nb[5]; // interacting bits
	qbit *res[3];
	nb[0] = q[3];
	nb[1] = q[4];
	nb[2] = q[2];
	nb[3] = q[2];
	nb[4] = q[2];
	res[0] = q[3];
	res[1] = q[2];
	res[2] = q[5];
	// Leaf function
	Compute (0, 15, 23, 13, 0, 2, 0) {
		acquire(15, anc, 5, nb);
		Toffoli( q[3], anc[2], anc[13] );
		Toffoli( q[4], anc[13], anc[14] );
		CNOT( q[2], anc[7] );
		Toffoli( anc[13], q[2], anc[3] );
		Toffoli( anc[8], q[2], anc[6] );
		Toffoli( anc[3], anc[2], anc[10] );
		CNOT( anc[14], anc[9] );
		CNOT( anc[10], anc[5] );
		CNOT( anc[12], anc[14] );
		Toffoli( anc[9], anc[8], anc[0] );
	}
	Store {
		CNOT( q[0], res[0] );
		CNOT( anc[4], res[1] );
		CNOT( anc[1], res[2] );
	}
	Uncompute(res, 0, anc, 15, 23, 13){
		Toffoli( anc[9], anc[8], anc[0] );
		CNOT( anc[12], anc[14] );
		CNOT( anc[10], anc[5] );
		CNOT( anc[14], anc[9] );
		Toffoli( anc[3], anc[2], anc[10] );
		Toffoli( anc[8], q[2], anc[6] );
		Toffoli( anc[13], q[2], anc[3] );
		CNOT( q[2], anc[7] );
		Toffoli( q[4], anc[13], anc[14] );
		Toffoli( q[3], anc[2], anc[13] );
	} Free(anc, 15) {}
}
// Function 9 with degree 0
// nq: 6, na: 15, ng: 10
void func9R(qbit **q, int n) {
printf("func9R\n");
fflush(stderr);
	qbit *anc[15]; // ancilla
	qbit *nb[5]; // interacting bits
	qbit *res[3];
	nb[0] = q[3];
	nb[1] = q[4];
	nb[2] = q[2];
	nb[3] = q[2];
	nb[4] = q[2];
	res[0] = q[3];
	res[1] = q[2];
	res[2] = q[5];
	// Leaf function
	_computeModule(0, 15, 23, 13, 0, 2, 0);
	acquire(15, anc, 5, nb);
	Recompute (res, 0, anc, 15, 23, 13){
		Toffoli( anc[9], anc[8], anc[0] );
		CNOT( anc[12], anc[14] );
		CNOT( anc[10], anc[5] );
		CNOT( anc[14], anc[9] );
		Toffoli( anc[3], anc[2], anc[10] );
		Toffoli( anc[8], q[2], anc[6] );
		Toffoli( anc[13], q[2], anc[3] );
		CNOT( q[2], anc[7] );
		Toffoli( q[4], anc[13], anc[14] );
		Toffoli( q[3], anc[2], anc[13] );
	}
	Restore {
		CNOT( q[0], res[0] );
		CNOT( anc[4], res[1] );
		CNOT( anc[1], res[2] );
	}
	Unrecompute {
		Toffoli( q[3], anc[2], anc[13] );
		Toffoli( q[4], anc[13], anc[14] );
		CNOT( q[2], anc[7] );
		Toffoli( anc[13], q[2], anc[3] );
		Toffoli( anc[8], q[2], anc[6] );
		Toffoli( anc[3], anc[2], anc[10] );
		CNOT( anc[14], anc[9] );
		CNOT( anc[10], anc[5] );
		CNOT( anc[12], anc[14] );
		Toffoli( anc[9], anc[8], anc[0] );
	} Refree(anc, 15) {}
}
// Function 8 with degree 0
// nq: 1, na: 10, ng: 23
void func8(qbit **q, int n) {
printf("func8\n");
fflush(stderr);
	qbit *anc[10]; // ancilla
	qbit *nb[6]; // interacting bits
	qbit *res[1];
	nb[0] = q[0];
	nb[1] = q[0];
	nb[2] = q[0];
	nb[3] = q[0];
	nb[4] = q[0];
	nb[5] = q[0];
	res[0] = q[0];
	// Leaf function
	Compute (0, 10, 47, 24, 0, 4, 0) {
		acquire(10, anc, 6, nb);
		Toffoli( anc[5], anc[0], q[0] );
		CNOT( anc[3], anc[2] );
		CNOT( anc[8], anc[7] );
		Toffoli( anc[2], anc[1], anc[5] );
		CNOT( q[0], anc[4] );
		CNOT( q[0], anc[9] );
		CNOT( anc[3], anc[9] );
		CNOT( anc[1], anc[4] );
		Toffoli( q[0], anc[5], anc[0] );
		CNOT( anc[3], anc[2] );
		Toffoli( anc[2], anc[6], anc[9] );
		CNOT( anc[4], anc[1] );
		CNOT( anc[5], anc[3] );
		Toffoli( anc[7], anc[5], anc[0] );
		CNOT( anc[7], anc[5] );
		Toffoli( anc[0], anc[8], anc[3] );
		Toffoli( q[0], anc[7], anc[6] );
		Toffoli( q[0], anc[3], anc[7] );
		Toffoli( anc[7], anc[6], anc[8] );
		CNOT( anc[1], anc[6] );
		CNOT( anc[8], anc[2] );
		CNOT( anc[6], anc[8] );
		CNOT( anc[6], anc[0] );
	}
	Store {
		CNOT( anc[7], res[0] );
	}
	Uncompute(res, 0, anc, 10, 47, 24){
		CNOT( anc[6], anc[0] );
		CNOT( anc[6], anc[8] );
		CNOT( anc[8], anc[2] );
		CNOT( anc[1], anc[6] );
		Toffoli( anc[7], anc[6], anc[8] );
		Toffoli( q[0], anc[3], anc[7] );
		Toffoli( q[0], anc[7], anc[6] );
		Toffoli( anc[0], anc[8], anc[3] );
		CNOT( anc[7], anc[5] );
		Toffoli( anc[7], anc[5], anc[0] );
		CNOT( anc[5], anc[3] );
		CNOT( anc[4], anc[1] );
		Toffoli( anc[2], anc[6], anc[9] );
		CNOT( anc[3], anc[2] );
		Toffoli( q[0], anc[5], anc[0] );
		CNOT( anc[1], anc[4] );
		CNOT( anc[3], anc[9] );
		CNOT( q[0], anc[9] );
		CNOT( q[0], anc[4] );
		Toffoli( anc[2], anc[1], anc[5] );
		CNOT( anc[8], anc[7] );
		CNOT( anc[3], anc[2] );
		Toffoli( anc[5], anc[0], q[0] );
	} Free(anc, 10) {}
}
// Function 8 with degree 0
// nq: 1, na: 10, ng: 23
void func8R(qbit **q, int n) {
printf("func8R\n");
fflush(stderr);
	qbit *anc[10]; // ancilla
	qbit *nb[6]; // interacting bits
	qbit *res[1];
	nb[0] = q[0];
	nb[1] = q[0];
	nb[2] = q[0];
	nb[3] = q[0];
	nb[4] = q[0];
	nb[5] = q[0];
	res[0] = q[0];
	// Leaf function
	_computeModule(0, 10, 47, 24, 0, 4, 0);
	acquire(10, anc, 6, nb);
	Recompute (res, 0, anc, 10, 47, 24){
		CNOT( anc[6], anc[0] );
		CNOT( anc[6], anc[8] );
		CNOT( anc[8], anc[2] );
		CNOT( anc[1], anc[6] );
		Toffoli( anc[7], anc[6], anc[8] );
		Toffoli( q[0], anc[3], anc[7] );
		Toffoli( q[0], anc[7], anc[6] );
		Toffoli( anc[0], anc[8], anc[3] );
		CNOT( anc[7], anc[5] );
		Toffoli( anc[7], anc[5], anc[0] );
		CNOT( anc[5], anc[3] );
		CNOT( anc[4], anc[1] );
		Toffoli( anc[2], anc[6], anc[9] );
		CNOT( anc[3], anc[2] );
		Toffoli( q[0], anc[5], anc[0] );
		CNOT( anc[1], anc[4] );
		CNOT( anc[3], anc[9] );
		CNOT( q[0], anc[9] );
		CNOT( q[0], anc[4] );
		Toffoli( anc[2], anc[1], anc[5] );
		CNOT( anc[8], anc[7] );
		CNOT( anc[3], anc[2] );
		Toffoli( anc[5], anc[0], q[0] );
	}
	Restore {
		CNOT( anc[7], res[0] );
	}
	Unrecompute {
		Toffoli( anc[5], anc[0], q[0] );
		CNOT( anc[3], anc[2] );
		CNOT( anc[8], anc[7] );
		Toffoli( anc[2], anc[1], anc[5] );
		CNOT( q[0], anc[4] );
		CNOT( q[0], anc[9] );
		CNOT( anc[3], anc[9] );
		CNOT( anc[1], anc[4] );
		Toffoli( q[0], anc[5], anc[0] );
		CNOT( anc[3], anc[2] );
		Toffoli( anc[2], anc[6], anc[9] );
		CNOT( anc[4], anc[1] );
		CNOT( anc[5], anc[3] );
		Toffoli( anc[7], anc[5], anc[0] );
		CNOT( anc[7], anc[5] );
		Toffoli( anc[0], anc[8], anc[3] );
		Toffoli( q[0], anc[7], anc[6] );
		Toffoli( q[0], anc[3], anc[7] );
		Toffoli( anc[7], anc[6], anc[8] );
		CNOT( anc[1], anc[6] );
		CNOT( anc[8], anc[2] );
		CNOT( anc[6], anc[8] );
		CNOT( anc[6], anc[0] );
	} Refree(anc, 10) {}
}
// Function 7 with degree 0
// nq: 1, na: 2, ng: 6
void func7(qbit **q, int n) {
printf("func7\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[5]; // interacting bits
	qbit *res[1];
	nb[0] = q[0];
	nb[1] = q[0];
	nb[2] = q[0];
	nb[3] = q[0];
	nb[4] = q[0];
	res[0] = q[0];
	// Leaf function
	Compute (0, 2, 13, 7, 0, 4, 0) {
		acquire(2, anc, 5, nb);
		CNOT( q[0], anc[1] );
		Toffoli( anc[0], anc[1], q[0] );
		Toffoli( anc[1], anc[0], q[0] );
		CNOT( anc[1], anc[0] );
		Toffoli( anc[1], anc[0], q[0] );
		Toffoli( q[0], anc[0], anc[1] );
	}
	Store {
		CNOT( anc[1], res[0] );
	}
	Uncompute(res, 0, anc, 2, 13, 7){
		Toffoli( q[0], anc[0], anc[1] );
		Toffoli( anc[1], anc[0], q[0] );
		CNOT( anc[1], anc[0] );
		Toffoli( anc[1], anc[0], q[0] );
		Toffoli( anc[0], anc[1], q[0] );
		CNOT( q[0], anc[1] );
	} Free(anc, 2) {}
}
// Function 7 with degree 0
// nq: 1, na: 2, ng: 6
void func7R(qbit **q, int n) {
printf("func7R\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[5]; // interacting bits
	qbit *res[1];
	nb[0] = q[0];
	nb[1] = q[0];
	nb[2] = q[0];
	nb[3] = q[0];
	nb[4] = q[0];
	res[0] = q[0];
	// Leaf function
	_computeModule(0, 2, 13, 7, 0, 4, 0);
	acquire(2, anc, 5, nb);
	Recompute (res, 0, anc, 2, 13, 7){
		Toffoli( q[0], anc[0], anc[1] );
		Toffoli( anc[1], anc[0], q[0] );
		CNOT( anc[1], anc[0] );
		Toffoli( anc[1], anc[0], q[0] );
		Toffoli( anc[0], anc[1], q[0] );
		CNOT( q[0], anc[1] );
	}
	Restore {
		CNOT( anc[1], res[0] );
	}
	Unrecompute {
		CNOT( q[0], anc[1] );
		Toffoli( anc[0], anc[1], q[0] );
		Toffoli( anc[1], anc[0], q[0] );
		CNOT( anc[1], anc[0] );
		Toffoli( anc[1], anc[0], q[0] );
		Toffoli( q[0], anc[0], anc[1] );
	} Refree(anc, 2) {}
}
// Function 6 with degree 0
// nq: 1, na: 14, ng: 2
void func6(qbit **q, int n) {
printf("func6\n");
fflush(stderr);
	qbit *anc[14]; // ancilla
	qbit *nb[0]; // interacting bits
	qbit *res[1];
	res[0] = q[0];
	// Leaf function
	Compute (0, 14, 5, 3, 0, 4, 0) {
		acquire(14, anc, 0, nb);
		Toffoli( anc[2], anc[10], anc[13] );
		Toffoli( anc[9], anc[7], anc[10] );
	}
	Store {
		CNOT( anc[10], res[0] );
	}
	Uncompute(res, 0, anc, 14, 5, 3){
		Toffoli( anc[9], anc[7], anc[10] );
		Toffoli( anc[2], anc[10], anc[13] );
	} Free(anc, 14) {}
}
// Function 6 with degree 0
// nq: 1, na: 14, ng: 2
void func6R(qbit **q, int n) {
printf("func6R\n");
fflush(stderr);
	qbit *anc[14]; // ancilla
	qbit *nb[0]; // interacting bits
	qbit *res[1];
	res[0] = q[0];
	// Leaf function
	_computeModule(0, 14, 5, 3, 0, 4, 0);
	acquire(14, anc, 0, nb);
	Recompute (res, 0, anc, 14, 5, 3){
		Toffoli( anc[9], anc[7], anc[10] );
		Toffoli( anc[2], anc[10], anc[13] );
	}
	Restore {
		CNOT( anc[10], res[0] );
	}
	Unrecompute {
		Toffoli( anc[2], anc[10], anc[13] );
		Toffoli( anc[9], anc[7], anc[10] );
	} Refree(anc, 14) {}
}
// Function 5 with degree 4
// nq: 1, na: 10, ng: 12
void func5(qbit **q, int n) {
printf("func5\n");
fflush(stderr);
	qbit *anc[10]; // ancilla
	qbit *nb[3]; // interacting bits
	qbit *res[1];
	qbit *nq0[2];
	qbit *nq1[2];
	qbit *nq2[2];
	qbit *nq3[2];
	nb[0] = q[0];
	nb[1] = q[0];
	nb[2] = q[0];
	res[0] = q[0];
	// Non-leaf function
	Compute (0, 10, 25, 13, 4, 4, 0){
		acquire(10, anc, 3, nb);
	nq0[0] = anc[1];
	nq0[1] = anc[4];
	nq1[0] = anc[3];
	nq1[1] = anc[9];
	nq2[0] = anc[8];
	nq2[1] = anc[2];
	nq3[0] = anc[6];
	nq3[1] = q[0];
		CNOT( q[0], anc[8] );
		func17(nq2, 2);
		func16(nq1, 2);
		Toffoli( anc[8], anc[0], anc[4] );
		CNOT( anc[0], anc[5] );
		func15(nq0, 2);
		func18(nq3, 2);
		CNOT( q[0], anc[4] );
		CNOT( anc[9], anc[3] );
		Toffoli( anc[3], anc[1], anc[2] );
		CNOT( anc[2], anc[6] );
		CNOT( anc[1], anc[9] );
		Toffoli( anc[3], anc[6], anc[8] );
		Toffoli( anc[0], anc[8], anc[7] );
		Toffoli( anc[1], anc[8], q[0] );
		Toffoli( anc[3], anc[0], anc[5] );
	}
	Store {
		CNOT( anc[0], res[0] );
	}
	Uncompute(res, 0, anc, 10, 25, 13){
		Toffoli( anc[3], anc[0], anc[5] );
		Toffoli( anc[1], anc[8], q[0] );
		Toffoli( anc[0], anc[8], anc[7] );
		Toffoli( anc[3], anc[6], anc[8] );
		CNOT( anc[1], anc[9] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[3], anc[1], anc[2] );
		CNOT( anc[9], anc[3] );
		CNOT( q[0], anc[4] );
		func18R(nq3, 2);
		func15R(nq0, 2);
		CNOT( anc[0], anc[5] );
		Toffoli( anc[8], anc[0], anc[4] );
		func16R(nq1, 2);
		func17R(nq2, 2);
		CNOT( q[0], anc[8] );
	} Free(anc, 10) {}
}
// Function 5 with degree 4
// nq: 1, na: 10, ng: 12
void func5R(qbit **q, int n) {
printf("func5R\n");
fflush(stderr);
	qbit *anc[10]; // ancilla
	qbit *nb[3]; // interacting bits
	qbit *res[1];
	qbit *nq0[2];
	qbit *nq1[2];
	qbit *nq2[2];
	qbit *nq3[2];
	nb[0] = q[0];
	nb[1] = q[0];
	nb[2] = q[0];
	res[0] = q[0];
	// Non-leaf function
	_computeModule(0, 10, 25, 13, 4, 4, 0);
	acquire(10, anc, 3, nb);
	nq0[0] = anc[1];
	nq0[1] = anc[4];
	nq1[0] = anc[3];
	nq1[1] = anc[9];
	nq2[0] = anc[8];
	nq2[1] = anc[2];
	nq3[0] = anc[6];
	nq3[1] = q[0];
	Recompute(res, 0, anc, 10, 25, 13){
		CNOT( q[0], anc[8] );
		func17(nq2, 2);
		func16(nq1, 2);
		Toffoli( anc[8], anc[0], anc[4] );
		CNOT( anc[0], anc[5] );
		func15(nq0, 2);
		func18(nq3, 2);
		CNOT( q[0], anc[4] );
		CNOT( anc[9], anc[3] );
		Toffoli( anc[3], anc[1], anc[2] );
		CNOT( anc[2], anc[6] );
		CNOT( anc[1], anc[9] );
		Toffoli( anc[3], anc[6], anc[8] );
		Toffoli( anc[0], anc[8], anc[7] );
		Toffoli( anc[1], anc[8], q[0] );
		Toffoli( anc[3], anc[0], anc[5] );
	}
	Restore {
		CNOT( anc[0], res[0] );
	}
	Unrecompute {
		Toffoli( anc[3], anc[0], anc[5] );
		Toffoli( anc[1], anc[8], q[0] );
		Toffoli( anc[0], anc[8], anc[7] );
		Toffoli( anc[3], anc[6], anc[8] );
		CNOT( anc[1], anc[9] );
		CNOT( anc[2], anc[6] );
		Toffoli( anc[3], anc[1], anc[2] );
		CNOT( anc[9], anc[3] );
		CNOT( q[0], anc[4] );
		func18R(nq3, 2);
		func15R(nq0, 2);
		CNOT( anc[0], anc[5] );
		Toffoli( anc[8], anc[0], anc[4] );
		func16R(nq1, 2);
		func17R(nq2, 2);
		CNOT( q[0], anc[8] );
	} Refree(anc, 10) {}
}
// Function 4 with degree 3
// nq: 4, na: 9, ng: 29
void func4(qbit **q, int n) {
printf("func4\n");
fflush(stderr);
	qbit *anc[9]; // ancilla
	qbit *nb[25]; // interacting bits
	qbit *res[1];
	qbit *nq0[4];
	qbit *nq1[4];
	qbit *nq2[4];
	nb[0] = q[3];
	nb[1] = q[3];
	nb[2] = q[2];
	nb[3] = q[3];
	nb[4] = q[3];
	nb[5] = q[0];
	nb[6] = q[1];
	nb[7] = q[3];
	nb[8] = q[3];
	nb[9] = q[1];
	nb[10] = q[1];
	nb[11] = q[2];
	nb[12] = q[1];
	nb[13] = q[0];
	nb[14] = q[1];
	nb[15] = q[1];
	nb[16] = q[2];
	nb[17] = q[0];
	nb[18] = q[2];
	nb[19] = q[3];
	nb[20] = q[0];
	nb[21] = q[2];
	nb[22] = q[2];
	nb[23] = q[3];
	nb[24] = q[1];
	res[0] = q[3];
	// Non-leaf function
	Compute (0, 9, 59, 30, 3, 128, 0){
		acquire(9, anc, 25, nb);
	nq0[0] = q[0];
	nq0[1] = anc[4];
	nq0[2] = anc[1];
	nq0[3] = anc[8];
	nq1[0] = anc[2];
	nq1[1] = q[2];
	nq1[2] = anc[6];
	nq1[3] = anc[5];
	nq2[0] = anc[3];
	nq2[1] = anc[0];
	nq2[2] = anc[7];
	nq2[3] = q[1];
		Toffoli( anc[5], anc[4], anc[0] );
		CNOT( anc[2], anc[7] );
		CNOT( anc[1], q[3] );
		func13(nq1, 4);
		Toffoli( q[1], anc[7], q[3] );
		Toffoli( anc[4], anc[0], q[2] );
		Toffoli( q[3], anc[0], q[1] );
		Toffoli( anc[1], anc[7], q[1] );
		func14(nq2, 4);
		Toffoli( anc[4], anc[2], anc[8] );
		Toffoli( anc[5], anc[1], q[3] );
		CNOT( q[3], anc[8] );
		CNOT( anc[5], anc[2] );
		Toffoli( q[3], anc[2], anc[7] );
		Toffoli( q[0], q[1], anc[4] );
		Toffoli( anc[2], anc[0], q[1] );
		Toffoli( anc[5], anc[1], anc[7] );
		CNOT( anc[4], q[0] );
		CNOT( anc[3], anc[5] );
		Toffoli( anc[8], anc[0], q[3] );
		Toffoli( q[3], anc[3], anc[7] );
		func12(nq0, 4);
		Toffoli( q[2], anc[3], anc[8] );
		Toffoli( anc[2], anc[0], anc[4] );
		Toffoli( anc[8], q[1], q[2] );
		Toffoli( anc[0], anc[8], q[2] );
		CNOT( anc[6], q[2] );
		Toffoli( anc[0], anc[7], q[2] );
		Toffoli( q[1], anc[1], anc[7] );
		Toffoli( q[0], anc[3], anc[2] );
		Toffoli( q[0], anc[0], anc[3] );
		CNOT( anc[6], anc[7] );
	}
	Store {
		CNOT( q[1], res[0] );
	}
	Uncompute(res, 0, anc, 9, 59, 30){
		CNOT( anc[6], anc[7] );
		Toffoli( q[0], anc[0], anc[3] );
		Toffoli( q[0], anc[3], anc[2] );
		Toffoli( q[1], anc[1], anc[7] );
		Toffoli( anc[0], anc[7], q[2] );
		CNOT( anc[6], q[2] );
		Toffoli( anc[0], anc[8], q[2] );
		Toffoli( anc[8], q[1], q[2] );
		Toffoli( anc[2], anc[0], anc[4] );
		Toffoli( q[2], anc[3], anc[8] );
		func12R(nq0, 4);
		Toffoli( q[3], anc[3], anc[7] );
		Toffoli( anc[8], anc[0], q[3] );
		CNOT( anc[3], anc[5] );
		CNOT( anc[4], q[0] );
		Toffoli( anc[5], anc[1], anc[7] );
		Toffoli( anc[2], anc[0], q[1] );
		Toffoli( q[0], q[1], anc[4] );
		Toffoli( q[3], anc[2], anc[7] );
		CNOT( anc[5], anc[2] );
		CNOT( q[3], anc[8] );
		Toffoli( anc[5], anc[1], q[3] );
		Toffoli( anc[4], anc[2], anc[8] );
		func14R(nq2, 4);
		Toffoli( anc[1], anc[7], q[1] );
		Toffoli( q[3], anc[0], q[1] );
		Toffoli( anc[4], anc[0], q[2] );
		Toffoli( q[1], anc[7], q[3] );
		func13R(nq1, 4);
		CNOT( anc[1], q[3] );
		CNOT( anc[2], anc[7] );
		Toffoli( anc[5], anc[4], anc[0] );
	} Free(anc, 9) {}
}
// Function 4 with degree 3
// nq: 4, na: 9, ng: 29
void func4R(qbit **q, int n) {
printf("func4R\n");
fflush(stderr);
	qbit *anc[9]; // ancilla
	qbit *nb[25]; // interacting bits
	qbit *res[1];
	qbit *nq0[4];
	qbit *nq1[4];
	qbit *nq2[4];
	nb[0] = q[3];
	nb[1] = q[3];
	nb[2] = q[2];
	nb[3] = q[3];
	nb[4] = q[3];
	nb[5] = q[0];
	nb[6] = q[1];
	nb[7] = q[3];
	nb[8] = q[3];
	nb[9] = q[1];
	nb[10] = q[1];
	nb[11] = q[2];
	nb[12] = q[1];
	nb[13] = q[0];
	nb[14] = q[1];
	nb[15] = q[1];
	nb[16] = q[2];
	nb[17] = q[0];
	nb[18] = q[2];
	nb[19] = q[3];
	nb[20] = q[0];
	nb[21] = q[2];
	nb[22] = q[2];
	nb[23] = q[3];
	nb[24] = q[1];
	res[0] = q[3];
	// Non-leaf function
	_computeModule(0, 9, 59, 30, 3, 128, 0);
	acquire(9, anc, 25, nb);
	nq0[0] = q[0];
	nq0[1] = anc[4];
	nq0[2] = anc[1];
	nq0[3] = anc[8];
	nq1[0] = anc[2];
	nq1[1] = q[2];
	nq1[2] = anc[6];
	nq1[3] = anc[5];
	nq2[0] = anc[3];
	nq2[1] = anc[0];
	nq2[2] = anc[7];
	nq2[3] = q[1];
	Recompute(res, 0, anc, 9, 59, 30){
		Toffoli( anc[5], anc[4], anc[0] );
		CNOT( anc[2], anc[7] );
		CNOT( anc[1], q[3] );
		func13(nq1, 4);
		Toffoli( q[1], anc[7], q[3] );
		Toffoli( anc[4], anc[0], q[2] );
		Toffoli( q[3], anc[0], q[1] );
		Toffoli( anc[1], anc[7], q[1] );
		func14(nq2, 4);
		Toffoli( anc[4], anc[2], anc[8] );
		Toffoli( anc[5], anc[1], q[3] );
		CNOT( q[3], anc[8] );
		CNOT( anc[5], anc[2] );
		Toffoli( q[3], anc[2], anc[7] );
		Toffoli( q[0], q[1], anc[4] );
		Toffoli( anc[2], anc[0], q[1] );
		Toffoli( anc[5], anc[1], anc[7] );
		CNOT( anc[4], q[0] );
		CNOT( anc[3], anc[5] );
		Toffoli( anc[8], anc[0], q[3] );
		Toffoli( q[3], anc[3], anc[7] );
		func12(nq0, 4);
		Toffoli( q[2], anc[3], anc[8] );
		Toffoli( anc[2], anc[0], anc[4] );
		Toffoli( anc[8], q[1], q[2] );
		Toffoli( anc[0], anc[8], q[2] );
		CNOT( anc[6], q[2] );
		Toffoli( anc[0], anc[7], q[2] );
		Toffoli( q[1], anc[1], anc[7] );
		Toffoli( q[0], anc[3], anc[2] );
		Toffoli( q[0], anc[0], anc[3] );
		CNOT( anc[6], anc[7] );
	}
	Restore {
		CNOT( q[1], res[0] );
	}
	Unrecompute {
		CNOT( anc[6], anc[7] );
		Toffoli( q[0], anc[0], anc[3] );
		Toffoli( q[0], anc[3], anc[2] );
		Toffoli( q[1], anc[1], anc[7] );
		Toffoli( anc[0], anc[7], q[2] );
		CNOT( anc[6], q[2] );
		Toffoli( anc[0], anc[8], q[2] );
		Toffoli( anc[8], q[1], q[2] );
		Toffoli( anc[2], anc[0], anc[4] );
		Toffoli( q[2], anc[3], anc[8] );
		func12R(nq0, 4);
		Toffoli( q[3], anc[3], anc[7] );
		Toffoli( anc[8], anc[0], q[3] );
		CNOT( anc[3], anc[5] );
		CNOT( anc[4], q[0] );
		Toffoli( anc[5], anc[1], anc[7] );
		Toffoli( anc[2], anc[0], q[1] );
		Toffoli( q[0], q[1], anc[4] );
		Toffoli( q[3], anc[2], anc[7] );
		CNOT( anc[5], anc[2] );
		CNOT( q[3], anc[8] );
		Toffoli( anc[5], anc[1], q[3] );
		Toffoli( anc[4], anc[2], anc[8] );
		func14R(nq2, 4);
		Toffoli( anc[1], anc[7], q[1] );
		Toffoli( q[3], anc[0], q[1] );
		Toffoli( anc[4], anc[0], q[2] );
		Toffoli( q[1], anc[7], q[3] );
		func13R(nq1, 4);
		CNOT( anc[1], q[3] );
		CNOT( anc[2], anc[7] );
		Toffoli( anc[5], anc[4], anc[0] );
	} Refree(anc, 9) {}
}
// Function 3 with degree 1
// nq: 4, na: 3, ng: 1
void func3(qbit **q, int n) {
printf("func3\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[2]; // interacting bits
	qbit *res[4];
	qbit *nq0[7];
	nb[0] = q[2];
	nb[1] = q[1];
	res[0] = q[0];
	res[1] = q[2];
	res[2] = q[1];
	res[3] = q[3];
	// Non-leaf function
	Compute (0, 3, 6, 5, 1, 128, 0){
		acquire(3, anc, 2, nb);
	nq0[0] = anc[2];
	nq0[1] = q[2];
	nq0[2] = anc[1];
	nq0[3] = anc[0];
	nq0[4] = q[0];
	nq0[5] = q[3];
	nq0[6] = q[1];
		CNOT( q[2], q[1] );
		func11(nq0, 7);
	}
	Store {
		CNOT( anc[2], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( q[3], res[2] );
		CNOT( q[0], res[3] );
	}
	Uncompute(res, 0, anc, 3, 6, 5){
		func11R(nq0, 7);
		CNOT( q[2], q[1] );
	} Free(anc, 3) {}
}
// Function 3 with degree 1
// nq: 4, na: 3, ng: 1
void func3R(qbit **q, int n) {
printf("func3R\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[2]; // interacting bits
	qbit *res[4];
	qbit *nq0[7];
	nb[0] = q[2];
	nb[1] = q[1];
	res[0] = q[0];
	res[1] = q[2];
	res[2] = q[1];
	res[3] = q[3];
	// Non-leaf function
	_computeModule(0, 3, 6, 5, 1, 128, 0);
	acquire(3, anc, 2, nb);
	nq0[0] = anc[2];
	nq0[1] = q[2];
	nq0[2] = anc[1];
	nq0[3] = anc[0];
	nq0[4] = q[0];
	nq0[5] = q[3];
	nq0[6] = q[1];
	Recompute(res, 0, anc, 3, 6, 5){
		CNOT( q[2], q[1] );
		func11(nq0, 7);
	}
	Restore {
		CNOT( anc[2], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( q[3], res[2] );
		CNOT( q[0], res[3] );
	}
	Unrecompute {
		func11R(nq0, 7);
		CNOT( q[2], q[1] );
	} Refree(anc, 3) {}
}
// Function 2 with degree 2
// nq: 4, na: 8, ng: 10
void func2(qbit **q, int n) {
printf("func2\n");
fflush(stderr);
	qbit *anc[8]; // ancilla
	qbit *nb[8]; // interacting bits
	qbit *res[1];
	qbit *nq0[6];
	qbit *nq1[6];
	nb[0] = q[2];
	nb[1] = q[2];
	nb[2] = q[3];
	nb[3] = q[1];
	nb[4] = q[1];
	nb[5] = q[3];
	nb[6] = q[3];
	nb[7] = q[3];
	res[0] = q[3];
	// Non-leaf function
	Compute (0, 8, 21, 11, 2, 128, 0){
		acquire(8, anc, 8, nb);
	nq0[0] = anc[2];
	nq0[1] = anc[7];
	nq0[2] = anc[5];
	nq0[3] = q[3];
	nq0[4] = q[2];
	nq0[5] = q[1];
	nq1[0] = anc[3];
	nq1[1] = anc[4];
	nq1[2] = anc[1];
	nq1[3] = anc[0];
	nq1[4] = q[0];
	nq1[5] = anc[6];
		CNOT( anc[0], anc[4] );
		CNOT( anc[7], anc[1] );
		CNOT( anc[0], anc[2] );
		func10(nq1, 6);
		Toffoli( anc[5], anc[2], anc[1] );
		Toffoli( anc[1], q[2], q[3] );
		CNOT( q[3], anc[5] );
		Toffoli( q[1], q[3], anc[7] );
		CNOT( anc[7], q[2] );
		Toffoli( anc[3], anc[1], q[3] );
		func9(nq0, 6);
		CNOT( anc[4], q[1] );
	}
	Store {
		CNOT( q[2], res[0] );
	}
	Uncompute(res, 0, anc, 8, 21, 11){
		CNOT( anc[4], q[1] );
		func9R(nq0, 6);
		Toffoli( anc[3], anc[1], q[3] );
		CNOT( anc[7], q[2] );
		Toffoli( q[1], q[3], anc[7] );
		CNOT( q[3], anc[5] );
		Toffoli( anc[1], q[2], q[3] );
		Toffoli( anc[5], anc[2], anc[1] );
		func10R(nq1, 6);
		CNOT( anc[0], anc[2] );
		CNOT( anc[7], anc[1] );
		CNOT( anc[0], anc[4] );
	} Free(anc, 8) {}
}
// Function 2 with degree 2
// nq: 4, na: 8, ng: 10
void func2R(qbit **q, int n) {
printf("func2R\n");
fflush(stderr);
	qbit *anc[8]; // ancilla
	qbit *nb[8]; // interacting bits
	qbit *res[1];
	qbit *nq0[6];
	qbit *nq1[6];
	nb[0] = q[2];
	nb[1] = q[2];
	nb[2] = q[3];
	nb[3] = q[1];
	nb[4] = q[1];
	nb[5] = q[3];
	nb[6] = q[3];
	nb[7] = q[3];
	res[0] = q[3];
	// Non-leaf function
	_computeModule(0, 8, 21, 11, 2, 128, 0);
	acquire(8, anc, 8, nb);
	nq0[0] = anc[2];
	nq0[1] = anc[7];
	nq0[2] = anc[5];
	nq0[3] = q[3];
	nq0[4] = q[2];
	nq0[5] = q[1];
	nq1[0] = anc[3];
	nq1[1] = anc[4];
	nq1[2] = anc[1];
	nq1[3] = anc[0];
	nq1[4] = q[0];
	nq1[5] = anc[6];
	Recompute(res, 0, anc, 8, 21, 11){
		CNOT( anc[0], anc[4] );
		CNOT( anc[7], anc[1] );
		CNOT( anc[0], anc[2] );
		func10(nq1, 6);
		Toffoli( anc[5], anc[2], anc[1] );
		Toffoli( anc[1], q[2], q[3] );
		CNOT( q[3], anc[5] );
		Toffoli( q[1], q[3], anc[7] );
		CNOT( anc[7], q[2] );
		Toffoli( anc[3], anc[1], q[3] );
		func9(nq0, 6);
		CNOT( anc[4], q[1] );
	}
	Restore {
		CNOT( q[2], res[0] );
	}
	Unrecompute {
		CNOT( anc[4], q[1] );
		func9R(nq0, 6);
		Toffoli( anc[3], anc[1], q[3] );
		CNOT( anc[7], q[2] );
		Toffoli( q[1], q[3], anc[7] );
		CNOT( q[3], anc[5] );
		Toffoli( anc[1], q[2], q[3] );
		Toffoli( anc[5], anc[2], anc[1] );
		func10R(nq1, 6);
		CNOT( anc[0], anc[2] );
		CNOT( anc[7], anc[1] );
		CNOT( anc[0], anc[4] );
	} Refree(anc, 8) {}
}
// Function 1 with degree 4
// nq: 4, na: 2, ng: 18
void func1(qbit **q, int n) {
printf("func1\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[31]; // interacting bits
	qbit *res[3];
	qbit *nq0[1];
	qbit *nq1[1];
	qbit *nq2[1];
	qbit *nq3[1];
	nb[0] = q[3];
	nb[1] = q[2];
	nb[2] = q[3];
	nb[3] = q[1];
	nb[4] = q[0];
	nb[5] = q[2];
	nb[6] = q[0];
	nb[7] = q[2];
	nb[8] = q[0];
	nb[9] = q[3];
	nb[10] = q[3];
	nb[11] = q[0];
	nb[12] = q[0];
	nb[13] = q[1];
	nb[14] = q[1];
	nb[15] = q[0];
	nb[16] = q[2];
	nb[17] = q[3];
	nb[18] = q[1];
	nb[19] = q[3];
	nb[20] = q[0];
	nb[21] = q[2];
	nb[22] = q[0];
	nb[23] = q[3];
	nb[24] = q[3];
	nb[25] = q[1];
	nb[26] = q[1];
	nb[27] = q[3];
	nb[28] = q[3];
	nb[29] = q[0];
	nb[30] = q[1];
	res[0] = q[0];
	res[1] = q[3];
	res[2] = q[1];
	// Non-leaf function
	Compute (0, 2, 39, 21, 4, 128, 0){
		acquire(2, anc, 31, nb);
	nq0[0] = q[1];
	nq1[0] = q[0];
	nq2[0] = q[3];
	nq3[0] = anc[1];
		Toffoli( q[0], q[1], anc[0] );
		Toffoli( q[2], q[0], q[3] );
		Toffoli( q[0], anc[1], q[3] );
		CNOT( q[2], anc[1] );
		func5(nq0, 1);
		CNOT( q[3], q[0] );
		func8(nq3, 1);
		Toffoli( anc[0], anc[1], q[0] );
		CNOT( q[2], q[3] );
		CNOT( q[1], q[0] );
		CNOT( anc[0], q[0] );
		func7(nq2, 1);
		Toffoli( anc[1], q[2], q[3] );
		Toffoli( anc[1], q[1], anc[0] );
		Toffoli( q[1], anc[1], q[3] );
		CNOT( q[1], q[3] );
		Toffoli( q[3], anc[0], anc[1] );
		CNOT( q[3], q[1] );
		CNOT( anc[1], q[3] );
		CNOT( q[0], q[1] );
		Toffoli( q[0], q[2], anc[1] );
		func6(nq1, 1);
	}
	Store {
		CNOT( anc[0], res[0] );
		CNOT( q[1], res[1] );
		CNOT( anc[1], res[2] );
	}
	Uncompute(res, 0, anc, 2, 39, 21){
		func6R(nq1, 1);
		Toffoli( q[0], q[2], anc[1] );
		CNOT( q[0], q[1] );
		CNOT( anc[1], q[3] );
		CNOT( q[3], q[1] );
		Toffoli( q[3], anc[0], anc[1] );
		CNOT( q[1], q[3] );
		Toffoli( q[1], anc[1], q[3] );
		Toffoli( anc[1], q[1], anc[0] );
		Toffoli( anc[1], q[2], q[3] );
		func7R(nq2, 1);
		CNOT( anc[0], q[0] );
		CNOT( q[1], q[0] );
		CNOT( q[2], q[3] );
		Toffoli( anc[0], anc[1], q[0] );
		func8R(nq3, 1);
		CNOT( q[3], q[0] );
		func5R(nq0, 1);
		CNOT( q[2], anc[1] );
		Toffoli( q[0], anc[1], q[3] );
		Toffoli( q[2], q[0], q[3] );
		Toffoli( q[0], q[1], anc[0] );
	} Free(anc, 2) {}
}
// Function 1 with degree 4
// nq: 4, na: 2, ng: 18
void func1R(qbit **q, int n) {
printf("func1R\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[31]; // interacting bits
	qbit *res[3];
	qbit *nq0[1];
	qbit *nq1[1];
	qbit *nq2[1];
	qbit *nq3[1];
	nb[0] = q[3];
	nb[1] = q[2];
	nb[2] = q[3];
	nb[3] = q[1];
	nb[4] = q[0];
	nb[5] = q[2];
	nb[6] = q[0];
	nb[7] = q[2];
	nb[8] = q[0];
	nb[9] = q[3];
	nb[10] = q[3];
	nb[11] = q[0];
	nb[12] = q[0];
	nb[13] = q[1];
	nb[14] = q[1];
	nb[15] = q[0];
	nb[16] = q[2];
	nb[17] = q[3];
	nb[18] = q[1];
	nb[19] = q[3];
	nb[20] = q[0];
	nb[21] = q[2];
	nb[22] = q[0];
	nb[23] = q[3];
	nb[24] = q[3];
	nb[25] = q[1];
	nb[26] = q[1];
	nb[27] = q[3];
	nb[28] = q[3];
	nb[29] = q[0];
	nb[30] = q[1];
	res[0] = q[0];
	res[1] = q[3];
	res[2] = q[1];
	// Non-leaf function
	_computeModule(0, 2, 39, 21, 4, 128, 0);
	acquire(2, anc, 31, nb);
	nq0[0] = q[1];
	nq1[0] = q[0];
	nq2[0] = q[3];
	nq3[0] = anc[1];
	Recompute(res, 0, anc, 2, 39, 21){
		Toffoli( q[0], q[1], anc[0] );
		Toffoli( q[2], q[0], q[3] );
		Toffoli( q[0], anc[1], q[3] );
		CNOT( q[2], anc[1] );
		func5(nq0, 1);
		CNOT( q[3], q[0] );
		func8(nq3, 1);
		Toffoli( anc[0], anc[1], q[0] );
		CNOT( q[2], q[3] );
		CNOT( q[1], q[0] );
		CNOT( anc[0], q[0] );
		func7(nq2, 1);
		Toffoli( anc[1], q[2], q[3] );
		Toffoli( anc[1], q[1], anc[0] );
		Toffoli( q[1], anc[1], q[3] );
		CNOT( q[1], q[3] );
		Toffoli( q[3], anc[0], anc[1] );
		CNOT( q[3], q[1] );
		CNOT( anc[1], q[3] );
		CNOT( q[0], q[1] );
		Toffoli( q[0], q[2], anc[1] );
		func6(nq1, 1);
	}
	Restore {
		CNOT( anc[0], res[0] );
		CNOT( q[1], res[1] );
		CNOT( anc[1], res[2] );
	}
	Unrecompute {
		func6R(nq1, 1);
		Toffoli( q[0], q[2], anc[1] );
		CNOT( q[0], q[1] );
		CNOT( anc[1], q[3] );
		CNOT( q[3], q[1] );
		Toffoli( q[3], anc[0], anc[1] );
		CNOT( q[1], q[3] );
		Toffoli( q[1], anc[1], q[3] );
		Toffoli( anc[1], q[1], anc[0] );
		Toffoli( anc[1], q[2], q[3] );
		func7R(nq2, 1);
		CNOT( anc[0], q[0] );
		CNOT( q[1], q[0] );
		CNOT( q[2], q[3] );
		Toffoli( anc[0], anc[1], q[0] );
		func8R(nq3, 1);
		CNOT( q[3], q[0] );
		func5R(nq0, 1);
		CNOT( q[2], anc[1] );
		Toffoli( q[0], anc[1], q[3] );
		Toffoli( q[2], q[0], q[3] );
		Toffoli( q[0], q[1], anc[0] );
	} Refree(anc, 2) {}
}
// main function
int main() {
	qbit *new[512];
	acquire(512, new, 0, NULL);
	// Intialize inputs
	X (new[499]);
	X (new[266]);
	X (new[75]);
	X (new[349]);
	X (new[88]);
	X (new[435]);
	X (new[457]);
	X (new[76]);
	X (new[301]);
	X (new[432]);
	X (new[17]);
	X (new[348]);
	X (new[181]);
	X (new[328]);
	X (new[236]);
	X (new[248]);
	X (new[151]);
	X (new[190]);
	X (new[102]);
	X (new[431]);
	X (new[219]);
	X (new[503]);
	X (new[120]);
	X (new[169]);
	X (new[292]);
	X (new[100]);
	X (new[109]);
	X (new[33]);
	X (new[185]);
	X (new[222]);
	X (new[493]);
	X (new[422]);
	X (new[441]);
	X (new[459]);
	X (new[490]);
	X (new[341]);
	X (new[440]);
	X (new[336]);
	X (new[418]);
	X (new[282]);
	X (new[473]);
	X (new[157]);
	X (new[487]);
	X (new[136]);
	X (new[476]);
	X (new[409]);
	X (new[344]);
	X (new[237]);
	X (new[454]);
	X (new[450]);
	X (new[20]);
	X (new[71]);
	X (new[443]);
	X (new[445]);
	X (new[144]);
	X (new[319]);
	X (new[253]);
	X (new[267]);
	X (new[353]);
	X (new[95]);
	X (new[446]);
	X (new[182]);
	X (new[47]);
	X (new[106]);
	X (new[501]);
	X (new[72]);
	X (new[405]);
	X (new[456]);
	X (new[294]);
	X (new[256]);
	X (new[478]);
	X (new[13]);
	X (new[278]);
	X (new[298]);
	X (new[7]);
	X (new[299]);
	X (new[350]);
	X (new[284]);
	X (new[29]);
	X (new[406]);
	X (new[239]);
	X (new[334]);
	X (new[427]);
	X (new[509]);
	// Start computation
	qbit *nq0[4];
	qbit *nq1[4];
	qbit *nq2[4];
	qbit *nq3[4];
	nq0[0] = new[0];
	nq0[1] = new[12];
	nq0[2] = new[6];
	nq0[3] = new[2];
	nq1[0] = new[10];
	nq1[1] = new[4];
	nq1[2] = new[9];
	nq1[3] = new[7];
	nq2[0] = new[14];
	nq2[1] = new[8];
	nq2[2] = new[13];
	nq2[3] = new[1];
	nq3[0] = new[15];
	nq3[1] = new[3];
	nq3[2] = new[11];
	nq3[3] = new[5];
	qbit *nq4[4];
	qbit *nq5[4];
	qbit *nq6[4];
	qbit *nq7[4];
	nq4[0] = new[16];
	nq4[1] = new[28];
	nq4[2] = new[22];
	nq4[3] = new[18];
	nq5[0] = new[26];
	nq5[1] = new[20];
	nq5[2] = new[25];
	nq5[3] = new[23];
	nq6[0] = new[30];
	nq6[1] = new[24];
	nq6[2] = new[29];
	nq6[3] = new[17];
	nq7[0] = new[31];
	nq7[1] = new[19];
	nq7[2] = new[27];
	nq7[3] = new[21];
	qbit *nq8[4];
	qbit *nq9[4];
	qbit *nq10[4];
	qbit *nq11[4];
	nq8[0] = new[32];
	nq8[1] = new[44];
	nq8[2] = new[38];
	nq8[3] = new[34];
	nq9[0] = new[42];
	nq9[1] = new[36];
	nq9[2] = new[41];
	nq9[3] = new[39];
	nq10[0] = new[46];
	nq10[1] = new[40];
	nq10[2] = new[45];
	nq10[3] = new[33];
	nq11[0] = new[47];
	nq11[1] = new[35];
	nq11[2] = new[43];
	nq11[3] = new[37];
	qbit *nq12[4];
	qbit *nq13[4];
	qbit *nq14[4];
	qbit *nq15[4];
	nq12[0] = new[48];
	nq12[1] = new[60];
	nq12[2] = new[54];
	nq12[3] = new[50];
	nq13[0] = new[58];
	nq13[1] = new[52];
	nq13[2] = new[57];
	nq13[3] = new[55];
	nq14[0] = new[62];
	nq14[1] = new[56];
	nq14[2] = new[61];
	nq14[3] = new[49];
	nq15[0] = new[63];
	nq15[1] = new[51];
	nq15[2] = new[59];
	nq15[3] = new[53];
	qbit *nq16[4];
	qbit *nq17[4];
	qbit *nq18[4];
	qbit *nq19[4];
	nq16[0] = new[64];
	nq16[1] = new[76];
	nq16[2] = new[70];
	nq16[3] = new[66];
	nq17[0] = new[74];
	nq17[1] = new[68];
	nq17[2] = new[73];
	nq17[3] = new[71];
	nq18[0] = new[78];
	nq18[1] = new[72];
	nq18[2] = new[77];
	nq18[3] = new[65];
	nq19[0] = new[79];
	nq19[1] = new[67];
	nq19[2] = new[75];
	nq19[3] = new[69];
	qbit *nq20[4];
	qbit *nq21[4];
	qbit *nq22[4];
	qbit *nq23[4];
	nq20[0] = new[80];
	nq20[1] = new[92];
	nq20[2] = new[86];
	nq20[3] = new[82];
	nq21[0] = new[90];
	nq21[1] = new[84];
	nq21[2] = new[89];
	nq21[3] = new[87];
	nq22[0] = new[94];
	nq22[1] = new[88];
	nq22[2] = new[93];
	nq22[3] = new[81];
	nq23[0] = new[95];
	nq23[1] = new[83];
	nq23[2] = new[91];
	nq23[3] = new[85];
	qbit *nq24[4];
	qbit *nq25[4];
	qbit *nq26[4];
	qbit *nq27[4];
	nq24[0] = new[96];
	nq24[1] = new[108];
	nq24[2] = new[102];
	nq24[3] = new[98];
	nq25[0] = new[106];
	nq25[1] = new[100];
	nq25[2] = new[105];
	nq25[3] = new[103];
	nq26[0] = new[110];
	nq26[1] = new[104];
	nq26[2] = new[109];
	nq26[3] = new[97];
	nq27[0] = new[111];
	nq27[1] = new[99];
	nq27[2] = new[107];
	nq27[3] = new[101];
	qbit *nq28[4];
	qbit *nq29[4];
	qbit *nq30[4];
	qbit *nq31[4];
	nq28[0] = new[112];
	nq28[1] = new[124];
	nq28[2] = new[118];
	nq28[3] = new[114];
	nq29[0] = new[122];
	nq29[1] = new[116];
	nq29[2] = new[121];
	nq29[3] = new[119];
	nq30[0] = new[126];
	nq30[1] = new[120];
	nq30[2] = new[125];
	nq30[3] = new[113];
	nq31[0] = new[127];
	nq31[1] = new[115];
	nq31[2] = new[123];
	nq31[3] = new[117];
	qbit *nq32[4];
	qbit *nq33[4];
	qbit *nq34[4];
	qbit *nq35[4];
	nq32[0] = new[128];
	nq32[1] = new[140];
	nq32[2] = new[134];
	nq32[3] = new[130];
	nq33[0] = new[138];
	nq33[1] = new[132];
	nq33[2] = new[137];
	nq33[3] = new[135];
	nq34[0] = new[142];
	nq34[1] = new[136];
	nq34[2] = new[141];
	nq34[3] = new[129];
	nq35[0] = new[143];
	nq35[1] = new[131];
	nq35[2] = new[139];
	nq35[3] = new[133];
	qbit *nq36[4];
	qbit *nq37[4];
	qbit *nq38[4];
	qbit *nq39[4];
	nq36[0] = new[144];
	nq36[1] = new[156];
	nq36[2] = new[150];
	nq36[3] = new[146];
	nq37[0] = new[154];
	nq37[1] = new[148];
	nq37[2] = new[153];
	nq37[3] = new[151];
	nq38[0] = new[158];
	nq38[1] = new[152];
	nq38[2] = new[157];
	nq38[3] = new[145];
	nq39[0] = new[159];
	nq39[1] = new[147];
	nq39[2] = new[155];
	nq39[3] = new[149];
	qbit *nq40[4];
	qbit *nq41[4];
	qbit *nq42[4];
	qbit *nq43[4];
	nq40[0] = new[160];
	nq40[1] = new[172];
	nq40[2] = new[166];
	nq40[3] = new[162];
	nq41[0] = new[170];
	nq41[1] = new[164];
	nq41[2] = new[169];
	nq41[3] = new[167];
	nq42[0] = new[174];
	nq42[1] = new[168];
	nq42[2] = new[173];
	nq42[3] = new[161];
	nq43[0] = new[175];
	nq43[1] = new[163];
	nq43[2] = new[171];
	nq43[3] = new[165];
	qbit *nq44[4];
	qbit *nq45[4];
	qbit *nq46[4];
	qbit *nq47[4];
	nq44[0] = new[176];
	nq44[1] = new[188];
	nq44[2] = new[182];
	nq44[3] = new[178];
	nq45[0] = new[186];
	nq45[1] = new[180];
	nq45[2] = new[185];
	nq45[3] = new[183];
	nq46[0] = new[190];
	nq46[1] = new[184];
	nq46[2] = new[189];
	nq46[3] = new[177];
	nq47[0] = new[191];
	nq47[1] = new[179];
	nq47[2] = new[187];
	nq47[3] = new[181];
	qbit *nq48[4];
	qbit *nq49[4];
	qbit *nq50[4];
	qbit *nq51[4];
	nq48[0] = new[192];
	nq48[1] = new[204];
	nq48[2] = new[198];
	nq48[3] = new[194];
	nq49[0] = new[202];
	nq49[1] = new[196];
	nq49[2] = new[201];
	nq49[3] = new[199];
	nq50[0] = new[206];
	nq50[1] = new[200];
	nq50[2] = new[205];
	nq50[3] = new[193];
	nq51[0] = new[207];
	nq51[1] = new[195];
	nq51[2] = new[203];
	nq51[3] = new[197];
	qbit *nq52[4];
	qbit *nq53[4];
	qbit *nq54[4];
	qbit *nq55[4];
	nq52[0] = new[208];
	nq52[1] = new[220];
	nq52[2] = new[214];
	nq52[3] = new[210];
	nq53[0] = new[218];
	nq53[1] = new[212];
	nq53[2] = new[217];
	nq53[3] = new[215];
	nq54[0] = new[222];
	nq54[1] = new[216];
	nq54[2] = new[221];
	nq54[3] = new[209];
	nq55[0] = new[223];
	nq55[1] = new[211];
	nq55[2] = new[219];
	nq55[3] = new[213];
	qbit *nq56[4];
	qbit *nq57[4];
	qbit *nq58[4];
	qbit *nq59[4];
	nq56[0] = new[224];
	nq56[1] = new[236];
	nq56[2] = new[230];
	nq56[3] = new[226];
	nq57[0] = new[234];
	nq57[1] = new[228];
	nq57[2] = new[233];
	nq57[3] = new[231];
	nq58[0] = new[238];
	nq58[1] = new[232];
	nq58[2] = new[237];
	nq58[3] = new[225];
	nq59[0] = new[239];
	nq59[1] = new[227];
	nq59[2] = new[235];
	nq59[3] = new[229];
	qbit *nq60[4];
	qbit *nq61[4];
	qbit *nq62[4];
	qbit *nq63[4];
	nq60[0] = new[240];
	nq60[1] = new[252];
	nq60[2] = new[246];
	nq60[3] = new[242];
	nq61[0] = new[250];
	nq61[1] = new[244];
	nq61[2] = new[249];
	nq61[3] = new[247];
	nq62[0] = new[254];
	nq62[1] = new[248];
	nq62[2] = new[253];
	nq62[3] = new[241];
	nq63[0] = new[255];
	nq63[1] = new[243];
	nq63[2] = new[251];
	nq63[3] = new[245];
	qbit *nq64[4];
	qbit *nq65[4];
	qbit *nq66[4];
	qbit *nq67[4];
	nq64[0] = new[256];
	nq64[1] = new[268];
	nq64[2] = new[262];
	nq64[3] = new[258];
	nq65[0] = new[266];
	nq65[1] = new[260];
	nq65[2] = new[265];
	nq65[3] = new[263];
	nq66[0] = new[270];
	nq66[1] = new[264];
	nq66[2] = new[269];
	nq66[3] = new[257];
	nq67[0] = new[271];
	nq67[1] = new[259];
	nq67[2] = new[267];
	nq67[3] = new[261];
	qbit *nq68[4];
	qbit *nq69[4];
	qbit *nq70[4];
	qbit *nq71[4];
	nq68[0] = new[272];
	nq68[1] = new[284];
	nq68[2] = new[278];
	nq68[3] = new[274];
	nq69[0] = new[282];
	nq69[1] = new[276];
	nq69[2] = new[281];
	nq69[3] = new[279];
	nq70[0] = new[286];
	nq70[1] = new[280];
	nq70[2] = new[285];
	nq70[3] = new[273];
	nq71[0] = new[287];
	nq71[1] = new[275];
	nq71[2] = new[283];
	nq71[3] = new[277];
	qbit *nq72[4];
	qbit *nq73[4];
	qbit *nq74[4];
	qbit *nq75[4];
	nq72[0] = new[288];
	nq72[1] = new[300];
	nq72[2] = new[294];
	nq72[3] = new[290];
	nq73[0] = new[298];
	nq73[1] = new[292];
	nq73[2] = new[297];
	nq73[3] = new[295];
	nq74[0] = new[302];
	nq74[1] = new[296];
	nq74[2] = new[301];
	nq74[3] = new[289];
	nq75[0] = new[303];
	nq75[1] = new[291];
	nq75[2] = new[299];
	nq75[3] = new[293];
	qbit *nq76[4];
	qbit *nq77[4];
	qbit *nq78[4];
	qbit *nq79[4];
	nq76[0] = new[304];
	nq76[1] = new[316];
	nq76[2] = new[310];
	nq76[3] = new[306];
	nq77[0] = new[314];
	nq77[1] = new[308];
	nq77[2] = new[313];
	nq77[3] = new[311];
	nq78[0] = new[318];
	nq78[1] = new[312];
	nq78[2] = new[317];
	nq78[3] = new[305];
	nq79[0] = new[319];
	nq79[1] = new[307];
	nq79[2] = new[315];
	nq79[3] = new[309];
	qbit *nq80[4];
	qbit *nq81[4];
	qbit *nq82[4];
	qbit *nq83[4];
	nq80[0] = new[320];
	nq80[1] = new[332];
	nq80[2] = new[326];
	nq80[3] = new[322];
	nq81[0] = new[330];
	nq81[1] = new[324];
	nq81[2] = new[329];
	nq81[3] = new[327];
	nq82[0] = new[334];
	nq82[1] = new[328];
	nq82[2] = new[333];
	nq82[3] = new[321];
	nq83[0] = new[335];
	nq83[1] = new[323];
	nq83[2] = new[331];
	nq83[3] = new[325];
	qbit *nq84[4];
	qbit *nq85[4];
	qbit *nq86[4];
	qbit *nq87[4];
	nq84[0] = new[336];
	nq84[1] = new[348];
	nq84[2] = new[342];
	nq84[3] = new[338];
	nq85[0] = new[346];
	nq85[1] = new[340];
	nq85[2] = new[345];
	nq85[3] = new[343];
	nq86[0] = new[350];
	nq86[1] = new[344];
	nq86[2] = new[349];
	nq86[3] = new[337];
	nq87[0] = new[351];
	nq87[1] = new[339];
	nq87[2] = new[347];
	nq87[3] = new[341];
	qbit *nq88[4];
	qbit *nq89[4];
	qbit *nq90[4];
	qbit *nq91[4];
	nq88[0] = new[352];
	nq88[1] = new[364];
	nq88[2] = new[358];
	nq88[3] = new[354];
	nq89[0] = new[362];
	nq89[1] = new[356];
	nq89[2] = new[361];
	nq89[3] = new[359];
	nq90[0] = new[366];
	nq90[1] = new[360];
	nq90[2] = new[365];
	nq90[3] = new[353];
	nq91[0] = new[367];
	nq91[1] = new[355];
	nq91[2] = new[363];
	nq91[3] = new[357];
	qbit *nq92[4];
	qbit *nq93[4];
	qbit *nq94[4];
	qbit *nq95[4];
	nq92[0] = new[368];
	nq92[1] = new[380];
	nq92[2] = new[374];
	nq92[3] = new[370];
	nq93[0] = new[378];
	nq93[1] = new[372];
	nq93[2] = new[377];
	nq93[3] = new[375];
	nq94[0] = new[382];
	nq94[1] = new[376];
	nq94[2] = new[381];
	nq94[3] = new[369];
	nq95[0] = new[383];
	nq95[1] = new[371];
	nq95[2] = new[379];
	nq95[3] = new[373];
	qbit *nq96[4];
	qbit *nq97[4];
	qbit *nq98[4];
	qbit *nq99[4];
	nq96[0] = new[384];
	nq96[1] = new[396];
	nq96[2] = new[390];
	nq96[3] = new[386];
	nq97[0] = new[394];
	nq97[1] = new[388];
	nq97[2] = new[393];
	nq97[3] = new[391];
	nq98[0] = new[398];
	nq98[1] = new[392];
	nq98[2] = new[397];
	nq98[3] = new[385];
	nq99[0] = new[399];
	nq99[1] = new[387];
	nq99[2] = new[395];
	nq99[3] = new[389];
	qbit *nq100[4];
	qbit *nq101[4];
	qbit *nq102[4];
	qbit *nq103[4];
	nq100[0] = new[400];
	nq100[1] = new[412];
	nq100[2] = new[406];
	nq100[3] = new[402];
	nq101[0] = new[410];
	nq101[1] = new[404];
	nq101[2] = new[409];
	nq101[3] = new[407];
	nq102[0] = new[414];
	nq102[1] = new[408];
	nq102[2] = new[413];
	nq102[3] = new[401];
	nq103[0] = new[415];
	nq103[1] = new[403];
	nq103[2] = new[411];
	nq103[3] = new[405];
	qbit *nq104[4];
	qbit *nq105[4];
	qbit *nq106[4];
	qbit *nq107[4];
	nq104[0] = new[416];
	nq104[1] = new[428];
	nq104[2] = new[422];
	nq104[3] = new[418];
	nq105[0] = new[426];
	nq105[1] = new[420];
	nq105[2] = new[425];
	nq105[3] = new[423];
	nq106[0] = new[430];
	nq106[1] = new[424];
	nq106[2] = new[429];
	nq106[3] = new[417];
	nq107[0] = new[431];
	nq107[1] = new[419];
	nq107[2] = new[427];
	nq107[3] = new[421];
	qbit *nq108[4];
	qbit *nq109[4];
	qbit *nq110[4];
	qbit *nq111[4];
	nq108[0] = new[432];
	nq108[1] = new[444];
	nq108[2] = new[438];
	nq108[3] = new[434];
	nq109[0] = new[442];
	nq109[1] = new[436];
	nq109[2] = new[441];
	nq109[3] = new[439];
	nq110[0] = new[446];
	nq110[1] = new[440];
	nq110[2] = new[445];
	nq110[3] = new[433];
	nq111[0] = new[447];
	nq111[1] = new[435];
	nq111[2] = new[443];
	nq111[3] = new[437];
	qbit *nq112[4];
	qbit *nq113[4];
	qbit *nq114[4];
	qbit *nq115[4];
	nq112[0] = new[448];
	nq112[1] = new[460];
	nq112[2] = new[454];
	nq112[3] = new[450];
	nq113[0] = new[458];
	nq113[1] = new[452];
	nq113[2] = new[457];
	nq113[3] = new[455];
	nq114[0] = new[462];
	nq114[1] = new[456];
	nq114[2] = new[461];
	nq114[3] = new[449];
	nq115[0] = new[463];
	nq115[1] = new[451];
	nq115[2] = new[459];
	nq115[3] = new[453];
	qbit *nq116[4];
	qbit *nq117[4];
	qbit *nq118[4];
	qbit *nq119[4];
	nq116[0] = new[464];
	nq116[1] = new[476];
	nq116[2] = new[470];
	nq116[3] = new[466];
	nq117[0] = new[474];
	nq117[1] = new[468];
	nq117[2] = new[473];
	nq117[3] = new[471];
	nq118[0] = new[478];
	nq118[1] = new[472];
	nq118[2] = new[477];
	nq118[3] = new[465];
	nq119[0] = new[479];
	nq119[1] = new[467];
	nq119[2] = new[475];
	nq119[3] = new[469];
	qbit *nq120[4];
	qbit *nq121[4];
	qbit *nq122[4];
	qbit *nq123[4];
	nq120[0] = new[480];
	nq120[1] = new[492];
	nq120[2] = new[486];
	nq120[3] = new[482];
	nq121[0] = new[490];
	nq121[1] = new[484];
	nq121[2] = new[489];
	nq121[3] = new[487];
	nq122[0] = new[494];
	nq122[1] = new[488];
	nq122[2] = new[493];
	nq122[3] = new[481];
	nq123[0] = new[495];
	nq123[1] = new[483];
	nq123[2] = new[491];
	nq123[3] = new[485];
	qbit *nq124[4];
	qbit *nq125[4];
	qbit *nq126[4];
	qbit *nq127[4];
	nq124[0] = new[496];
	nq124[1] = new[508];
	nq124[2] = new[502];
	nq124[3] = new[498];
	nq125[0] = new[506];
	nq125[1] = new[500];
	nq125[2] = new[505];
	nq125[3] = new[503];
	nq126[0] = new[510];
	nq126[1] = new[504];
	nq126[2] = new[509];
	nq126[3] = new[497];
	nq127[0] = new[511];
	nq127[1] = new[499];
	nq127[2] = new[507];
	nq127[3] = new[501];
	func1(nq0, 4);
	func2(nq1, 4);
	func3(nq2, 4);
	func4(nq3, 4);
	func1(nq4, 4);
	func2(nq5, 4);
	func3(nq6, 4);
	func4(nq7, 4);
	func1(nq8, 4);
	func2(nq9, 4);
	func3(nq10, 4);
	func4(nq11, 4);
	func1(nq12, 4);
	func2(nq13, 4);
	func3(nq14, 4);
	func4(nq15, 4);
	func1(nq16, 4);
	func2(nq17, 4);
	func3(nq18, 4);
	func4(nq19, 4);
	func1(nq20, 4);
	func2(nq21, 4);
	func3(nq22, 4);
	func4(nq23, 4);
	func1(nq24, 4);
	func2(nq25, 4);
	func3(nq26, 4);
	func4(nq27, 4);
	func1(nq28, 4);
	func2(nq29, 4);
	func3(nq30, 4);
	func4(nq31, 4);
	func1(nq32, 4);
	func2(nq33, 4);
	func3(nq34, 4);
	func4(nq35, 4);
	func1(nq36, 4);
	func2(nq37, 4);
	func3(nq38, 4);
	func4(nq39, 4);
	func1(nq40, 4);
	func2(nq41, 4);
	func3(nq42, 4);
	func4(nq43, 4);
	func1(nq44, 4);
	func2(nq45, 4);
	func3(nq46, 4);
	func4(nq47, 4);
	func1(nq48, 4);
	func2(nq49, 4);
	func3(nq50, 4);
	func4(nq51, 4);
	func1(nq52, 4);
	func2(nq53, 4);
	func3(nq54, 4);
	func4(nq55, 4);
	func1(nq56, 4);
	func2(nq57, 4);
	func3(nq58, 4);
	func4(nq59, 4);
	func1(nq60, 4);
	func2(nq61, 4);
	func3(nq62, 4);
	func4(nq63, 4);
	func1(nq64, 4);
	func2(nq65, 4);
	func3(nq66, 4);
	func4(nq67, 4);
	func1(nq68, 4);
	func2(nq69, 4);
	func3(nq70, 4);
	func4(nq71, 4);
	func1(nq72, 4);
	func2(nq73, 4);
	func3(nq74, 4);
	func4(nq75, 4);
	func1(nq76, 4);
	func2(nq77, 4);
	func3(nq78, 4);
	func4(nq79, 4);
	func1(nq80, 4);
	func2(nq81, 4);
	func3(nq82, 4);
	func4(nq83, 4);
	func1(nq84, 4);
	func2(nq85, 4);
	func3(nq86, 4);
	func4(nq87, 4);
	func1(nq88, 4);
	func2(nq89, 4);
	func3(nq90, 4);
	func4(nq91, 4);
	func1(nq92, 4);
	func2(nq93, 4);
	func3(nq94, 4);
	func4(nq95, 4);
	func1(nq96, 4);
	func2(nq97, 4);
	func3(nq98, 4);
	func4(nq99, 4);
	func1(nq100, 4);
	func2(nq101, 4);
	func3(nq102, 4);
	func4(nq103, 4);
	func1(nq104, 4);
	func2(nq105, 4);
	func3(nq106, 4);
	func4(nq107, 4);
	func1(nq108, 4);
	func2(nq109, 4);
	func3(nq110, 4);
	func4(nq111, 4);
	func1(nq112, 4);
	func2(nq113, 4);
	func3(nq114, 4);
	func4(nq115, 4);
	func1(nq116, 4);
	func2(nq117, 4);
	func3(nq118, 4);
	func4(nq119, 4);
	func1(nq120, 4);
	func2(nq121, 4);
	func3(nq122, 4);
	func4(nq123, 4);
	func1(nq124, 4);
	func2(nq125, 4);
	func3(nq126, 4);
	func4(nq127, 4);
	return 0;
}
