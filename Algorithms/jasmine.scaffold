// Scaffold file synthesized by para-bench.py
// qubits: 128 ancilla: 16 gates: 32 levels: 2 degrees: 4 loops: 32
#include "qalloc.h"
#include "uncompute.h"
#define LOOP 32
// Call list: 1,2,3,4;5,6,7,8;9,10;11;12,13,14;15,16,17,18
// Function 18 with degree 0
// nq: 3, na: 16, ng: 4
void func18(qbit **q, int n) {
printf("func18\n");
fflush(stderr);
	qbit *anc[16]; // ancilla
	qbit *nb[2]; // interacting bits
	qbit *res[2];
	nb[0] = q[2];
	nb[1] = q[1];
	res[0] = q[2];
	res[1] = q[1];
	// Leaf function
	Compute (0, 16, 10, 6, 0, 4, 0) {
		acquire(16, anc, 2, nb);
		Toffoli( anc[15], anc[14], anc[7] );
		CNOT( q[2], anc[11] );
		Toffoli( anc[7], q[1], anc[15] );
		CNOT( anc[3], anc[6] );
	}
	Store {
		CNOT( anc[1], res[0] );
		CNOT( anc[10], res[1] );
	}
	Uncompute(res, 0, anc, 16, 10, 6){
		CNOT( anc[3], anc[6] );
		Toffoli( anc[7], q[1], anc[15] );
		CNOT( q[2], anc[11] );
		Toffoli( anc[15], anc[14], anc[7] );
	} Free(anc, 16) {}
}
// Function 18 with degree 0
// nq: 3, na: 16, ng: 4
void func18R(qbit **q, int n) {
printf("func18R\n");
fflush(stderr);
	qbit *anc[16]; // ancilla
	qbit *nb[2]; // interacting bits
	qbit *res[2];
	nb[0] = q[2];
	nb[1] = q[1];
	res[0] = q[2];
	res[1] = q[1];
	// Leaf function
	_computeModule(0, 16, 10, 6, 0, 4, 0);
	acquire(16, anc, 2, nb);
	Recompute (res, 0, anc, 16, 10, 6){
		CNOT( anc[3], anc[6] );
		Toffoli( anc[7], q[1], anc[15] );
		CNOT( q[2], anc[11] );
		Toffoli( anc[15], anc[14], anc[7] );
	}
	Restore {
		CNOT( anc[1], res[0] );
		CNOT( anc[10], res[1] );
	}
	Unrecompute {
		Toffoli( anc[15], anc[14], anc[7] );
		CNOT( q[2], anc[11] );
		Toffoli( anc[7], q[1], anc[15] );
		CNOT( anc[3], anc[6] );
	} Refree(anc, 16) {}
}
// Function 17 with degree 0
// nq: 3, na: 10, ng: 4
void func17(qbit **q, int n) {
printf("func17\n");
fflush(stderr);
	qbit *anc[10]; // ancilla
	qbit *nb[1]; // interacting bits
	qbit *res[1];
	nb[0] = q[0];
	res[0] = q[1];
	// Leaf function
	Compute (0, 10, 9, 5, 0, 4, 0) {
		acquire(10, anc, 1, nb);
		CNOT( anc[3], anc[6] );
		Toffoli( anc[9], anc[4], anc[5] );
		CNOT( q[0], anc[3] );
		CNOT( anc[8], anc[2] );
	}
	Store {
		CNOT( anc[7], res[0] );
	}
	Uncompute(res, 0, anc, 10, 9, 5){
		CNOT( anc[8], anc[2] );
		CNOT( q[0], anc[3] );
		Toffoli( anc[9], anc[4], anc[5] );
		CNOT( anc[3], anc[6] );
	} Free(anc, 10) {}
}
// Function 17 with degree 0
// nq: 3, na: 10, ng: 4
void func17R(qbit **q, int n) {
printf("func17R\n");
fflush(stderr);
	qbit *anc[10]; // ancilla
	qbit *nb[1]; // interacting bits
	qbit *res[1];
	nb[0] = q[0];
	res[0] = q[1];
	// Leaf function
	_computeModule(0, 10, 9, 5, 0, 4, 0);
	acquire(10, anc, 1, nb);
	Recompute (res, 0, anc, 10, 9, 5){
		CNOT( anc[8], anc[2] );
		CNOT( q[0], anc[3] );
		Toffoli( anc[9], anc[4], anc[5] );
		CNOT( anc[3], anc[6] );
	}
	Restore {
		CNOT( anc[7], res[0] );
	}
	Unrecompute {
		CNOT( anc[3], anc[6] );
		Toffoli( anc[9], anc[4], anc[5] );
		CNOT( q[0], anc[3] );
		CNOT( anc[8], anc[2] );
	} Refree(anc, 10) {}
}
// Function 16 with degree 0
// nq: 3, na: 2, ng: 22
void func16(qbit **q, int n) {
printf("func16\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[29]; // interacting bits
	qbit *res[3];
	nb[0] = q[2];
	nb[1] = q[1];
	nb[2] = q[0];
	nb[3] = q[1];
	nb[4] = q[0];
	nb[5] = q[1];
	nb[6] = q[2];
	nb[7] = q[1];
	nb[8] = q[0];
	nb[9] = q[1];
	nb[10] = q[0];
	nb[11] = q[0];
	nb[12] = q[1];
	nb[13] = q[1];
	nb[14] = q[2];
	nb[15] = q[2];
	nb[16] = q[1];
	nb[17] = q[1];
	nb[18] = q[1];
	nb[19] = q[0];
	nb[20] = q[2];
	nb[21] = q[0];
	nb[22] = q[2];
	nb[23] = q[0];
	nb[24] = q[0];
	nb[25] = q[0];
	nb[26] = q[0];
	nb[27] = q[0];
	nb[28] = q[0];
	res[0] = q[0];
	res[1] = q[1];
	res[2] = q[2];
	// Leaf function
	Compute (0, 2, 47, 25, 0, 4, 0) {
		acquire(2, anc, 29, nb);
		Toffoli( q[2], anc[1], q[1] );
		Toffoli( anc[1], q[0], q[1] );
		Toffoli( q[0], anc[0], q[1] );
		Toffoli( q[2], q[1], q[0] );
		Toffoli( q[1], q[0], anc[0] );
		CNOT( q[0], q[1] );
		CNOT( anc[1], q[1] );
		Toffoli( anc[0], anc[1], q[2] );
		Toffoli( q[2], anc[1], q[1] );
		CNOT( q[1], anc[1] );
		Toffoli( q[1], anc[1], anc[0] );
		Toffoli( q[0], anc[1], q[2] );
		CNOT( q[0], anc[1] );
		CNOT( q[2], anc[0] );
		CNOT( q[0], anc[0] );
		CNOT( q[0], anc[1] );
		Toffoli( anc[1], anc[0], q[0] );
		CNOT( anc[0], anc[1] );
		CNOT( q[0], anc[0] );
		Toffoli( q[0], anc[0], anc[1] );
		CNOT( anc[0], anc[1] );
		CNOT( anc[0], q[0] );
	}
	Store {
		CNOT( anc[1], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( anc[0], res[2] );
	}
	Uncompute(res, 0, anc, 2, 47, 25){
		CNOT( anc[0], q[0] );
		CNOT( anc[0], anc[1] );
		Toffoli( q[0], anc[0], anc[1] );
		CNOT( q[0], anc[0] );
		CNOT( anc[0], anc[1] );
		Toffoli( anc[1], anc[0], q[0] );
		CNOT( q[0], anc[1] );
		CNOT( q[0], anc[0] );
		CNOT( q[2], anc[0] );
		CNOT( q[0], anc[1] );
		Toffoli( q[0], anc[1], q[2] );
		Toffoli( q[1], anc[1], anc[0] );
		CNOT( q[1], anc[1] );
		Toffoli( q[2], anc[1], q[1] );
		Toffoli( anc[0], anc[1], q[2] );
		CNOT( anc[1], q[1] );
		CNOT( q[0], q[1] );
		Toffoli( q[1], q[0], anc[0] );
		Toffoli( q[2], q[1], q[0] );
		Toffoli( q[0], anc[0], q[1] );
		Toffoli( anc[1], q[0], q[1] );
		Toffoli( q[2], anc[1], q[1] );
	} Free(anc, 2) {}
}
// Function 16 with degree 0
// nq: 3, na: 2, ng: 22
void func16R(qbit **q, int n) {
printf("func16R\n");
fflush(stderr);
	qbit *anc[2]; // ancilla
	qbit *nb[29]; // interacting bits
	qbit *res[3];
	nb[0] = q[2];
	nb[1] = q[1];
	nb[2] = q[0];
	nb[3] = q[1];
	nb[4] = q[0];
	nb[5] = q[1];
	nb[6] = q[2];
	nb[7] = q[1];
	nb[8] = q[0];
	nb[9] = q[1];
	nb[10] = q[0];
	nb[11] = q[0];
	nb[12] = q[1];
	nb[13] = q[1];
	nb[14] = q[2];
	nb[15] = q[2];
	nb[16] = q[1];
	nb[17] = q[1];
	nb[18] = q[1];
	nb[19] = q[0];
	nb[20] = q[2];
	nb[21] = q[0];
	nb[22] = q[2];
	nb[23] = q[0];
	nb[24] = q[0];
	nb[25] = q[0];
	nb[26] = q[0];
	nb[27] = q[0];
	nb[28] = q[0];
	res[0] = q[0];
	res[1] = q[1];
	res[2] = q[2];
	// Leaf function
	_computeModule(0, 2, 47, 25, 0, 4, 0);
	acquire(2, anc, 29, nb);
	Recompute (res, 0, anc, 2, 47, 25){
		CNOT( anc[0], q[0] );
		CNOT( anc[0], anc[1] );
		Toffoli( q[0], anc[0], anc[1] );
		CNOT( q[0], anc[0] );
		CNOT( anc[0], anc[1] );
		Toffoli( anc[1], anc[0], q[0] );
		CNOT( q[0], anc[1] );
		CNOT( q[0], anc[0] );
		CNOT( q[2], anc[0] );
		CNOT( q[0], anc[1] );
		Toffoli( q[0], anc[1], q[2] );
		Toffoli( q[1], anc[1], anc[0] );
		CNOT( q[1], anc[1] );
		Toffoli( q[2], anc[1], q[1] );
		Toffoli( anc[0], anc[1], q[2] );
		CNOT( anc[1], q[1] );
		CNOT( q[0], q[1] );
		Toffoli( q[1], q[0], anc[0] );
		Toffoli( q[2], q[1], q[0] );
		Toffoli( q[0], anc[0], q[1] );
		Toffoli( anc[1], q[0], q[1] );
		Toffoli( q[2], anc[1], q[1] );
	}
	Restore {
		CNOT( anc[1], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( anc[0], res[2] );
	}
	Unrecompute {
		Toffoli( q[2], anc[1], q[1] );
		Toffoli( anc[1], q[0], q[1] );
		Toffoli( q[0], anc[0], q[1] );
		Toffoli( q[2], q[1], q[0] );
		Toffoli( q[1], q[0], anc[0] );
		CNOT( q[0], q[1] );
		CNOT( anc[1], q[1] );
		Toffoli( anc[0], anc[1], q[2] );
		Toffoli( q[2], anc[1], q[1] );
		CNOT( q[1], anc[1] );
		Toffoli( q[1], anc[1], anc[0] );
		Toffoli( q[0], anc[1], q[2] );
		CNOT( q[0], anc[1] );
		CNOT( q[2], anc[0] );
		CNOT( q[0], anc[0] );
		CNOT( q[0], anc[1] );
		Toffoli( anc[1], anc[0], q[0] );
		CNOT( anc[0], anc[1] );
		CNOT( q[0], anc[0] );
		Toffoli( q[0], anc[0], anc[1] );
		CNOT( anc[0], anc[1] );
		CNOT( anc[0], q[0] );
	} Refree(anc, 2) {}
}
// Function 15 with degree 0
// nq: 3, na: 1, ng: 28
void func15(qbit **q, int n) {
printf("func15\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[49]; // interacting bits
	qbit *res[3];
	nb[0] = q[2];
	nb[1] = q[1];
	nb[2] = q[1];
	nb[3] = q[2];
	nb[4] = q[1];
	nb[5] = q[0];
	nb[6] = q[1];
	nb[7] = q[2];
	nb[8] = q[0];
	nb[9] = q[1];
	nb[10] = q[2];
	nb[11] = q[2];
	nb[12] = q[1];
	nb[13] = q[0];
	nb[14] = q[2];
	nb[15] = q[1];
	nb[16] = q[2];
	nb[17] = q[1];
	nb[18] = q[2];
	nb[19] = q[1];
	nb[20] = q[1];
	nb[21] = q[1];
	nb[22] = q[2];
	nb[23] = q[1];
	nb[24] = q[2];
	nb[25] = q[0];
	nb[26] = q[2];
	nb[27] = q[0];
	nb[28] = q[1];
	nb[29] = q[2];
	nb[30] = q[0];
	nb[31] = q[0];
	nb[32] = q[2];
	nb[33] = q[0];
	nb[34] = q[2];
	nb[35] = q[2];
	nb[36] = q[0];
	nb[37] = q[1];
	nb[38] = q[1];
	nb[39] = q[2];
	nb[40] = q[2];
	nb[41] = q[1];
	nb[42] = q[2];
	nb[43] = q[2];
	nb[44] = q[0];
	nb[45] = q[2];
	nb[46] = q[1];
	nb[47] = q[0];
	nb[48] = q[1];
	res[0] = q[1];
	res[1] = q[0];
	res[2] = q[2];
	// Leaf function
	Compute (0, 1, 59, 31, 0, 4, 0) {
		acquire(1, anc, 49, nb);
		CNOT( q[2], q[1] );
		Toffoli( q[1], anc[0], q[2] );
		CNOT( anc[0], q[1] );
		Toffoli( q[0], anc[0], q[1] );
		CNOT( q[2], q[0] );
		CNOT( q[1], q[2] );
		Toffoli( q[2], q[1], q[0] );
		Toffoli( q[2], q[1], anc[0] );
		CNOT( q[2], q[1] );
		CNOT( q[2], q[1] );
		CNOT( q[1], anc[0] );
		Toffoli( q[1], q[2], anc[0] );
		CNOT( anc[0], q[1] );
		Toffoli( q[2], q[0], anc[0] );
		CNOT( anc[0], q[2] );
		CNOT( anc[0], q[0] );
		CNOT( q[1], q[2] );
		CNOT( anc[0], q[0] );
		CNOT( q[0], q[2] );
		Toffoli( anc[0], q[0], q[2] );
		Toffoli( q[2], q[0], q[1] );
		Toffoli( q[1], anc[0], q[2] );
		CNOT( anc[0], q[2] );
		CNOT( anc[0], q[1] );
		CNOT( anc[0], q[2] );
		Toffoli( q[2], anc[0], q[0] );
		CNOT( q[2], q[1] );
		Toffoli( q[0], q[1], anc[0] );
	}
	Store {
		CNOT( anc[0], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( q[0], res[2] );
	}
	Uncompute(res, 0, anc, 1, 59, 31){
		Toffoli( q[0], q[1], anc[0] );
		CNOT( q[2], q[1] );
		Toffoli( q[2], anc[0], q[0] );
		CNOT( anc[0], q[2] );
		CNOT( anc[0], q[1] );
		CNOT( anc[0], q[2] );
		Toffoli( q[1], anc[0], q[2] );
		Toffoli( q[2], q[0], q[1] );
		Toffoli( anc[0], q[0], q[2] );
		CNOT( q[0], q[2] );
		CNOT( anc[0], q[0] );
		CNOT( q[1], q[2] );
		CNOT( anc[0], q[0] );
		CNOT( anc[0], q[2] );
		Toffoli( q[2], q[0], anc[0] );
		CNOT( anc[0], q[1] );
		Toffoli( q[1], q[2], anc[0] );
		CNOT( q[1], anc[0] );
		CNOT( q[2], q[1] );
		CNOT( q[2], q[1] );
		Toffoli( q[2], q[1], anc[0] );
		Toffoli( q[2], q[1], q[0] );
		CNOT( q[1], q[2] );
		CNOT( q[2], q[0] );
		Toffoli( q[0], anc[0], q[1] );
		CNOT( anc[0], q[1] );
		Toffoli( q[1], anc[0], q[2] );
		CNOT( q[2], q[1] );
	} Free(anc, 1) {}
}
// Function 15 with degree 0
// nq: 3, na: 1, ng: 28
void func15R(qbit **q, int n) {
printf("func15R\n");
fflush(stderr);
	qbit *anc[1]; // ancilla
	qbit *nb[49]; // interacting bits
	qbit *res[3];
	nb[0] = q[2];
	nb[1] = q[1];
	nb[2] = q[1];
	nb[3] = q[2];
	nb[4] = q[1];
	nb[5] = q[0];
	nb[6] = q[1];
	nb[7] = q[2];
	nb[8] = q[0];
	nb[9] = q[1];
	nb[10] = q[2];
	nb[11] = q[2];
	nb[12] = q[1];
	nb[13] = q[0];
	nb[14] = q[2];
	nb[15] = q[1];
	nb[16] = q[2];
	nb[17] = q[1];
	nb[18] = q[2];
	nb[19] = q[1];
	nb[20] = q[1];
	nb[21] = q[1];
	nb[22] = q[2];
	nb[23] = q[1];
	nb[24] = q[2];
	nb[25] = q[0];
	nb[26] = q[2];
	nb[27] = q[0];
	nb[28] = q[1];
	nb[29] = q[2];
	nb[30] = q[0];
	nb[31] = q[0];
	nb[32] = q[2];
	nb[33] = q[0];
	nb[34] = q[2];
	nb[35] = q[2];
	nb[36] = q[0];
	nb[37] = q[1];
	nb[38] = q[1];
	nb[39] = q[2];
	nb[40] = q[2];
	nb[41] = q[1];
	nb[42] = q[2];
	nb[43] = q[2];
	nb[44] = q[0];
	nb[45] = q[2];
	nb[46] = q[1];
	nb[47] = q[0];
	nb[48] = q[1];
	res[0] = q[1];
	res[1] = q[0];
	res[2] = q[2];
	// Leaf function
	_computeModule(0, 1, 59, 31, 0, 4, 0);
	acquire(1, anc, 49, nb);
	Recompute (res, 0, anc, 1, 59, 31){
		Toffoli( q[0], q[1], anc[0] );
		CNOT( q[2], q[1] );
		Toffoli( q[2], anc[0], q[0] );
		CNOT( anc[0], q[2] );
		CNOT( anc[0], q[1] );
		CNOT( anc[0], q[2] );
		Toffoli( q[1], anc[0], q[2] );
		Toffoli( q[2], q[0], q[1] );
		Toffoli( anc[0], q[0], q[2] );
		CNOT( q[0], q[2] );
		CNOT( anc[0], q[0] );
		CNOT( q[1], q[2] );
		CNOT( anc[0], q[0] );
		CNOT( anc[0], q[2] );
		Toffoli( q[2], q[0], anc[0] );
		CNOT( anc[0], q[1] );
		Toffoli( q[1], q[2], anc[0] );
		CNOT( q[1], anc[0] );
		CNOT( q[2], q[1] );
		CNOT( q[2], q[1] );
		Toffoli( q[2], q[1], anc[0] );
		Toffoli( q[2], q[1], q[0] );
		CNOT( q[1], q[2] );
		CNOT( q[2], q[0] );
		Toffoli( q[0], anc[0], q[1] );
		CNOT( anc[0], q[1] );
		Toffoli( q[1], anc[0], q[2] );
		CNOT( q[2], q[1] );
	}
	Restore {
		CNOT( anc[0], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( q[0], res[2] );
	}
	Unrecompute {
		CNOT( q[2], q[1] );
		Toffoli( q[1], anc[0], q[2] );
		CNOT( anc[0], q[1] );
		Toffoli( q[0], anc[0], q[1] );
		CNOT( q[2], q[0] );
		CNOT( q[1], q[2] );
		Toffoli( q[2], q[1], q[0] );
		Toffoli( q[2], q[1], anc[0] );
		CNOT( q[2], q[1] );
		CNOT( q[2], q[1] );
		CNOT( q[1], anc[0] );
		Toffoli( q[1], q[2], anc[0] );
		CNOT( anc[0], q[1] );
		Toffoli( q[2], q[0], anc[0] );
		CNOT( anc[0], q[2] );
		CNOT( anc[0], q[0] );
		CNOT( q[1], q[2] );
		CNOT( anc[0], q[0] );
		CNOT( q[0], q[2] );
		Toffoli( anc[0], q[0], q[2] );
		Toffoli( q[2], q[0], q[1] );
		Toffoli( q[1], anc[0], q[2] );
		CNOT( anc[0], q[2] );
		CNOT( anc[0], q[1] );
		CNOT( anc[0], q[2] );
		Toffoli( q[2], anc[0], q[0] );
		CNOT( q[2], q[1] );
		Toffoli( q[0], q[1], anc[0] );
	} Refree(anc, 1) {}
}
// Function 14 with degree 0
// nq: 13, na: 3, ng: 14
void func14(qbit **q, int n) {
printf("func14\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[29]; // interacting bits
	qbit *res[8];
	nb[0] = q[11];
	nb[1] = q[4];
	nb[2] = q[10];
	nb[3] = q[0];
	nb[4] = q[8];
	nb[5] = q[1];
	nb[6] = q[1];
	nb[7] = q[7];
	nb[8] = q[3];
	nb[9] = q[8];
	nb[10] = q[12];
	nb[11] = q[10];
	nb[12] = q[3];
	nb[13] = q[6];
	nb[14] = q[4];
	nb[15] = q[4];
	nb[16] = q[11];
	nb[17] = q[5];
	nb[18] = q[8];
	nb[19] = q[4];
	nb[20] = q[9];
	nb[21] = q[6];
	nb[22] = q[12];
	nb[23] = q[9];
	nb[24] = q[1];
	nb[25] = q[12];
	nb[26] = q[9];
	nb[27] = q[1];
	nb[28] = q[7];
	res[0] = q[0];
	res[1] = q[10];
	res[2] = q[9];
	res[3] = q[6];
	res[4] = q[12];
	res[5] = q[3];
	res[6] = q[11];
	res[7] = q[7];
	// Leaf function
	Compute (0, 3, 36, 22, 0, 3, 0) {
		acquire(3, anc, 29, nb);
		Toffoli( anc[0], q[11], q[4] );
		CNOT( q[10], q[0] );
		CNOT( q[8], q[1] );
		CNOT( q[1], anc[2] );
		CNOT( q[7], q[3] );
		CNOT( q[8], q[12] );
		CNOT( q[10], q[3] );
		CNOT( q[6], q[4] );
		Toffoli( q[4], q[11], q[5] );
		CNOT( q[8], q[4] );
		CNOT( q[9], q[6] );
		Toffoli( q[12], q[9], q[1] );
		CNOT( q[12], q[9] );
		Toffoli( q[1], anc[1], q[7] );
	}
	Store {
		CNOT( q[12], res[0] );
		CNOT( q[11], res[1] );
		CNOT( anc[1], res[2] );
		CNOT( q[4], res[3] );
		CNOT( q[3], res[4] );
		CNOT( q[7], res[5] );
		CNOT( q[0], res[6] );
		CNOT( q[10], res[7] );
	}
	Uncompute(res, 0, anc, 3, 36, 22){
		Toffoli( q[1], anc[1], q[7] );
		CNOT( q[12], q[9] );
		Toffoli( q[12], q[9], q[1] );
		CNOT( q[9], q[6] );
		CNOT( q[8], q[4] );
		Toffoli( q[4], q[11], q[5] );
		CNOT( q[6], q[4] );
		CNOT( q[10], q[3] );
		CNOT( q[8], q[12] );
		CNOT( q[7], q[3] );
		CNOT( q[1], anc[2] );
		CNOT( q[8], q[1] );
		CNOT( q[10], q[0] );
		Toffoli( anc[0], q[11], q[4] );
	} Free(anc, 3) {}
}
// Function 14 with degree 0
// nq: 13, na: 3, ng: 14
void func14R(qbit **q, int n) {
printf("func14R\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[29]; // interacting bits
	qbit *res[8];
	nb[0] = q[11];
	nb[1] = q[4];
	nb[2] = q[10];
	nb[3] = q[0];
	nb[4] = q[8];
	nb[5] = q[1];
	nb[6] = q[1];
	nb[7] = q[7];
	nb[8] = q[3];
	nb[9] = q[8];
	nb[10] = q[12];
	nb[11] = q[10];
	nb[12] = q[3];
	nb[13] = q[6];
	nb[14] = q[4];
	nb[15] = q[4];
	nb[16] = q[11];
	nb[17] = q[5];
	nb[18] = q[8];
	nb[19] = q[4];
	nb[20] = q[9];
	nb[21] = q[6];
	nb[22] = q[12];
	nb[23] = q[9];
	nb[24] = q[1];
	nb[25] = q[12];
	nb[26] = q[9];
	nb[27] = q[1];
	nb[28] = q[7];
	res[0] = q[0];
	res[1] = q[10];
	res[2] = q[9];
	res[3] = q[6];
	res[4] = q[12];
	res[5] = q[3];
	res[6] = q[11];
	res[7] = q[7];
	// Leaf function
	_computeModule(0, 3, 36, 22, 0, 3, 0);
	acquire(3, anc, 29, nb);
	Recompute (res, 0, anc, 3, 36, 22){
		Toffoli( q[1], anc[1], q[7] );
		CNOT( q[12], q[9] );
		Toffoli( q[12], q[9], q[1] );
		CNOT( q[9], q[6] );
		CNOT( q[8], q[4] );
		Toffoli( q[4], q[11], q[5] );
		CNOT( q[6], q[4] );
		CNOT( q[10], q[3] );
		CNOT( q[8], q[12] );
		CNOT( q[7], q[3] );
		CNOT( q[1], anc[2] );
		CNOT( q[8], q[1] );
		CNOT( q[10], q[0] );
		Toffoli( anc[0], q[11], q[4] );
	}
	Restore {
		CNOT( q[12], res[0] );
		CNOT( q[11], res[1] );
		CNOT( anc[1], res[2] );
		CNOT( q[4], res[3] );
		CNOT( q[3], res[4] );
		CNOT( q[7], res[5] );
		CNOT( q[0], res[6] );
		CNOT( q[10], res[7] );
	}
	Unrecompute {
		Toffoli( anc[0], q[11], q[4] );
		CNOT( q[10], q[0] );
		CNOT( q[8], q[1] );
		CNOT( q[1], anc[2] );
		CNOT( q[7], q[3] );
		CNOT( q[8], q[12] );
		CNOT( q[10], q[3] );
		CNOT( q[6], q[4] );
		Toffoli( q[4], q[11], q[5] );
		CNOT( q[8], q[4] );
		CNOT( q[9], q[6] );
		Toffoli( q[12], q[9], q[1] );
		CNOT( q[12], q[9] );
		Toffoli( q[1], anc[1], q[7] );
	} Refree(anc, 3) {}
}
// Function 13 with degree 0
// nq: 13, na: 6, ng: 21
void func13(qbit **q, int n) {
printf("func13\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[28]; // interacting bits
	qbit *res[1];
	nb[0] = q[8];
	nb[1] = q[6];
	nb[2] = q[11];
	nb[3] = q[3];
	nb[4] = q[6];
	nb[5] = q[2];
	nb[6] = q[8];
	nb[7] = q[11];
	nb[8] = q[9];
	nb[9] = q[0];
	nb[10] = q[7];
	nb[11] = q[11];
	nb[12] = q[8];
	nb[13] = q[4];
	nb[14] = q[0];
	nb[15] = q[4];
	nb[16] = q[10];
	nb[17] = q[9];
	nb[18] = q[3];
	nb[19] = q[3];
	nb[20] = q[7];
	nb[21] = q[6];
	nb[22] = q[6];
	nb[23] = q[4];
	nb[24] = q[2];
	nb[25] = q[11];
	nb[26] = q[2];
	nb[27] = q[9];
	res[0] = q[0];
	// Leaf function
	Compute (0, 6, 43, 22, 0, 3, 0) {
		acquire(6, anc, 28, nb);
		CNOT( q[8], anc[0] );
		Toffoli( q[6], q[11], q[3] );
		Toffoli( q[6], anc[0], q[2] );
		CNOT( q[8], anc[3] );
		Toffoli( q[11], anc[1], q[9] );
		Toffoli( anc[3], q[0], q[7] );
		Toffoli( anc[1], anc[3], q[11] );
		Toffoli( q[8], anc[4], q[4] );
		Toffoli( q[0], anc[2], anc[4] );
		Toffoli( anc[5], q[4], anc[1] );
		CNOT( q[10], anc[0] );
		Toffoli( anc[4], q[9], q[3] );
		Toffoli( anc[3], q[3], anc[2] );
		CNOT( anc[2], q[7] );
		CNOT( anc[0], q[6] );
		CNOT( anc[4], anc[2] );
		CNOT( anc[0], anc[2] );
		CNOT( q[6], anc[0] );
		CNOT( q[4], anc[5] );
		CNOT( q[2], q[11] );
		Toffoli( anc[2], q[2], q[9] );
	}
	Store {
		CNOT( q[10], res[0] );
	}
	Uncompute(res, 0, anc, 6, 43, 22){
		Toffoli( anc[2], q[2], q[9] );
		CNOT( q[2], q[11] );
		CNOT( q[4], anc[5] );
		CNOT( q[6], anc[0] );
		CNOT( anc[0], anc[2] );
		CNOT( anc[4], anc[2] );
		CNOT( anc[0], q[6] );
		CNOT( anc[2], q[7] );
		Toffoli( anc[3], q[3], anc[2] );
		Toffoli( anc[4], q[9], q[3] );
		CNOT( q[10], anc[0] );
		Toffoli( anc[5], q[4], anc[1] );
		Toffoli( q[0], anc[2], anc[4] );
		Toffoli( q[8], anc[4], q[4] );
		Toffoli( anc[1], anc[3], q[11] );
		Toffoli( anc[3], q[0], q[7] );
		Toffoli( q[11], anc[1], q[9] );
		CNOT( q[8], anc[3] );
		Toffoli( q[6], anc[0], q[2] );
		Toffoli( q[6], q[11], q[3] );
		CNOT( q[8], anc[0] );
	} Free(anc, 6) {}
}
// Function 13 with degree 0
// nq: 13, na: 6, ng: 21
void func13R(qbit **q, int n) {
printf("func13R\n");
fflush(stderr);
	qbit *anc[6]; // ancilla
	qbit *nb[28]; // interacting bits
	qbit *res[1];
	nb[0] = q[8];
	nb[1] = q[6];
	nb[2] = q[11];
	nb[3] = q[3];
	nb[4] = q[6];
	nb[5] = q[2];
	nb[6] = q[8];
	nb[7] = q[11];
	nb[8] = q[9];
	nb[9] = q[0];
	nb[10] = q[7];
	nb[11] = q[11];
	nb[12] = q[8];
	nb[13] = q[4];
	nb[14] = q[0];
	nb[15] = q[4];
	nb[16] = q[10];
	nb[17] = q[9];
	nb[18] = q[3];
	nb[19] = q[3];
	nb[20] = q[7];
	nb[21] = q[6];
	nb[22] = q[6];
	nb[23] = q[4];
	nb[24] = q[2];
	nb[25] = q[11];
	nb[26] = q[2];
	nb[27] = q[9];
	res[0] = q[0];
	// Leaf function
	_computeModule(0, 6, 43, 22, 0, 3, 0);
	acquire(6, anc, 28, nb);
	Recompute (res, 0, anc, 6, 43, 22){
		Toffoli( anc[2], q[2], q[9] );
		CNOT( q[2], q[11] );
		CNOT( q[4], anc[5] );
		CNOT( q[6], anc[0] );
		CNOT( anc[0], anc[2] );
		CNOT( anc[4], anc[2] );
		CNOT( anc[0], q[6] );
		CNOT( anc[2], q[7] );
		Toffoli( anc[3], q[3], anc[2] );
		Toffoli( anc[4], q[9], q[3] );
		CNOT( q[10], anc[0] );
		Toffoli( anc[5], q[4], anc[1] );
		Toffoli( q[0], anc[2], anc[4] );
		Toffoli( q[8], anc[4], q[4] );
		Toffoli( anc[1], anc[3], q[11] );
		Toffoli( anc[3], q[0], q[7] );
		Toffoli( q[11], anc[1], q[9] );
		CNOT( q[8], anc[3] );
		Toffoli( q[6], anc[0], q[2] );
		Toffoli( q[6], q[11], q[3] );
		CNOT( q[8], anc[0] );
	}
	Restore {
		CNOT( q[10], res[0] );
	}
	Unrecompute {
		CNOT( q[8], anc[0] );
		Toffoli( q[6], q[11], q[3] );
		Toffoli( q[6], anc[0], q[2] );
		CNOT( q[8], anc[3] );
		Toffoli( q[11], anc[1], q[9] );
		Toffoli( anc[3], q[0], q[7] );
		Toffoli( anc[1], anc[3], q[11] );
		Toffoli( q[8], anc[4], q[4] );
		Toffoli( q[0], anc[2], anc[4] );
		Toffoli( anc[5], q[4], anc[1] );
		CNOT( q[10], anc[0] );
		Toffoli( anc[4], q[9], q[3] );
		Toffoli( anc[3], q[3], anc[2] );
		CNOT( anc[2], q[7] );
		CNOT( anc[0], q[6] );
		CNOT( anc[4], anc[2] );
		CNOT( anc[0], anc[2] );
		CNOT( q[6], anc[0] );
		CNOT( q[4], anc[5] );
		CNOT( q[2], q[11] );
		Toffoli( anc[2], q[2], q[9] );
	} Refree(anc, 6) {}
}
// Function 12 with degree 0
// nq: 13, na: 9, ng: 18
void func12(qbit **q, int n) {
printf("func12\n");
fflush(stderr);
	qbit *anc[9]; // ancilla
	qbit *nb[33]; // interacting bits
	qbit *res[8];
	nb[0] = q[8];
	nb[1] = q[9];
	nb[2] = q[6];
	nb[3] = q[8];
	nb[4] = q[3];
	nb[5] = q[0];
	nb[6] = q[9];
	nb[7] = q[8];
	nb[8] = q[12];
	nb[9] = q[3];
	nb[10] = q[7];
	nb[11] = q[9];
	nb[12] = q[3];
	nb[13] = q[6];
	nb[14] = q[5];
	nb[15] = q[9];
	nb[16] = q[6];
	nb[17] = q[11];
	nb[18] = q[7];
	nb[19] = q[5];
	nb[20] = q[6];
	nb[21] = q[11];
	nb[22] = q[12];
	nb[23] = q[8];
	nb[24] = q[6];
	nb[25] = q[0];
	nb[26] = q[1];
	nb[27] = q[6];
	nb[28] = q[5];
	nb[29] = q[8];
	nb[30] = q[2];
	nb[31] = q[3];
	nb[32] = q[4];
	res[0] = q[8];
	res[1] = q[6];
	res[2] = q[12];
	res[3] = q[2];
	res[4] = q[11];
	res[5] = q[4];
	res[6] = q[10];
	res[7] = q[9];
	// Leaf function
	Compute (0, 9, 44, 26, 0, 3, 0) {
		acquire(9, anc, 33, nb);
		CNOT( anc[7], q[8] );
		Toffoli( q[9], q[6], q[8] );
		Toffoli( q[3], anc[7], anc[1] );
		CNOT( q[0], anc[4] );
		CNOT( q[9], q[8] );
		CNOT( q[12], q[3] );
		Toffoli( q[7], q[9], anc[1] );
		CNOT( q[3], q[6] );
		CNOT( q[5], anc[8] );
		Toffoli( q[9], q[6], q[11] );
		CNOT( q[7], q[5] );
		Toffoli( q[6], q[11], q[12] );
		CNOT( q[8], q[6] );
		Toffoli( q[0], anc[1], anc[0] );
		CNOT( anc[0], anc[4] );
		Toffoli( q[1], anc[8], q[6] );
		Toffoli( q[5], q[8], q[2] );
		Toffoli( anc[8], q[3], q[4] );
	}
	Store {
		CNOT( anc[7], res[0] );
		CNOT( q[3], res[1] );
		CNOT( anc[3], res[2] );
		CNOT( q[0], res[3] );
		CNOT( q[1], res[4] );
		CNOT( anc[0], res[5] );
		CNOT( anc[2], res[6] );
		CNOT( anc[4], res[7] );
	}
	Uncompute(res, 0, anc, 9, 44, 26){
		Toffoli( anc[8], q[3], q[4] );
		Toffoli( q[5], q[8], q[2] );
		Toffoli( q[1], anc[8], q[6] );
		CNOT( anc[0], anc[4] );
		Toffoli( q[0], anc[1], anc[0] );
		CNOT( q[8], q[6] );
		Toffoli( q[6], q[11], q[12] );
		CNOT( q[7], q[5] );
		Toffoli( q[9], q[6], q[11] );
		CNOT( q[5], anc[8] );
		CNOT( q[3], q[6] );
		Toffoli( q[7], q[9], anc[1] );
		CNOT( q[12], q[3] );
		CNOT( q[9], q[8] );
		CNOT( q[0], anc[4] );
		Toffoli( q[3], anc[7], anc[1] );
		Toffoli( q[9], q[6], q[8] );
		CNOT( anc[7], q[8] );
	} Free(anc, 9) {}
}
// Function 12 with degree 0
// nq: 13, na: 9, ng: 18
void func12R(qbit **q, int n) {
printf("func12R\n");
fflush(stderr);
	qbit *anc[9]; // ancilla
	qbit *nb[33]; // interacting bits
	qbit *res[8];
	nb[0] = q[8];
	nb[1] = q[9];
	nb[2] = q[6];
	nb[3] = q[8];
	nb[4] = q[3];
	nb[5] = q[0];
	nb[6] = q[9];
	nb[7] = q[8];
	nb[8] = q[12];
	nb[9] = q[3];
	nb[10] = q[7];
	nb[11] = q[9];
	nb[12] = q[3];
	nb[13] = q[6];
	nb[14] = q[5];
	nb[15] = q[9];
	nb[16] = q[6];
	nb[17] = q[11];
	nb[18] = q[7];
	nb[19] = q[5];
	nb[20] = q[6];
	nb[21] = q[11];
	nb[22] = q[12];
	nb[23] = q[8];
	nb[24] = q[6];
	nb[25] = q[0];
	nb[26] = q[1];
	nb[27] = q[6];
	nb[28] = q[5];
	nb[29] = q[8];
	nb[30] = q[2];
	nb[31] = q[3];
	nb[32] = q[4];
	res[0] = q[8];
	res[1] = q[6];
	res[2] = q[12];
	res[3] = q[2];
	res[4] = q[11];
	res[5] = q[4];
	res[6] = q[10];
	res[7] = q[9];
	// Leaf function
	_computeModule(0, 9, 44, 26, 0, 3, 0);
	acquire(9, anc, 33, nb);
	Recompute (res, 0, anc, 9, 44, 26){
		Toffoli( anc[8], q[3], q[4] );
		Toffoli( q[5], q[8], q[2] );
		Toffoli( q[1], anc[8], q[6] );
		CNOT( anc[0], anc[4] );
		Toffoli( q[0], anc[1], anc[0] );
		CNOT( q[8], q[6] );
		Toffoli( q[6], q[11], q[12] );
		CNOT( q[7], q[5] );
		Toffoli( q[9], q[6], q[11] );
		CNOT( q[5], anc[8] );
		CNOT( q[3], q[6] );
		Toffoli( q[7], q[9], anc[1] );
		CNOT( q[12], q[3] );
		CNOT( q[9], q[8] );
		CNOT( q[0], anc[4] );
		Toffoli( q[3], anc[7], anc[1] );
		Toffoli( q[9], q[6], q[8] );
		CNOT( anc[7], q[8] );
	}
	Restore {
		CNOT( anc[7], res[0] );
		CNOT( q[3], res[1] );
		CNOT( anc[3], res[2] );
		CNOT( q[0], res[3] );
		CNOT( q[1], res[4] );
		CNOT( anc[0], res[5] );
		CNOT( anc[2], res[6] );
		CNOT( anc[4], res[7] );
	}
	Unrecompute {
		CNOT( anc[7], q[8] );
		Toffoli( q[9], q[6], q[8] );
		Toffoli( q[3], anc[7], anc[1] );
		CNOT( q[0], anc[4] );
		CNOT( q[9], q[8] );
		CNOT( q[12], q[3] );
		Toffoli( q[7], q[9], anc[1] );
		CNOT( q[3], q[6] );
		CNOT( q[5], anc[8] );
		Toffoli( q[9], q[6], q[11] );
		CNOT( q[7], q[5] );
		Toffoli( q[6], q[11], q[12] );
		CNOT( q[8], q[6] );
		Toffoli( q[0], anc[1], anc[0] );
		CNOT( anc[0], anc[4] );
		Toffoli( q[1], anc[8], q[6] );
		Toffoli( q[5], q[8], q[2] );
		Toffoli( anc[8], q[3], q[4] );
	} Refree(anc, 9) {}
}
// Function 11 with degree 0
// nq: 39, na: 9, ng: 7
void func11(qbit **q, int n) {
printf("func11\n");
fflush(stderr);
	qbit *anc[9]; // ancilla
	qbit *nb[12]; // interacting bits
	qbit *res[15];
	nb[0] = q[31];
	nb[1] = q[10];
	nb[2] = q[12];
	nb[3] = q[1];
	nb[4] = q[25];
	nb[5] = q[18];
	nb[6] = q[11];
	nb[7] = q[30];
	nb[8] = q[12];
	nb[9] = q[35];
	nb[10] = q[17];
	nb[11] = q[3];
	res[0] = q[25];
	res[1] = q[9];
	res[2] = q[30];
	res[3] = q[7];
	res[4] = q[20];
	res[5] = q[12];
	res[6] = q[32];
	res[7] = q[35];
	res[8] = q[19];
	res[9] = q[37];
	res[10] = q[18];
	res[11] = q[28];
	res[12] = q[16];
	res[13] = q[33];
	res[14] = q[8];
	// Leaf function
	Compute (0, 9, 29, 22, 0, 1, 0) {
		acquire(9, anc, 12, nb);
		CNOT( anc[8], q[31] );
		CNOT( q[10], q[12] );
		Toffoli( q[1], q[25], q[18] );
		Toffoli( anc[5], q[11], q[30] );
		CNOT( q[12], anc[0] );
		Toffoli( q[35], anc[6], q[17] );
		CNOT( anc[1], q[3] );
	}
	Store {
		CNOT( q[7], res[0] );
		CNOT( q[10], res[1] );
		CNOT( q[24], res[2] );
		CNOT( anc[4], res[3] );
		CNOT( q[23], res[4] );
		CNOT( q[30], res[5] );
		CNOT( q[31], res[6] );
		CNOT( q[16], res[7] );
		CNOT( q[33], res[8] );
		CNOT( q[28], res[9] );
		CNOT( anc[1], res[10] );
		CNOT( q[19], res[11] );
		CNOT( q[3], res[12] );
		CNOT( q[34], res[13] );
		CNOT( q[21], res[14] );
	}
	Uncompute(res, 0, anc, 9, 29, 22){
		CNOT( anc[1], q[3] );
		Toffoli( q[35], anc[6], q[17] );
		CNOT( q[12], anc[0] );
		Toffoli( anc[5], q[11], q[30] );
		Toffoli( q[1], q[25], q[18] );
		CNOT( q[10], q[12] );
		CNOT( anc[8], q[31] );
	} Free(anc, 9) {}
}
// Function 11 with degree 0
// nq: 39, na: 9, ng: 7
void func11R(qbit **q, int n) {
printf("func11R\n");
fflush(stderr);
	qbit *anc[9]; // ancilla
	qbit *nb[12]; // interacting bits
	qbit *res[15];
	nb[0] = q[31];
	nb[1] = q[10];
	nb[2] = q[12];
	nb[3] = q[1];
	nb[4] = q[25];
	nb[5] = q[18];
	nb[6] = q[11];
	nb[7] = q[30];
	nb[8] = q[12];
	nb[9] = q[35];
	nb[10] = q[17];
	nb[11] = q[3];
	res[0] = q[25];
	res[1] = q[9];
	res[2] = q[30];
	res[3] = q[7];
	res[4] = q[20];
	res[5] = q[12];
	res[6] = q[32];
	res[7] = q[35];
	res[8] = q[19];
	res[9] = q[37];
	res[10] = q[18];
	res[11] = q[28];
	res[12] = q[16];
	res[13] = q[33];
	res[14] = q[8];
	// Leaf function
	_computeModule(0, 9, 29, 22, 0, 1, 0);
	acquire(9, anc, 12, nb);
	Recompute (res, 0, anc, 9, 29, 22){
		CNOT( anc[1], q[3] );
		Toffoli( q[35], anc[6], q[17] );
		CNOT( q[12], anc[0] );
		Toffoli( anc[5], q[11], q[30] );
		Toffoli( q[1], q[25], q[18] );
		CNOT( q[10], q[12] );
		CNOT( anc[8], q[31] );
	}
	Restore {
		CNOT( q[7], res[0] );
		CNOT( q[10], res[1] );
		CNOT( q[24], res[2] );
		CNOT( anc[4], res[3] );
		CNOT( q[23], res[4] );
		CNOT( q[30], res[5] );
		CNOT( q[31], res[6] );
		CNOT( q[16], res[7] );
		CNOT( q[33], res[8] );
		CNOT( q[28], res[9] );
		CNOT( anc[1], res[10] );
		CNOT( q[19], res[11] );
		CNOT( q[3], res[12] );
		CNOT( q[34], res[13] );
		CNOT( q[21], res[14] );
	}
	Unrecompute {
		CNOT( anc[8], q[31] );
		CNOT( q[10], q[12] );
		Toffoli( q[1], q[25], q[18] );
		Toffoli( anc[5], q[11], q[30] );
		CNOT( q[12], anc[0] );
		Toffoli( q[35], anc[6], q[17] );
		CNOT( anc[1], q[3] );
	} Refree(anc, 9) {}
}
// Function 10 with degree 0
// nq: 19, na: 14, ng: 20
void func10(qbit **q, int n) {
printf("func10\n");
fflush(stderr);
	qbit *anc[14]; // ancilla
	qbit *nb[34]; // interacting bits
	qbit *res[17];
	nb[0] = q[6];
	nb[1] = q[16];
	nb[2] = q[2];
	nb[3] = q[12];
	nb[4] = q[8];
	nb[5] = q[15];
	nb[6] = q[12];
	nb[7] = q[4];
	nb[8] = q[0];
	nb[9] = q[4];
	nb[10] = q[5];
	nb[11] = q[7];
	nb[12] = q[11];
	nb[13] = q[9];
	nb[14] = q[2];
	nb[15] = q[9];
	nb[16] = q[11];
	nb[17] = q[1];
	nb[18] = q[14];
	nb[19] = q[11];
	nb[20] = q[7];
	nb[21] = q[2];
	nb[22] = q[18];
	nb[23] = q[16];
	nb[24] = q[12];
	nb[25] = q[6];
	nb[26] = q[4];
	nb[27] = q[5];
	nb[28] = q[3];
	nb[29] = q[16];
	nb[30] = q[10];
	nb[31] = q[15];
	nb[32] = q[12];
	nb[33] = q[9];
	res[0] = q[0];
	res[1] = q[17];
	res[2] = q[9];
	res[3] = q[6];
	res[4] = q[15];
	res[5] = q[8];
	res[6] = q[2];
	res[7] = q[10];
	res[8] = q[12];
	res[9] = q[16];
	res[10] = q[5];
	res[11] = q[18];
	res[12] = q[11];
	res[13] = q[3];
	res[14] = q[1];
	res[15] = q[13];
	res[16] = q[4];
	// Leaf function
	Compute (0, 14, 57, 37, 0, 2, 0) {
		acquire(14, anc, 34, nb);
		Toffoli( q[6], q[16], anc[8] );
		Toffoli( q[2], q[12], anc[4] );
		Toffoli( q[8], q[15], q[12] );
		Toffoli( anc[9], q[4], anc[11] );
		CNOT( anc[10], q[0] );
		CNOT( q[4], q[5] );
		CNOT( q[7], q[11] );
		CNOT( anc[1], q[9] );
		Toffoli( q[2], q[9], q[11] );
		CNOT( anc[6], q[1] );
		Toffoli( anc[4], q[14], anc[2] );
		Toffoli( q[11], anc[2], q[7] );
		CNOT( q[2], anc[13] );
		CNOT( q[18], q[16] );
		CNOT( q[12], q[6] );
		Toffoli( q[4], anc[12], q[5] );
		CNOT( q[3], anc[12] );
		Toffoli( anc[1], q[16], q[10] );
		CNOT( anc[6], anc[13] );
		Toffoli( q[15], q[12], q[9] );
	}
	Store {
		CNOT( anc[3], res[0] );
		CNOT( q[3], res[1] );
		CNOT( q[6], res[2] );
		CNOT( anc[12], res[3] );
		CNOT( anc[8], res[4] );
		CNOT( anc[2], res[5] );
		CNOT( anc[9], res[6] );
		CNOT( anc[13], res[7] );
		CNOT( q[10], res[8] );
		CNOT( anc[0], res[9] );
		CNOT( anc[4], res[10] );
		CNOT( anc[1], res[11] );
		CNOT( q[7], res[12] );
		CNOT( anc[7], res[13] );
		CNOT( q[18], res[14] );
		CNOT( q[1], res[15] );
		CNOT( q[9], res[16] );
	}
	Uncompute(res, 0, anc, 14, 57, 37){
		Toffoli( q[15], q[12], q[9] );
		CNOT( anc[6], anc[13] );
		Toffoli( anc[1], q[16], q[10] );
		CNOT( q[3], anc[12] );
		Toffoli( q[4], anc[12], q[5] );
		CNOT( q[12], q[6] );
		CNOT( q[18], q[16] );
		CNOT( q[2], anc[13] );
		Toffoli( q[11], anc[2], q[7] );
		Toffoli( anc[4], q[14], anc[2] );
		CNOT( anc[6], q[1] );
		Toffoli( q[2], q[9], q[11] );
		CNOT( anc[1], q[9] );
		CNOT( q[7], q[11] );
		CNOT( q[4], q[5] );
		CNOT( anc[10], q[0] );
		Toffoli( anc[9], q[4], anc[11] );
		Toffoli( q[8], q[15], q[12] );
		Toffoli( q[2], q[12], anc[4] );
		Toffoli( q[6], q[16], anc[8] );
	} Free(anc, 14) {}
}
// Function 10 with degree 0
// nq: 19, na: 14, ng: 20
void func10R(qbit **q, int n) {
printf("func10R\n");
fflush(stderr);
	qbit *anc[14]; // ancilla
	qbit *nb[34]; // interacting bits
	qbit *res[17];
	nb[0] = q[6];
	nb[1] = q[16];
	nb[2] = q[2];
	nb[3] = q[12];
	nb[4] = q[8];
	nb[5] = q[15];
	nb[6] = q[12];
	nb[7] = q[4];
	nb[8] = q[0];
	nb[9] = q[4];
	nb[10] = q[5];
	nb[11] = q[7];
	nb[12] = q[11];
	nb[13] = q[9];
	nb[14] = q[2];
	nb[15] = q[9];
	nb[16] = q[11];
	nb[17] = q[1];
	nb[18] = q[14];
	nb[19] = q[11];
	nb[20] = q[7];
	nb[21] = q[2];
	nb[22] = q[18];
	nb[23] = q[16];
	nb[24] = q[12];
	nb[25] = q[6];
	nb[26] = q[4];
	nb[27] = q[5];
	nb[28] = q[3];
	nb[29] = q[16];
	nb[30] = q[10];
	nb[31] = q[15];
	nb[32] = q[12];
	nb[33] = q[9];
	res[0] = q[0];
	res[1] = q[17];
	res[2] = q[9];
	res[3] = q[6];
	res[4] = q[15];
	res[5] = q[8];
	res[6] = q[2];
	res[7] = q[10];
	res[8] = q[12];
	res[9] = q[16];
	res[10] = q[5];
	res[11] = q[18];
	res[12] = q[11];
	res[13] = q[3];
	res[14] = q[1];
	res[15] = q[13];
	res[16] = q[4];
	// Leaf function
	_computeModule(0, 14, 57, 37, 0, 2, 0);
	acquire(14, anc, 34, nb);
	Recompute (res, 0, anc, 14, 57, 37){
		Toffoli( q[15], q[12], q[9] );
		CNOT( anc[6], anc[13] );
		Toffoli( anc[1], q[16], q[10] );
		CNOT( q[3], anc[12] );
		Toffoli( q[4], anc[12], q[5] );
		CNOT( q[12], q[6] );
		CNOT( q[18], q[16] );
		CNOT( q[2], anc[13] );
		Toffoli( q[11], anc[2], q[7] );
		Toffoli( anc[4], q[14], anc[2] );
		CNOT( anc[6], q[1] );
		Toffoli( q[2], q[9], q[11] );
		CNOT( anc[1], q[9] );
		CNOT( q[7], q[11] );
		CNOT( q[4], q[5] );
		CNOT( anc[10], q[0] );
		Toffoli( anc[9], q[4], anc[11] );
		Toffoli( q[8], q[15], q[12] );
		Toffoli( q[2], q[12], anc[4] );
		Toffoli( q[6], q[16], anc[8] );
	}
	Restore {
		CNOT( anc[3], res[0] );
		CNOT( q[3], res[1] );
		CNOT( q[6], res[2] );
		CNOT( anc[12], res[3] );
		CNOT( anc[8], res[4] );
		CNOT( anc[2], res[5] );
		CNOT( anc[9], res[6] );
		CNOT( anc[13], res[7] );
		CNOT( q[10], res[8] );
		CNOT( anc[0], res[9] );
		CNOT( anc[4], res[10] );
		CNOT( anc[1], res[11] );
		CNOT( q[7], res[12] );
		CNOT( anc[7], res[13] );
		CNOT( q[18], res[14] );
		CNOT( q[1], res[15] );
		CNOT( q[9], res[16] );
	}
	Unrecompute {
		Toffoli( q[6], q[16], anc[8] );
		Toffoli( q[2], q[12], anc[4] );
		Toffoli( q[8], q[15], q[12] );
		Toffoli( anc[9], q[4], anc[11] );
		CNOT( anc[10], q[0] );
		CNOT( q[4], q[5] );
		CNOT( q[7], q[11] );
		CNOT( anc[1], q[9] );
		Toffoli( q[2], q[9], q[11] );
		CNOT( anc[6], q[1] );
		Toffoli( anc[4], q[14], anc[2] );
		Toffoli( q[11], anc[2], q[7] );
		CNOT( q[2], anc[13] );
		CNOT( q[18], q[16] );
		CNOT( q[12], q[6] );
		Toffoli( q[4], anc[12], q[5] );
		CNOT( q[3], anc[12] );
		Toffoli( anc[1], q[16], q[10] );
		CNOT( anc[6], anc[13] );
		Toffoli( q[15], q[12], q[9] );
	} Refree(anc, 14) {}
}
// Function 9 with degree 0
// nq: 19, na: 8, ng: 29
void func9(qbit **q, int n) {
printf("func9\n");
fflush(stderr);
	qbit *anc[8]; // ancilla
	qbit *nb[49]; // interacting bits
	qbit *res[4];
	nb[0] = q[6];
	nb[1] = q[12];
	nb[2] = q[11];
	nb[3] = q[2];
	nb[4] = q[12];
	nb[5] = q[2];
	nb[6] = q[5];
	nb[7] = q[7];
	nb[8] = q[4];
	nb[9] = q[0];
	nb[10] = q[12];
	nb[11] = q[4];
	nb[12] = q[5];
	nb[13] = q[12];
	nb[14] = q[3];
	nb[15] = q[14];
	nb[16] = q[7];
	nb[17] = q[8];
	nb[18] = q[7];
	nb[19] = q[14];
	nb[20] = q[3];
	nb[21] = q[8];
	nb[22] = q[12];
	nb[23] = q[1];
	nb[24] = q[3];
	nb[25] = q[16];
	nb[26] = q[3];
	nb[27] = q[11];
	nb[28] = q[1];
	nb[29] = q[3];
	nb[30] = q[7];
	nb[31] = q[14];
	nb[32] = q[16];
	nb[33] = q[8];
	nb[34] = q[9];
	nb[35] = q[6];
	nb[36] = q[3];
	nb[37] = q[10];
	nb[38] = q[8];
	nb[39] = q[4];
	nb[40] = q[14];
	nb[41] = q[3];
	nb[42] = q[18];
	nb[43] = q[15];
	nb[44] = q[18];
	nb[45] = q[17];
	nb[46] = q[12];
	nb[47] = q[8];
	nb[48] = q[10];
	res[0] = q[16];
	res[1] = q[7];
	res[2] = q[18];
	res[3] = q[3];
	// Leaf function
	Compute (0, 8, 62, 33, 0, 2, 0) {
		acquire(8, anc, 49, nb);
		CNOT( q[6], anc[1] );
		CNOT( q[12], q[11] );
		CNOT( anc[2], q[2] );
		CNOT( anc[3], q[12] );
		Toffoli( q[2], q[5], q[7] );
		CNOT( q[4], q[0] );
		CNOT( q[12], anc[1] );
		CNOT( q[4], anc[0] );
		Toffoli( anc[3], anc[6], q[5] );
		Toffoli( q[12], q[3], anc[1] );
		CNOT( q[14], q[7] );
		Toffoli( q[8], q[7], anc[7] );
		Toffoli( q[14], anc[2], anc[5] );
		Toffoli( q[3], q[8], q[12] );
		Toffoli( q[1], q[3], q[16] );
		Toffoli( q[3], q[11], q[1] );
		Toffoli( anc[6], anc[0], anc[2] );
		CNOT( q[3], q[7] );
		CNOT( anc[7], q[14] );
		CNOT( q[16], q[8] );
		CNOT( q[9], q[6] );
		CNOT( q[3], q[10] );
		CNOT( q[8], q[4] );
		Toffoli( q[14], q[3], q[18] );
		CNOT( anc[3], anc[5] );
		CNOT( q[15], anc[3] );
		CNOT( q[18], anc[7] );
		CNOT( q[17], q[12] );
		CNOT( q[8], q[10] );
	}
	Store {
		CNOT( q[8], res[0] );
		CNOT( q[15], res[1] );
		CNOT( q[5], res[2] );
		CNOT( anc[3], res[3] );
	}
	Uncompute(res, 0, anc, 8, 62, 33){
		CNOT( q[8], q[10] );
		CNOT( q[17], q[12] );
		CNOT( q[18], anc[7] );
		CNOT( q[15], anc[3] );
		CNOT( anc[3], anc[5] );
		Toffoli( q[14], q[3], q[18] );
		CNOT( q[8], q[4] );
		CNOT( q[3], q[10] );
		CNOT( q[9], q[6] );
		CNOT( q[16], q[8] );
		CNOT( anc[7], q[14] );
		CNOT( q[3], q[7] );
		Toffoli( anc[6], anc[0], anc[2] );
		Toffoli( q[3], q[11], q[1] );
		Toffoli( q[1], q[3], q[16] );
		Toffoli( q[3], q[8], q[12] );
		Toffoli( q[14], anc[2], anc[5] );
		Toffoli( q[8], q[7], anc[7] );
		CNOT( q[14], q[7] );
		Toffoli( q[12], q[3], anc[1] );
		Toffoli( anc[3], anc[6], q[5] );
		CNOT( q[4], anc[0] );
		CNOT( q[12], anc[1] );
		CNOT( q[4], q[0] );
		Toffoli( q[2], q[5], q[7] );
		CNOT( anc[3], q[12] );
		CNOT( anc[2], q[2] );
		CNOT( q[12], q[11] );
		CNOT( q[6], anc[1] );
	} Free(anc, 8) {}
}
// Function 9 with degree 0
// nq: 19, na: 8, ng: 29
void func9R(qbit **q, int n) {
printf("func9R\n");
fflush(stderr);
	qbit *anc[8]; // ancilla
	qbit *nb[49]; // interacting bits
	qbit *res[4];
	nb[0] = q[6];
	nb[1] = q[12];
	nb[2] = q[11];
	nb[3] = q[2];
	nb[4] = q[12];
	nb[5] = q[2];
	nb[6] = q[5];
	nb[7] = q[7];
	nb[8] = q[4];
	nb[9] = q[0];
	nb[10] = q[12];
	nb[11] = q[4];
	nb[12] = q[5];
	nb[13] = q[12];
	nb[14] = q[3];
	nb[15] = q[14];
	nb[16] = q[7];
	nb[17] = q[8];
	nb[18] = q[7];
	nb[19] = q[14];
	nb[20] = q[3];
	nb[21] = q[8];
	nb[22] = q[12];
	nb[23] = q[1];
	nb[24] = q[3];
	nb[25] = q[16];
	nb[26] = q[3];
	nb[27] = q[11];
	nb[28] = q[1];
	nb[29] = q[3];
	nb[30] = q[7];
	nb[31] = q[14];
	nb[32] = q[16];
	nb[33] = q[8];
	nb[34] = q[9];
	nb[35] = q[6];
	nb[36] = q[3];
	nb[37] = q[10];
	nb[38] = q[8];
	nb[39] = q[4];
	nb[40] = q[14];
	nb[41] = q[3];
	nb[42] = q[18];
	nb[43] = q[15];
	nb[44] = q[18];
	nb[45] = q[17];
	nb[46] = q[12];
	nb[47] = q[8];
	nb[48] = q[10];
	res[0] = q[16];
	res[1] = q[7];
	res[2] = q[18];
	res[3] = q[3];
	// Leaf function
	_computeModule(0, 8, 62, 33, 0, 2, 0);
	acquire(8, anc, 49, nb);
	Recompute (res, 0, anc, 8, 62, 33){
		CNOT( q[8], q[10] );
		CNOT( q[17], q[12] );
		CNOT( q[18], anc[7] );
		CNOT( q[15], anc[3] );
		CNOT( anc[3], anc[5] );
		Toffoli( q[14], q[3], q[18] );
		CNOT( q[8], q[4] );
		CNOT( q[3], q[10] );
		CNOT( q[9], q[6] );
		CNOT( q[16], q[8] );
		CNOT( anc[7], q[14] );
		CNOT( q[3], q[7] );
		Toffoli( anc[6], anc[0], anc[2] );
		Toffoli( q[3], q[11], q[1] );
		Toffoli( q[1], q[3], q[16] );
		Toffoli( q[3], q[8], q[12] );
		Toffoli( q[14], anc[2], anc[5] );
		Toffoli( q[8], q[7], anc[7] );
		CNOT( q[14], q[7] );
		Toffoli( q[12], q[3], anc[1] );
		Toffoli( anc[3], anc[6], q[5] );
		CNOT( q[4], anc[0] );
		CNOT( q[12], anc[1] );
		CNOT( q[4], q[0] );
		Toffoli( q[2], q[5], q[7] );
		CNOT( anc[3], q[12] );
		CNOT( anc[2], q[2] );
		CNOT( q[12], q[11] );
		CNOT( q[6], anc[1] );
	}
	Restore {
		CNOT( q[8], res[0] );
		CNOT( q[15], res[1] );
		CNOT( q[5], res[2] );
		CNOT( anc[3], res[3] );
	}
	Unrecompute {
		CNOT( q[6], anc[1] );
		CNOT( q[12], q[11] );
		CNOT( anc[2], q[2] );
		CNOT( anc[3], q[12] );
		Toffoli( q[2], q[5], q[7] );
		CNOT( q[4], q[0] );
		CNOT( q[12], anc[1] );
		CNOT( q[4], anc[0] );
		Toffoli( anc[3], anc[6], q[5] );
		Toffoli( q[12], q[3], anc[1] );
		CNOT( q[14], q[7] );
		Toffoli( q[8], q[7], anc[7] );
		Toffoli( q[14], anc[2], anc[5] );
		Toffoli( q[3], q[8], q[12] );
		Toffoli( q[1], q[3], q[16] );
		Toffoli( q[3], q[11], q[1] );
		Toffoli( anc[6], anc[0], anc[2] );
		CNOT( q[3], q[7] );
		CNOT( anc[7], q[14] );
		CNOT( q[16], q[8] );
		CNOT( q[9], q[6] );
		CNOT( q[3], q[10] );
		CNOT( q[8], q[4] );
		Toffoli( q[14], q[3], q[18] );
		CNOT( anc[3], anc[5] );
		CNOT( q[15], anc[3] );
		CNOT( q[18], anc[7] );
		CNOT( q[17], q[12] );
		CNOT( q[8], q[10] );
	} Refree(anc, 8) {}
}
// Function 8 with degree 0
// nq: 12, na: 8, ng: 15
void func8(qbit **q, int n) {
printf("func8\n");
fflush(stderr);
	qbit *anc[8]; // ancilla
	qbit *nb[18]; // interacting bits
	qbit *res[7];
	nb[0] = q[7];
	nb[1] = q[8];
	nb[2] = q[6];
	nb[3] = q[6];
	nb[4] = q[6];
	nb[5] = q[9];
	nb[6] = q[6];
	nb[7] = q[9];
	nb[8] = q[2];
	nb[9] = q[5];
	nb[10] = q[9];
	nb[11] = q[3];
	nb[12] = q[3];
	nb[13] = q[6];
	nb[14] = q[1];
	nb[15] = q[3];
	nb[16] = q[10];
	nb[17] = q[0];
	res[0] = q[6];
	res[1] = q[2];
	res[2] = q[0];
	res[3] = q[5];
	res[4] = q[8];
	res[5] = q[4];
	res[6] = q[3];
	// Leaf function
	Compute (0, 8, 37, 22, 0, 4, 0) {
		acquire(8, anc, 18, nb);
		CNOT( q[7], q[8] );
		Toffoli( anc[4], anc[7], q[6] );
		Toffoli( anc[7], anc[0], q[6] );
		CNOT( anc[5], anc[0] );
		Toffoli( anc[4], q[6], q[9] );
		Toffoli( q[6], anc[7], anc[5] );
		CNOT( anc[6], anc[3] );
		Toffoli( q[9], anc[4], anc[3] );
		CNOT( q[2], anc[4] );
		CNOT( anc[5], q[5] );
		Toffoli( q[9], q[3], anc[7] );
		Toffoli( q[3], anc[4], q[6] );
		Toffoli( q[1], q[3], anc[5] );
		CNOT( anc[3], anc[4] );
		Toffoli( q[10], anc[5], q[0] );
	}
	Store {
		CNOT( q[1], res[0] );
		CNOT( anc[3], res[1] );
		CNOT( q[8], res[2] );
		CNOT( q[11], res[3] );
		CNOT( anc[1], res[4] );
		CNOT( anc[2], res[5] );
		CNOT( q[9], res[6] );
	}
	Uncompute(res, 0, anc, 8, 37, 22){
		Toffoli( q[10], anc[5], q[0] );
		CNOT( anc[3], anc[4] );
		Toffoli( q[1], q[3], anc[5] );
		Toffoli( q[3], anc[4], q[6] );
		Toffoli( q[9], q[3], anc[7] );
		CNOT( anc[5], q[5] );
		CNOT( q[2], anc[4] );
		Toffoli( q[9], anc[4], anc[3] );
		CNOT( anc[6], anc[3] );
		Toffoli( q[6], anc[7], anc[5] );
		Toffoli( anc[4], q[6], q[9] );
		CNOT( anc[5], anc[0] );
		Toffoli( anc[7], anc[0], q[6] );
		Toffoli( anc[4], anc[7], q[6] );
		CNOT( q[7], q[8] );
	} Free(anc, 8) {}
}
// Function 8 with degree 0
// nq: 12, na: 8, ng: 15
void func8R(qbit **q, int n) {
printf("func8R\n");
fflush(stderr);
	qbit *anc[8]; // ancilla
	qbit *nb[18]; // interacting bits
	qbit *res[7];
	nb[0] = q[7];
	nb[1] = q[8];
	nb[2] = q[6];
	nb[3] = q[6];
	nb[4] = q[6];
	nb[5] = q[9];
	nb[6] = q[6];
	nb[7] = q[9];
	nb[8] = q[2];
	nb[9] = q[5];
	nb[10] = q[9];
	nb[11] = q[3];
	nb[12] = q[3];
	nb[13] = q[6];
	nb[14] = q[1];
	nb[15] = q[3];
	nb[16] = q[10];
	nb[17] = q[0];
	res[0] = q[6];
	res[1] = q[2];
	res[2] = q[0];
	res[3] = q[5];
	res[4] = q[8];
	res[5] = q[4];
	res[6] = q[3];
	// Leaf function
	_computeModule(0, 8, 37, 22, 0, 4, 0);
	acquire(8, anc, 18, nb);
	Recompute (res, 0, anc, 8, 37, 22){
		Toffoli( q[10], anc[5], q[0] );
		CNOT( anc[3], anc[4] );
		Toffoli( q[1], q[3], anc[5] );
		Toffoli( q[3], anc[4], q[6] );
		Toffoli( q[9], q[3], anc[7] );
		CNOT( anc[5], q[5] );
		CNOT( q[2], anc[4] );
		Toffoli( q[9], anc[4], anc[3] );
		CNOT( anc[6], anc[3] );
		Toffoli( q[6], anc[7], anc[5] );
		Toffoli( anc[4], q[6], q[9] );
		CNOT( anc[5], anc[0] );
		Toffoli( anc[7], anc[0], q[6] );
		Toffoli( anc[4], anc[7], q[6] );
		CNOT( q[7], q[8] );
	}
	Restore {
		CNOT( q[1], res[0] );
		CNOT( anc[3], res[1] );
		CNOT( q[8], res[2] );
		CNOT( q[11], res[3] );
		CNOT( anc[1], res[4] );
		CNOT( anc[2], res[5] );
		CNOT( q[9], res[6] );
	}
	Unrecompute {
		CNOT( q[7], q[8] );
		Toffoli( anc[4], anc[7], q[6] );
		Toffoli( anc[7], anc[0], q[6] );
		CNOT( anc[5], anc[0] );
		Toffoli( anc[4], q[6], q[9] );
		Toffoli( q[6], anc[7], anc[5] );
		CNOT( anc[6], anc[3] );
		Toffoli( q[9], anc[4], anc[3] );
		CNOT( q[2], anc[4] );
		CNOT( anc[5], q[5] );
		Toffoli( q[9], q[3], anc[7] );
		Toffoli( q[3], anc[4], q[6] );
		Toffoli( q[1], q[3], anc[5] );
		CNOT( anc[3], anc[4] );
		Toffoli( q[10], anc[5], q[0] );
	} Refree(anc, 8) {}
}
// Function 7 with degree 0
// nq: 12, na: 13, ng: 5
void func7(qbit **q, int n) {
printf("func7\n");
fflush(stderr);
	qbit *anc[13]; // ancilla
	qbit *nb[6]; // interacting bits
	qbit *res[10];
	nb[0] = q[7];
	nb[1] = q[0];
	nb[2] = q[0];
	nb[3] = q[9];
	nb[4] = q[2];
	nb[5] = q[3];
	res[0] = q[9];
	res[1] = q[8];
	res[2] = q[5];
	res[3] = q[4];
	res[4] = q[10];
	res[5] = q[3];
	res[6] = q[2];
	res[7] = q[0];
	res[8] = q[6];
	res[9] = q[7];
	// Leaf function
	Compute (0, 13, 20, 15, 0, 4, 0) {
		acquire(13, anc, 6, nb);
		CNOT( q[7], q[0] );
		CNOT( anc[12], q[0] );
		CNOT( q[9], anc[11] );
		Toffoli( q[2], anc[4], q[3] );
		Toffoli( anc[2], anc[4], anc[10] );
	}
	Store {
		CNOT( q[8], res[0] );
		CNOT( q[0], res[1] );
		CNOT( q[2], res[2] );
		CNOT( q[10], res[3] );
		CNOT( anc[9], res[4] );
		CNOT( anc[2], res[5] );
		CNOT( anc[3], res[6] );
		CNOT( q[1], res[7] );
		CNOT( q[7], res[8] );
		CNOT( q[9], res[9] );
	}
	Uncompute(res, 0, anc, 13, 20, 15){
		Toffoli( anc[2], anc[4], anc[10] );
		Toffoli( q[2], anc[4], q[3] );
		CNOT( q[9], anc[11] );
		CNOT( anc[12], q[0] );
		CNOT( q[7], q[0] );
	} Free(anc, 13) {}
}
// Function 7 with degree 0
// nq: 12, na: 13, ng: 5
void func7R(qbit **q, int n) {
printf("func7R\n");
fflush(stderr);
	qbit *anc[13]; // ancilla
	qbit *nb[6]; // interacting bits
	qbit *res[10];
	nb[0] = q[7];
	nb[1] = q[0];
	nb[2] = q[0];
	nb[3] = q[9];
	nb[4] = q[2];
	nb[5] = q[3];
	res[0] = q[9];
	res[1] = q[8];
	res[2] = q[5];
	res[3] = q[4];
	res[4] = q[10];
	res[5] = q[3];
	res[6] = q[2];
	res[7] = q[0];
	res[8] = q[6];
	res[9] = q[7];
	// Leaf function
	_computeModule(0, 13, 20, 15, 0, 4, 0);
	acquire(13, anc, 6, nb);
	Recompute (res, 0, anc, 13, 20, 15){
		Toffoli( anc[2], anc[4], anc[10] );
		Toffoli( q[2], anc[4], q[3] );
		CNOT( q[9], anc[11] );
		CNOT( anc[12], q[0] );
		CNOT( q[7], q[0] );
	}
	Restore {
		CNOT( q[8], res[0] );
		CNOT( q[0], res[1] );
		CNOT( q[2], res[2] );
		CNOT( q[10], res[3] );
		CNOT( anc[9], res[4] );
		CNOT( anc[2], res[5] );
		CNOT( anc[3], res[6] );
		CNOT( q[1], res[7] );
		CNOT( q[7], res[8] );
		CNOT( q[9], res[9] );
	}
	Unrecompute {
		CNOT( q[7], q[0] );
		CNOT( anc[12], q[0] );
		CNOT( q[9], anc[11] );
		Toffoli( q[2], anc[4], q[3] );
		Toffoli( anc[2], anc[4], anc[10] );
	} Refree(anc, 13) {}
}
// Function 6 with degree 0
// nq: 12, na: 4, ng: 22
void func6(qbit **q, int n) {
printf("func6\n");
fflush(stderr);
	qbit *anc[4]; // ancilla
	qbit *nb[45]; // interacting bits
	qbit *res[12];
	nb[0] = q[1];
	nb[1] = q[8];
	nb[2] = q[1];
	nb[3] = q[4];
	nb[4] = q[9];
	nb[5] = q[10];
	nb[6] = q[4];
	nb[7] = q[9];
	nb[8] = q[1];
	nb[9] = q[10];
	nb[10] = q[6];
	nb[11] = q[11];
	nb[12] = q[11];
	nb[13] = q[10];
	nb[14] = q[7];
	nb[15] = q[6];
	nb[16] = q[5];
	nb[17] = q[0];
	nb[18] = q[3];
	nb[19] = q[4];
	nb[20] = q[1];
	nb[21] = q[9];
	nb[22] = q[5];
	nb[23] = q[0];
	nb[24] = q[3];
	nb[25] = q[6];
	nb[26] = q[9];
	nb[27] = q[0];
	nb[28] = q[1];
	nb[29] = q[9];
	nb[30] = q[8];
	nb[31] = q[7];
	nb[32] = q[3];
	nb[33] = q[10];
	nb[34] = q[11];
	nb[35] = q[1];
	nb[36] = q[6];
	nb[37] = q[1];
	nb[38] = q[6];
	nb[39] = q[2];
	nb[40] = q[2];
	nb[41] = q[6];
	nb[42] = q[1];
	nb[43] = q[4];
	nb[44] = q[6];
	res[0] = q[9];
	res[1] = q[2];
	res[2] = q[4];
	res[3] = q[8];
	res[4] = q[6];
	res[5] = q[5];
	res[6] = q[0];
	res[7] = q[1];
	res[8] = q[10];
	res[9] = q[7];
	res[10] = q[11];
	res[11] = q[3];
	// Leaf function
	Compute (0, 4, 56, 34, 0, 4, 0) {
		acquire(4, anc, 45, nb);
		CNOT( anc[1], q[1] );
		Toffoli( q[8], q[1], q[4] );
		CNOT( q[9], anc[2] );
		CNOT( anc[2], q[10] );
		CNOT( q[4], anc[1] );
		Toffoli( q[9], q[1], q[10] );
		CNOT( q[6], q[11] );
		Toffoli( q[11], anc[0], q[10] );
		CNOT( q[7], q[6] );
		Toffoli( anc[2], q[5], q[0] );
		Toffoli( q[3], q[4], q[1] );
		Toffoli( q[9], q[5], q[0] );
		Toffoli( q[3], q[6], q[9] );
		Toffoli( q[0], q[1], q[9] );
		Toffoli( q[8], q[7], q[3] );
		Toffoli( anc[0], q[10], q[11] );
		Toffoli( q[1], anc[1], anc[3] );
		CNOT( anc[0], q[6] );
		CNOT( anc[1], q[1] );
		Toffoli( q[6], anc[2], q[2] );
		CNOT( q[2], q[6] );
		Toffoli( q[1], q[4], q[6] );
	}
	Store {
		CNOT( q[2], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( q[0], res[2] );
		CNOT( q[4], res[3] );
		CNOT( q[9], res[4] );
		CNOT( q[8], res[5] );
		CNOT( q[7], res[6] );
		CNOT( q[6], res[7] );
		CNOT( q[1], res[8] );
		CNOT( q[10], res[9] );
		CNOT( anc[1], res[10] );
		CNOT( anc[3], res[11] );
	}
	Uncompute(res, 0, anc, 4, 56, 34){
		Toffoli( q[1], q[4], q[6] );
		CNOT( q[2], q[6] );
		Toffoli( q[6], anc[2], q[2] );
		CNOT( anc[1], q[1] );
		CNOT( anc[0], q[6] );
		Toffoli( q[1], anc[1], anc[3] );
		Toffoli( anc[0], q[10], q[11] );
		Toffoli( q[8], q[7], q[3] );
		Toffoli( q[0], q[1], q[9] );
		Toffoli( q[3], q[6], q[9] );
		Toffoli( q[9], q[5], q[0] );
		Toffoli( q[3], q[4], q[1] );
		Toffoli( anc[2], q[5], q[0] );
		CNOT( q[7], q[6] );
		Toffoli( q[11], anc[0], q[10] );
		CNOT( q[6], q[11] );
		Toffoli( q[9], q[1], q[10] );
		CNOT( q[4], anc[1] );
		CNOT( anc[2], q[10] );
		CNOT( q[9], anc[2] );
		Toffoli( q[8], q[1], q[4] );
		CNOT( anc[1], q[1] );
	} Free(anc, 4) {}
}
// Function 6 with degree 0
// nq: 12, na: 4, ng: 22
void func6R(qbit **q, int n) {
printf("func6R\n");
fflush(stderr);
	qbit *anc[4]; // ancilla
	qbit *nb[45]; // interacting bits
	qbit *res[12];
	nb[0] = q[1];
	nb[1] = q[8];
	nb[2] = q[1];
	nb[3] = q[4];
	nb[4] = q[9];
	nb[5] = q[10];
	nb[6] = q[4];
	nb[7] = q[9];
	nb[8] = q[1];
	nb[9] = q[10];
	nb[10] = q[6];
	nb[11] = q[11];
	nb[12] = q[11];
	nb[13] = q[10];
	nb[14] = q[7];
	nb[15] = q[6];
	nb[16] = q[5];
	nb[17] = q[0];
	nb[18] = q[3];
	nb[19] = q[4];
	nb[20] = q[1];
	nb[21] = q[9];
	nb[22] = q[5];
	nb[23] = q[0];
	nb[24] = q[3];
	nb[25] = q[6];
	nb[26] = q[9];
	nb[27] = q[0];
	nb[28] = q[1];
	nb[29] = q[9];
	nb[30] = q[8];
	nb[31] = q[7];
	nb[32] = q[3];
	nb[33] = q[10];
	nb[34] = q[11];
	nb[35] = q[1];
	nb[36] = q[6];
	nb[37] = q[1];
	nb[38] = q[6];
	nb[39] = q[2];
	nb[40] = q[2];
	nb[41] = q[6];
	nb[42] = q[1];
	nb[43] = q[4];
	nb[44] = q[6];
	res[0] = q[9];
	res[1] = q[2];
	res[2] = q[4];
	res[3] = q[8];
	res[4] = q[6];
	res[5] = q[5];
	res[6] = q[0];
	res[7] = q[1];
	res[8] = q[10];
	res[9] = q[7];
	res[10] = q[11];
	res[11] = q[3];
	// Leaf function
	_computeModule(0, 4, 56, 34, 0, 4, 0);
	acquire(4, anc, 45, nb);
	Recompute (res, 0, anc, 4, 56, 34){
		Toffoli( q[1], q[4], q[6] );
		CNOT( q[2], q[6] );
		Toffoli( q[6], anc[2], q[2] );
		CNOT( anc[1], q[1] );
		CNOT( anc[0], q[6] );
		Toffoli( q[1], anc[1], anc[3] );
		Toffoli( anc[0], q[10], q[11] );
		Toffoli( q[8], q[7], q[3] );
		Toffoli( q[0], q[1], q[9] );
		Toffoli( q[3], q[6], q[9] );
		Toffoli( q[9], q[5], q[0] );
		Toffoli( q[3], q[4], q[1] );
		Toffoli( anc[2], q[5], q[0] );
		CNOT( q[7], q[6] );
		Toffoli( q[11], anc[0], q[10] );
		CNOT( q[6], q[11] );
		Toffoli( q[9], q[1], q[10] );
		CNOT( q[4], anc[1] );
		CNOT( anc[2], q[10] );
		CNOT( q[9], anc[2] );
		Toffoli( q[8], q[1], q[4] );
		CNOT( anc[1], q[1] );
	}
	Restore {
		CNOT( q[2], res[0] );
		CNOT( anc[0], res[1] );
		CNOT( q[0], res[2] );
		CNOT( q[4], res[3] );
		CNOT( q[9], res[4] );
		CNOT( q[8], res[5] );
		CNOT( q[7], res[6] );
		CNOT( q[6], res[7] );
		CNOT( q[1], res[8] );
		CNOT( q[10], res[9] );
		CNOT( anc[1], res[10] );
		CNOT( anc[3], res[11] );
	}
	Unrecompute {
		CNOT( anc[1], q[1] );
		Toffoli( q[8], q[1], q[4] );
		CNOT( q[9], anc[2] );
		CNOT( anc[2], q[10] );
		CNOT( q[4], anc[1] );
		Toffoli( q[9], q[1], q[10] );
		CNOT( q[6], q[11] );
		Toffoli( q[11], anc[0], q[10] );
		CNOT( q[7], q[6] );
		Toffoli( anc[2], q[5], q[0] );
		Toffoli( q[3], q[4], q[1] );
		Toffoli( q[9], q[5], q[0] );
		Toffoli( q[3], q[6], q[9] );
		Toffoli( q[0], q[1], q[9] );
		Toffoli( q[8], q[7], q[3] );
		Toffoli( anc[0], q[10], q[11] );
		Toffoli( q[1], anc[1], anc[3] );
		CNOT( anc[0], q[6] );
		CNOT( anc[1], q[1] );
		Toffoli( q[6], anc[2], q[2] );
		CNOT( q[2], q[6] );
		Toffoli( q[1], q[4], q[6] );
	} Refree(anc, 4) {}
}
// Function 5 with degree 4
// nq: 12, na: 3, ng: 18
void func5(qbit **q, int n) {
printf("func5\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[39]; // interacting bits
	qbit *res[7];
	qbit *nq0[3];
	qbit *nq1[3];
	qbit *nq2[3];
	qbit *nq3[3];
	nb[0] = q[0];
	nb[1] = q[2];
	nb[2] = q[10];
	nb[3] = q[9];
	nb[4] = q[8];
	nb[5] = q[10];
	nb[6] = q[9];
	nb[7] = q[6];
	nb[8] = q[8];
	nb[9] = q[1];
	nb[10] = q[9];
	nb[11] = q[3];
	nb[12] = q[0];
	nb[13] = q[4];
	nb[14] = q[5];
	nb[15] = q[9];
	nb[16] = q[4];
	nb[17] = q[3];
	nb[18] = q[9];
	nb[19] = q[11];
	nb[20] = q[1];
	nb[21] = q[5];
	nb[22] = q[9];
	nb[23] = q[2];
	nb[24] = q[6];
	nb[25] = q[2];
	nb[26] = q[5];
	nb[27] = q[2];
	nb[28] = q[4];
	nb[29] = q[0];
	nb[30] = q[8];
	nb[31] = q[2];
	nb[32] = q[7];
	nb[33] = q[9];
	nb[34] = q[9];
	nb[35] = q[6];
	nb[36] = q[1];
	nb[37] = q[7];
	nb[38] = q[9];
	res[0] = q[3];
	res[1] = q[10];
	res[2] = q[11];
	res[3] = q[8];
	res[4] = q[5];
	res[5] = q[4];
	res[6] = q[7];
	// Non-leaf function
	Compute (0, 3, 43, 25, 4, 4, 0){
		acquire(3, anc, 39, nb);
	nq0[0] = q[6];
	nq0[1] = q[5];
	nq0[2] = anc[2];
	nq1[0] = q[3];
	nq1[1] = q[0];
	nq1[2] = anc[1];
	nq2[0] = q[7];
	nq2[1] = q[1];
	nq2[2] = q[8];
	nq3[0] = q[10];
	nq3[1] = q[9];
	nq3[2] = q[11];
		CNOT( q[9], anc[1] );
		Toffoli( q[2], q[4], q[0] );
		Toffoli( q[8], q[10], q[9] );
		Toffoli( q[1], q[9], q[3] );
		CNOT( q[2], q[6] );
		CNOT( q[1], q[5] );
		Toffoli( anc[2], q[0], q[2] );
		Toffoli( q[8], q[2], q[7] );
		func18(nq3, 3);
		CNOT( q[10], q[9] );
		CNOT( q[2], q[5] );
		Toffoli( q[0], q[4], q[5] );
		Toffoli( anc[2], anc[0], q[9] );
		func17(nq2, 3);
		Toffoli( q[6], q[8], anc[0] );
		Toffoli( anc[0], q[9], q[4] );
		func16(nq1, 3);
		CNOT( q[7], q[9] );
		func15(nq0, 3);
		CNOT( q[9], anc[0] );
		CNOT( q[6], q[1] );
		Toffoli( q[3], q[9], q[11] );
	}
	Store {
		CNOT( anc[2], res[0] );
		CNOT( q[11], res[1] );
		CNOT( q[9], res[2] );
		CNOT( q[7], res[3] );
		CNOT( anc[1], res[4] );
		CNOT( q[0], res[5] );
		CNOT( q[2], res[6] );
	}
	Uncompute(res, 0, anc, 3, 43, 25){
		Toffoli( q[3], q[9], q[11] );
		CNOT( q[6], q[1] );
		CNOT( q[9], anc[0] );
		func15R(nq0, 3);
		CNOT( q[7], q[9] );
		func16R(nq1, 3);
		Toffoli( anc[0], q[9], q[4] );
		Toffoli( q[6], q[8], anc[0] );
		func17R(nq2, 3);
		Toffoli( anc[2], anc[0], q[9] );
		Toffoli( q[0], q[4], q[5] );
		CNOT( q[2], q[5] );
		CNOT( q[10], q[9] );
		func18R(nq3, 3);
		Toffoli( q[8], q[2], q[7] );
		Toffoli( anc[2], q[0], q[2] );
		CNOT( q[1], q[5] );
		CNOT( q[2], q[6] );
		Toffoli( q[1], q[9], q[3] );
		Toffoli( q[8], q[10], q[9] );
		Toffoli( q[2], q[4], q[0] );
		CNOT( q[9], anc[1] );
	} Free(anc, 3) {}
}
// Function 5 with degree 4
// nq: 12, na: 3, ng: 18
void func5R(qbit **q, int n) {
printf("func5R\n");
fflush(stderr);
	qbit *anc[3]; // ancilla
	qbit *nb[39]; // interacting bits
	qbit *res[7];
	qbit *nq0[3];
	qbit *nq1[3];
	qbit *nq2[3];
	qbit *nq3[3];
	nb[0] = q[0];
	nb[1] = q[2];
	nb[2] = q[10];
	nb[3] = q[9];
	nb[4] = q[8];
	nb[5] = q[10];
	nb[6] = q[9];
	nb[7] = q[6];
	nb[8] = q[8];
	nb[9] = q[1];
	nb[10] = q[9];
	nb[11] = q[3];
	nb[12] = q[0];
	nb[13] = q[4];
	nb[14] = q[5];
	nb[15] = q[9];
	nb[16] = q[4];
	nb[17] = q[3];
	nb[18] = q[9];
	nb[19] = q[11];
	nb[20] = q[1];
	nb[21] = q[5];
	nb[22] = q[9];
	nb[23] = q[2];
	nb[24] = q[6];
	nb[25] = q[2];
	nb[26] = q[5];
	nb[27] = q[2];
	nb[28] = q[4];
	nb[29] = q[0];
	nb[30] = q[8];
	nb[31] = q[2];
	nb[32] = q[7];
	nb[33] = q[9];
	nb[34] = q[9];
	nb[35] = q[6];
	nb[36] = q[1];
	nb[37] = q[7];
	nb[38] = q[9];
	res[0] = q[3];
	res[1] = q[10];
	res[2] = q[11];
	res[3] = q[8];
	res[4] = q[5];
	res[5] = q[4];
	res[6] = q[7];
	// Non-leaf function
	_computeModule(0, 3, 43, 25, 4, 4, 0);
	acquire(3, anc, 39, nb);
	nq0[0] = q[6];
	nq0[1] = q[5];
	nq0[2] = anc[2];
	nq1[0] = q[3];
	nq1[1] = q[0];
	nq1[2] = anc[1];
	nq2[0] = q[7];
	nq2[1] = q[1];
	nq2[2] = q[8];
	nq3[0] = q[10];
	nq3[1] = q[9];
	nq3[2] = q[11];
	Recompute(res, 0, anc, 3, 43, 25){
		CNOT( q[9], anc[1] );
		Toffoli( q[2], q[4], q[0] );
		Toffoli( q[8], q[10], q[9] );
		Toffoli( q[1], q[9], q[3] );
		CNOT( q[2], q[6] );
		CNOT( q[1], q[5] );
		Toffoli( anc[2], q[0], q[2] );
		Toffoli( q[8], q[2], q[7] );
		func18(nq3, 3);
		CNOT( q[10], q[9] );
		CNOT( q[2], q[5] );
		Toffoli( q[0], q[4], q[5] );
		Toffoli( anc[2], anc[0], q[9] );
		func17(nq2, 3);
		Toffoli( q[6], q[8], anc[0] );
		Toffoli( anc[0], q[9], q[4] );
		func16(nq1, 3);
		CNOT( q[7], q[9] );
		func15(nq0, 3);
		CNOT( q[9], anc[0] );
		CNOT( q[6], q[1] );
		Toffoli( q[3], q[9], q[11] );
	}
	Restore {
		CNOT( anc[2], res[0] );
		CNOT( q[11], res[1] );
		CNOT( q[9], res[2] );
		CNOT( q[7], res[3] );
		CNOT( anc[1], res[4] );
		CNOT( q[0], res[5] );
		CNOT( q[2], res[6] );
	}
	Unrecompute {
		Toffoli( q[3], q[9], q[11] );
		CNOT( q[6], q[1] );
		CNOT( q[9], anc[0] );
		func15R(nq0, 3);
		CNOT( q[7], q[9] );
		func16R(nq1, 3);
		Toffoli( anc[0], q[9], q[4] );
		Toffoli( q[6], q[8], anc[0] );
		func17R(nq2, 3);
		Toffoli( anc[2], anc[0], q[9] );
		Toffoli( q[0], q[4], q[5] );
		CNOT( q[2], q[5] );
		CNOT( q[10], q[9] );
		func18R(nq3, 3);
		Toffoli( q[8], q[2], q[7] );
		Toffoli( anc[2], q[0], q[2] );
		CNOT( q[1], q[5] );
		CNOT( q[2], q[6] );
		Toffoli( q[1], q[9], q[3] );
		Toffoli( q[8], q[10], q[9] );
		Toffoli( q[2], q[4], q[0] );
		CNOT( q[9], anc[1] );
	} Refree(anc, 3) {}
}
// Function 4 with degree 3
// nq: 32, na: 9, ng: 26
void func4(qbit **q, int n) {
printf("func4\n");
fflush(stderr);
	qbit *anc[9]; // ancilla
	qbit *nb[54]; // interacting bits
	qbit *res[13];
	qbit *nq0[13];
	qbit *nq1[13];
	qbit *nq2[13];
	nb[0] = q[2];
	nb[1] = q[27];
	nb[2] = q[31];
	nb[3] = q[25];
	nb[4] = q[15];
	nb[5] = q[3];
	nb[6] = q[17];
	nb[7] = q[4];
	nb[8] = q[13];
	nb[9] = q[24];
	nb[10] = q[3];
	nb[11] = q[25];
	nb[12] = q[25];
	nb[13] = q[2];
	nb[14] = q[24];
	nb[15] = q[24];
	nb[16] = q[22];
	nb[17] = q[13];
	nb[18] = q[28];
	nb[19] = q[20];
	nb[20] = q[13];
	nb[21] = q[10];
	nb[22] = q[30];
	nb[23] = q[5];
	nb[24] = q[31];
	nb[25] = q[27];
	nb[26] = q[4];
	nb[27] = q[22];
	nb[28] = q[17];
	nb[29] = q[12];
	nb[30] = q[29];
	nb[31] = q[15];
	nb[32] = q[16];
	nb[33] = q[25];
	nb[34] = q[12];
	nb[35] = q[29];
	nb[36] = q[19];
	nb[37] = q[3];
	nb[38] = q[22];
	nb[39] = q[7];
	nb[40] = q[6];
	nb[41] = q[3];
	nb[42] = q[0];
	nb[43] = q[4];
	nb[44] = q[18];
	nb[45] = q[25];
	nb[46] = q[10];
	nb[47] = q[2];
	nb[48] = q[11];
	nb[49] = q[9];
	nb[50] = q[24];
	nb[51] = q[18];
	nb[52] = q[15];
	nb[53] = q[1];
	res[0] = q[7];
	res[1] = q[5];
	res[2] = q[8];
	res[3] = q[31];
	res[4] = q[26];
	res[5] = q[18];
	res[6] = q[25];
	res[7] = q[30];
	res[8] = q[1];
	res[9] = q[15];
	res[10] = q[11];
	res[11] = q[0];
	res[12] = q[4];
	// Non-leaf function
	Compute (0, 9, 65, 39, 3, 128, 0){
		acquire(9, anc, 54, nb);
	nq0[0] = q[24];
	nq0[1] = anc[2];
	nq0[2] = q[19];
	nq0[3] = q[3];
	nq0[4] = q[18];
	nq0[5] = q[14];
	nq0[6] = anc[5];
	nq0[7] = q[10];
	nq0[8] = q[15];
	nq0[9] = q[29];
	nq0[10] = q[27];
	nq0[11] = q[9];
	nq0[12] = anc[4];
	nq1[0] = q[21];
	nq1[1] = q[20];
	nq1[2] = anc[8];
	nq1[3] = anc[0];
	nq1[4] = anc[6];
	nq1[5] = q[12];
	nq1[6] = q[13];
	nq1[7] = q[8];
	nq1[8] = q[6];
	nq1[9] = q[7];
	nq1[10] = anc[3];
	nq1[11] = anc[7];
	nq1[12] = anc[1];
	nq2[0] = q[5];
	nq2[1] = q[11];
	nq2[2] = q[17];
	nq2[3] = q[25];
	nq2[4] = q[4];
	nq2[5] = q[30];
	nq2[6] = q[26];
	nq2[7] = q[23];
	nq2[8] = q[2];
	nq2[9] = q[22];
	nq2[10] = q[0];
	nq2[11] = q[16];
	nq2[12] = q[31];
		Toffoli( q[9], q[24], q[18] );
		Toffoli( q[25], q[12], q[29] );
		Toffoli( anc[4], anc[8], q[22] );
		CNOT( q[4], q[13] );
		Toffoli( q[22], q[13], q[28] );
		Toffoli( anc[2], q[24], q[3] );
		CNOT( q[30], q[5] );
		Toffoli( q[7], anc[5], q[6] );
		CNOT( q[25], anc[6] );
		CNOT( q[27], q[31] );
		Toffoli( q[10], q[2], q[11] );
		Toffoli( q[2], anc[4], anc[3] );
		CNOT( q[17], q[12] );
		func14(nq2, 13);
		Toffoli( q[25], q[2], q[24] );
		func13(nq1, 13);
		func12(nq0, 13);
		Toffoli( anc[0], q[27], q[4] );
		CNOT( anc[5], q[24] );
		CNOT( q[15], q[1] );
		Toffoli( q[18], q[25], anc[5] );
		Toffoli( q[20], q[13], q[10] );
		Toffoli( q[3], q[0], q[4] );
		CNOT( anc[7], q[16] );
		Toffoli( q[19], q[3], q[22] );
		CNOT( q[31], anc[4] );
		Toffoli( q[25], q[15], q[3] );
		CNOT( q[29], q[15] );
		Toffoli( anc[0], anc[4], q[17] );
	}
	Store {
		CNOT( q[14], res[0] );
		CNOT( q[26], res[1] );
		CNOT( q[11], res[2] );
		CNOT( anc[6], res[3] );
		CNOT( q[29], res[4] );
		CNOT( anc[7], res[5] );
		CNOT( q[7], res[6] );
		CNOT( q[21], res[7] );
		CNOT( q[28], res[8] );
		CNOT( q[16], res[9] );
		CNOT( q[2], res[10] );
		CNOT( anc[1], res[11] );
		CNOT( q[31], res[12] );
	}
	Uncompute(res, 0, anc, 9, 65, 39){
		Toffoli( anc[0], anc[4], q[17] );
		CNOT( q[29], q[15] );
		Toffoli( q[25], q[15], q[3] );
		CNOT( q[31], anc[4] );
		Toffoli( q[19], q[3], q[22] );
		CNOT( anc[7], q[16] );
		Toffoli( q[3], q[0], q[4] );
		Toffoli( q[20], q[13], q[10] );
		Toffoli( q[18], q[25], anc[5] );
		CNOT( q[15], q[1] );
		CNOT( anc[5], q[24] );
		Toffoli( anc[0], q[27], q[4] );
		func12R(nq0, 13);
		func13R(nq1, 13);
		Toffoli( q[25], q[2], q[24] );
		func14R(nq2, 13);
		CNOT( q[17], q[12] );
		Toffoli( q[2], anc[4], anc[3] );
		Toffoli( q[10], q[2], q[11] );
		CNOT( q[27], q[31] );
		CNOT( q[25], anc[6] );
		Toffoli( q[7], anc[5], q[6] );
		CNOT( q[30], q[5] );
		Toffoli( anc[2], q[24], q[3] );
		Toffoli( q[22], q[13], q[28] );
		CNOT( q[4], q[13] );
		Toffoli( anc[4], anc[8], q[22] );
		Toffoli( q[25], q[12], q[29] );
		Toffoli( q[9], q[24], q[18] );
	} Free(anc, 9) {}
}
// Function 4 with degree 3
// nq: 32, na: 9, ng: 26
void func4R(qbit **q, int n) {
printf("func4R\n");
fflush(stderr);
	qbit *anc[9]; // ancilla
	qbit *nb[54]; // interacting bits
	qbit *res[13];
	qbit *nq0[13];
	qbit *nq1[13];
	qbit *nq2[13];
	nb[0] = q[2];
	nb[1] = q[27];
	nb[2] = q[31];
	nb[3] = q[25];
	nb[4] = q[15];
	nb[5] = q[3];
	nb[6] = q[17];
	nb[7] = q[4];
	nb[8] = q[13];
	nb[9] = q[24];
	nb[10] = q[3];
	nb[11] = q[25];
	nb[12] = q[25];
	nb[13] = q[2];
	nb[14] = q[24];
	nb[15] = q[24];
	nb[16] = q[22];
	nb[17] = q[13];
	nb[18] = q[28];
	nb[19] = q[20];
	nb[20] = q[13];
	nb[21] = q[10];
	nb[22] = q[30];
	nb[23] = q[5];
	nb[24] = q[31];
	nb[25] = q[27];
	nb[26] = q[4];
	nb[27] = q[22];
	nb[28] = q[17];
	nb[29] = q[12];
	nb[30] = q[29];
	nb[31] = q[15];
	nb[32] = q[16];
	nb[33] = q[25];
	nb[34] = q[12];
	nb[35] = q[29];
	nb[36] = q[19];
	nb[37] = q[3];
	nb[38] = q[22];
	nb[39] = q[7];
	nb[40] = q[6];
	nb[41] = q[3];
	nb[42] = q[0];
	nb[43] = q[4];
	nb[44] = q[18];
	nb[45] = q[25];
	nb[46] = q[10];
	nb[47] = q[2];
	nb[48] = q[11];
	nb[49] = q[9];
	nb[50] = q[24];
	nb[51] = q[18];
	nb[52] = q[15];
	nb[53] = q[1];
	res[0] = q[7];
	res[1] = q[5];
	res[2] = q[8];
	res[3] = q[31];
	res[4] = q[26];
	res[5] = q[18];
	res[6] = q[25];
	res[7] = q[30];
	res[8] = q[1];
	res[9] = q[15];
	res[10] = q[11];
	res[11] = q[0];
	res[12] = q[4];
	// Non-leaf function
	_computeModule(0, 9, 65, 39, 3, 128, 0);
	acquire(9, anc, 54, nb);
	nq0[0] = q[24];
	nq0[1] = anc[2];
	nq0[2] = q[19];
	nq0[3] = q[3];
	nq0[4] = q[18];
	nq0[5] = q[14];
	nq0[6] = anc[5];
	nq0[7] = q[10];
	nq0[8] = q[15];
	nq0[9] = q[29];
	nq0[10] = q[27];
	nq0[11] = q[9];
	nq0[12] = anc[4];
	nq1[0] = q[21];
	nq1[1] = q[20];
	nq1[2] = anc[8];
	nq1[3] = anc[0];
	nq1[4] = anc[6];
	nq1[5] = q[12];
	nq1[6] = q[13];
	nq1[7] = q[8];
	nq1[8] = q[6];
	nq1[9] = q[7];
	nq1[10] = anc[3];
	nq1[11] = anc[7];
	nq1[12] = anc[1];
	nq2[0] = q[5];
	nq2[1] = q[11];
	nq2[2] = q[17];
	nq2[3] = q[25];
	nq2[4] = q[4];
	nq2[5] = q[30];
	nq2[6] = q[26];
	nq2[7] = q[23];
	nq2[8] = q[2];
	nq2[9] = q[22];
	nq2[10] = q[0];
	nq2[11] = q[16];
	nq2[12] = q[31];
	Recompute(res, 0, anc, 9, 65, 39){
		Toffoli( q[9], q[24], q[18] );
		Toffoli( q[25], q[12], q[29] );
		Toffoli( anc[4], anc[8], q[22] );
		CNOT( q[4], q[13] );
		Toffoli( q[22], q[13], q[28] );
		Toffoli( anc[2], q[24], q[3] );
		CNOT( q[30], q[5] );
		Toffoli( q[7], anc[5], q[6] );
		CNOT( q[25], anc[6] );
		CNOT( q[27], q[31] );
		Toffoli( q[10], q[2], q[11] );
		Toffoli( q[2], anc[4], anc[3] );
		CNOT( q[17], q[12] );
		func14(nq2, 13);
		Toffoli( q[25], q[2], q[24] );
		func13(nq1, 13);
		func12(nq0, 13);
		Toffoli( anc[0], q[27], q[4] );
		CNOT( anc[5], q[24] );
		CNOT( q[15], q[1] );
		Toffoli( q[18], q[25], anc[5] );
		Toffoli( q[20], q[13], q[10] );
		Toffoli( q[3], q[0], q[4] );
		CNOT( anc[7], q[16] );
		Toffoli( q[19], q[3], q[22] );
		CNOT( q[31], anc[4] );
		Toffoli( q[25], q[15], q[3] );
		CNOT( q[29], q[15] );
		Toffoli( anc[0], anc[4], q[17] );
	}
	Restore {
		CNOT( q[14], res[0] );
		CNOT( q[26], res[1] );
		CNOT( q[11], res[2] );
		CNOT( anc[6], res[3] );
		CNOT( q[29], res[4] );
		CNOT( anc[7], res[5] );
		CNOT( q[7], res[6] );
		CNOT( q[21], res[7] );
		CNOT( q[28], res[8] );
		CNOT( q[16], res[9] );
		CNOT( q[2], res[10] );
		CNOT( anc[1], res[11] );
		CNOT( q[31], res[12] );
	}
	Unrecompute {
		Toffoli( anc[0], anc[4], q[17] );
		CNOT( q[29], q[15] );
		Toffoli( q[25], q[15], q[3] );
		CNOT( q[31], anc[4] );
		Toffoli( q[19], q[3], q[22] );
		CNOT( anc[7], q[16] );
		Toffoli( q[3], q[0], q[4] );
		Toffoli( q[20], q[13], q[10] );
		Toffoli( q[18], q[25], anc[5] );
		CNOT( q[15], q[1] );
		CNOT( anc[5], q[24] );
		Toffoli( anc[0], q[27], q[4] );
		func12R(nq0, 13);
		func13R(nq1, 13);
		Toffoli( q[25], q[2], q[24] );
		func14R(nq2, 13);
		CNOT( q[17], q[12] );
		Toffoli( q[2], anc[4], anc[3] );
		Toffoli( q[10], q[2], q[11] );
		CNOT( q[27], q[31] );
		CNOT( q[25], anc[6] );
		Toffoli( q[7], anc[5], q[6] );
		CNOT( q[30], q[5] );
		Toffoli( anc[2], q[24], q[3] );
		Toffoli( q[22], q[13], q[28] );
		CNOT( q[4], q[13] );
		Toffoli( anc[4], anc[8], q[22] );
		Toffoli( q[25], q[12], q[29] );
		Toffoli( q[9], q[24], q[18] );
	} Refree(anc, 9) {}
}
// Function 3 with degree 1
// nq: 32, na: 7, ng: 22
void func3(qbit **q, int n) {
printf("func3\n");
fflush(stderr);
	qbit *anc[7]; // ancilla
	qbit *nb[48]; // interacting bits
	qbit *res[20];
	qbit *nq0[39];
	nb[0] = q[7];
	nb[1] = q[15];
	nb[2] = q[29];
	nb[3] = q[2];
	nb[4] = q[1];
	nb[5] = q[4];
	nb[6] = q[3];
	nb[7] = q[31];
	nb[8] = q[30];
	nb[9] = q[7];
	nb[10] = q[25];
	nb[11] = q[6];
	nb[12] = q[10];
	nb[13] = q[9];
	nb[14] = q[15];
	nb[15] = q[28];
	nb[16] = q[30];
	nb[17] = q[11];
	nb[18] = q[24];
	nb[19] = q[29];
	nb[20] = q[19];
	nb[21] = q[14];
	nb[22] = q[16];
	nb[23] = q[29];
	nb[24] = q[31];
	nb[25] = q[8];
	nb[26] = q[16];
	nb[27] = q[1];
	nb[28] = q[7];
	nb[29] = q[17];
	nb[30] = q[10];
	nb[31] = q[29];
	nb[32] = q[12];
	nb[33] = q[27];
	nb[34] = q[9];
	nb[35] = q[19];
	nb[36] = q[24];
	nb[37] = q[15];
	nb[38] = q[22];
	nb[39] = q[20];
	nb[40] = q[30];
	nb[41] = q[17];
	nb[42] = q[0];
	nb[43] = q[15];
	nb[44] = q[25];
	nb[45] = q[31];
	nb[46] = q[10];
	nb[47] = q[15];
	res[0] = q[30];
	res[1] = q[15];
	res[2] = q[0];
	res[3] = q[27];
	res[4] = q[26];
	res[5] = q[2];
	res[6] = q[4];
	res[7] = q[9];
	res[8] = q[25];
	res[9] = q[1];
	res[10] = q[17];
	res[11] = q[29];
	res[12] = q[6];
	res[13] = q[3];
	res[14] = q[5];
	res[15] = q[20];
	res[16] = q[18];
	res[17] = q[19];
	res[18] = q[31];
	res[19] = q[10];
	// Non-leaf function
	Compute (0, 7, 64, 42, 1, 128, 0){
		acquire(7, anc, 48, nb);
	nq0[0] = q[19];
	nq0[1] = anc[6];
	nq0[2] = q[5];
	nq0[3] = anc[0];
	nq0[4] = q[30];
	nq0[5] = q[1];
	nq0[6] = q[21];
	nq0[7] = q[9];
	nq0[8] = q[31];
	nq0[9] = q[22];
	nq0[10] = q[18];
	nq0[11] = q[8];
	nq0[12] = q[3];
	nq0[13] = q[15];
	nq0[14] = q[28];
	nq0[15] = anc[1];
	nq0[16] = q[16];
	nq0[17] = anc[5];
	nq0[18] = anc[4];
	nq0[19] = q[27];
	nq0[20] = q[11];
	nq0[21] = q[23];
	nq0[22] = q[0];
	nq0[23] = q[20];
	nq0[24] = q[10];
	nq0[25] = q[14];
	nq0[26] = q[2];
	nq0[27] = q[7];
	nq0[28] = anc[2];
	nq0[29] = q[6];
	nq0[30] = anc[3];
	nq0[31] = q[24];
	nq0[32] = q[13];
	nq0[33] = q[4];
	nq0[34] = q[26];
	nq0[35] = q[25];
	nq0[36] = q[29];
	nq0[37] = q[17];
	nq0[38] = q[12];
		CNOT( q[10], q[15] );
		Toffoli( q[30], q[17], q[0] );
		Toffoli( q[29], q[12], q[27] );
		CNOT( q[7], q[25] );
		Toffoli( q[15], q[25], q[31] );
		Toffoli( q[7], q[15], q[29] );
		Toffoli( q[19], q[14], q[16] );
		CNOT( anc[2], q[30] );
		CNOT( q[7], q[17] );
		CNOT( q[1], anc[1] );
		Toffoli( q[6], q[10], q[9] );
		Toffoli( q[10], anc[1], anc[4] );
		Toffoli( q[28], anc[2], q[30] );
		CNOT( q[29], q[31] );
		CNOT( q[8], q[16] );
		Toffoli( q[4], q[3], q[31] );
		CNOT( anc[6], q[15] );
		Toffoli( q[11], q[24], q[29] );
		Toffoli( q[22], anc[0], q[20] );
		Toffoli( anc[1], q[2], q[1] );
		func11(nq0, 39);
		Toffoli( q[9], q[19], anc[4] );
		Toffoli( anc[2], q[24], q[15] );
	}
	Store {
		CNOT( q[2], res[0] );
		CNOT( q[19], res[1] );
		CNOT( anc[6], res[2] );
		CNOT( q[21], res[3] );
		CNOT( q[1], res[4] );
		CNOT( q[14], res[5] );
		CNOT( q[20], res[6] );
		CNOT( anc[4], res[7] );
		CNOT( anc[1], res[8] );
		CNOT( q[16], res[9] );
		CNOT( q[22], res[10] );
		CNOT( q[8], res[11] );
		CNOT( anc[2], res[12] );
		CNOT( anc[3], res[13] );
		CNOT( q[11], res[14] );
		CNOT( q[29], res[15] );
		CNOT( q[4], res[16] );
		CNOT( q[25], res[17] );
		CNOT( q[24], res[18] );
		CNOT( q[23], res[19] );
	}
	Uncompute(res, 0, anc, 7, 64, 42){
		Toffoli( anc[2], q[24], q[15] );
		Toffoli( q[9], q[19], anc[4] );
		func11R(nq0, 39);
		Toffoli( anc[1], q[2], q[1] );
		Toffoli( q[22], anc[0], q[20] );
		Toffoli( q[11], q[24], q[29] );
		CNOT( anc[6], q[15] );
		Toffoli( q[4], q[3], q[31] );
		CNOT( q[8], q[16] );
		CNOT( q[29], q[31] );
		Toffoli( q[28], anc[2], q[30] );
		Toffoli( q[10], anc[1], anc[4] );
		Toffoli( q[6], q[10], q[9] );
		CNOT( q[1], anc[1] );
		CNOT( q[7], q[17] );
		CNOT( anc[2], q[30] );
		Toffoli( q[19], q[14], q[16] );
		Toffoli( q[7], q[15], q[29] );
		Toffoli( q[15], q[25], q[31] );
		CNOT( q[7], q[25] );
		Toffoli( q[29], q[12], q[27] );
		Toffoli( q[30], q[17], q[0] );
		CNOT( q[10], q[15] );
	} Free(anc, 7) {}
}
// Function 3 with degree 1
// nq: 32, na: 7, ng: 22
void func3R(qbit **q, int n) {
printf("func3R\n");
fflush(stderr);
	qbit *anc[7]; // ancilla
	qbit *nb[48]; // interacting bits
	qbit *res[20];
	qbit *nq0[39];
	nb[0] = q[7];
	nb[1] = q[15];
	nb[2] = q[29];
	nb[3] = q[2];
	nb[4] = q[1];
	nb[5] = q[4];
	nb[6] = q[3];
	nb[7] = q[31];
	nb[8] = q[30];
	nb[9] = q[7];
	nb[10] = q[25];
	nb[11] = q[6];
	nb[12] = q[10];
	nb[13] = q[9];
	nb[14] = q[15];
	nb[15] = q[28];
	nb[16] = q[30];
	nb[17] = q[11];
	nb[18] = q[24];
	nb[19] = q[29];
	nb[20] = q[19];
	nb[21] = q[14];
	nb[22] = q[16];
	nb[23] = q[29];
	nb[24] = q[31];
	nb[25] = q[8];
	nb[26] = q[16];
	nb[27] = q[1];
	nb[28] = q[7];
	nb[29] = q[17];
	nb[30] = q[10];
	nb[31] = q[29];
	nb[32] = q[12];
	nb[33] = q[27];
	nb[34] = q[9];
	nb[35] = q[19];
	nb[36] = q[24];
	nb[37] = q[15];
	nb[38] = q[22];
	nb[39] = q[20];
	nb[40] = q[30];
	nb[41] = q[17];
	nb[42] = q[0];
	nb[43] = q[15];
	nb[44] = q[25];
	nb[45] = q[31];
	nb[46] = q[10];
	nb[47] = q[15];
	res[0] = q[30];
	res[1] = q[15];
	res[2] = q[0];
	res[3] = q[27];
	res[4] = q[26];
	res[5] = q[2];
	res[6] = q[4];
	res[7] = q[9];
	res[8] = q[25];
	res[9] = q[1];
	res[10] = q[17];
	res[11] = q[29];
	res[12] = q[6];
	res[13] = q[3];
	res[14] = q[5];
	res[15] = q[20];
	res[16] = q[18];
	res[17] = q[19];
	res[18] = q[31];
	res[19] = q[10];
	// Non-leaf function
	_computeModule(0, 7, 64, 42, 1, 128, 0);
	acquire(7, anc, 48, nb);
	nq0[0] = q[19];
	nq0[1] = anc[6];
	nq0[2] = q[5];
	nq0[3] = anc[0];
	nq0[4] = q[30];
	nq0[5] = q[1];
	nq0[6] = q[21];
	nq0[7] = q[9];
	nq0[8] = q[31];
	nq0[9] = q[22];
	nq0[10] = q[18];
	nq0[11] = q[8];
	nq0[12] = q[3];
	nq0[13] = q[15];
	nq0[14] = q[28];
	nq0[15] = anc[1];
	nq0[16] = q[16];
	nq0[17] = anc[5];
	nq0[18] = anc[4];
	nq0[19] = q[27];
	nq0[20] = q[11];
	nq0[21] = q[23];
	nq0[22] = q[0];
	nq0[23] = q[20];
	nq0[24] = q[10];
	nq0[25] = q[14];
	nq0[26] = q[2];
	nq0[27] = q[7];
	nq0[28] = anc[2];
	nq0[29] = q[6];
	nq0[30] = anc[3];
	nq0[31] = q[24];
	nq0[32] = q[13];
	nq0[33] = q[4];
	nq0[34] = q[26];
	nq0[35] = q[25];
	nq0[36] = q[29];
	nq0[37] = q[17];
	nq0[38] = q[12];
	Recompute(res, 0, anc, 7, 64, 42){
		CNOT( q[10], q[15] );
		Toffoli( q[30], q[17], q[0] );
		Toffoli( q[29], q[12], q[27] );
		CNOT( q[7], q[25] );
		Toffoli( q[15], q[25], q[31] );
		Toffoli( q[7], q[15], q[29] );
		Toffoli( q[19], q[14], q[16] );
		CNOT( anc[2], q[30] );
		CNOT( q[7], q[17] );
		CNOT( q[1], anc[1] );
		Toffoli( q[6], q[10], q[9] );
		Toffoli( q[10], anc[1], anc[4] );
		Toffoli( q[28], anc[2], q[30] );
		CNOT( q[29], q[31] );
		CNOT( q[8], q[16] );
		Toffoli( q[4], q[3], q[31] );
		CNOT( anc[6], q[15] );
		Toffoli( q[11], q[24], q[29] );
		Toffoli( q[22], anc[0], q[20] );
		Toffoli( anc[1], q[2], q[1] );
		func11(nq0, 39);
		Toffoli( q[9], q[19], anc[4] );
		Toffoli( anc[2], q[24], q[15] );
	}
	Restore {
		CNOT( q[2], res[0] );
		CNOT( q[19], res[1] );
		CNOT( anc[6], res[2] );
		CNOT( q[21], res[3] );
		CNOT( q[1], res[4] );
		CNOT( q[14], res[5] );
		CNOT( q[20], res[6] );
		CNOT( anc[4], res[7] );
		CNOT( anc[1], res[8] );
		CNOT( q[16], res[9] );
		CNOT( q[22], res[10] );
		CNOT( q[8], res[11] );
		CNOT( anc[2], res[12] );
		CNOT( anc[3], res[13] );
		CNOT( q[11], res[14] );
		CNOT( q[29], res[15] );
		CNOT( q[4], res[16] );
		CNOT( q[25], res[17] );
		CNOT( q[24], res[18] );
		CNOT( q[23], res[19] );
	}
	Unrecompute {
		Toffoli( anc[2], q[24], q[15] );
		Toffoli( q[9], q[19], anc[4] );
		func11R(nq0, 39);
		Toffoli( anc[1], q[2], q[1] );
		Toffoli( q[22], anc[0], q[20] );
		Toffoli( q[11], q[24], q[29] );
		CNOT( anc[6], q[15] );
		Toffoli( q[4], q[3], q[31] );
		CNOT( q[8], q[16] );
		CNOT( q[29], q[31] );
		Toffoli( q[28], anc[2], q[30] );
		Toffoli( q[10], anc[1], anc[4] );
		Toffoli( q[6], q[10], q[9] );
		CNOT( q[1], anc[1] );
		CNOT( q[7], q[17] );
		CNOT( anc[2], q[30] );
		Toffoli( q[19], q[14], q[16] );
		Toffoli( q[7], q[15], q[29] );
		Toffoli( q[15], q[25], q[31] );
		CNOT( q[7], q[25] );
		Toffoli( q[29], q[12], q[27] );
		Toffoli( q[30], q[17], q[0] );
		CNOT( q[10], q[15] );
	} Refree(anc, 7) {}
}
// Function 2 with degree 2
// nq: 32, na: 7, ng: 28
void func2(qbit **q, int n) {
printf("func2\n");
fflush(stderr);
	qbit *anc[7]; // ancilla
	qbit *nb[53]; // interacting bits
	qbit *res[30];
	qbit *nq0[19];
	qbit *nq1[19];
	nb[0] = q[18];
	nb[1] = q[8];
	nb[2] = q[29];
	nb[3] = q[12];
	nb[4] = q[12];
	nb[5] = q[19];
	nb[6] = q[22];
	nb[7] = q[7];
	nb[8] = q[2];
	nb[9] = q[20];
	nb[10] = q[7];
	nb[11] = q[2];
	nb[12] = q[7];
	nb[13] = q[11];
	nb[14] = q[14];
	nb[15] = q[12];
	nb[16] = q[2];
	nb[17] = q[21];
	nb[18] = q[16];
	nb[19] = q[20];
	nb[20] = q[29];
	nb[21] = q[16];
	nb[22] = q[8];
	nb[23] = q[4];
	nb[24] = q[19];
	nb[25] = q[12];
	nb[26] = q[0];
	nb[27] = q[15];
	nb[28] = q[1];
	nb[29] = q[19];
	nb[30] = q[27];
	nb[31] = q[2];
	nb[32] = q[5];
	nb[33] = q[10];
	nb[34] = q[14];
	nb[35] = q[1];
	nb[36] = q[20];
	nb[37] = q[31];
	nb[38] = q[26];
	nb[39] = q[30];
	nb[40] = q[10];
	nb[41] = q[11];
	nb[42] = q[8];
	nb[43] = q[8];
	nb[44] = q[17];
	nb[45] = q[15];
	nb[46] = q[27];
	nb[47] = q[2];
	nb[48] = q[28];
	nb[49] = q[30];
	nb[50] = q[12];
	nb[51] = q[7];
	nb[52] = q[10];
	res[0] = q[6];
	res[1] = q[14];
	res[2] = q[7];
	res[3] = q[21];
	res[4] = q[20];
	res[5] = q[8];
	res[6] = q[28];
	res[7] = q[10];
	res[8] = q[29];
	res[9] = q[4];
	res[10] = q[2];
	res[11] = q[1];
	res[12] = q[17];
	res[13] = q[12];
	res[14] = q[30];
	res[15] = q[9];
	res[16] = q[18];
	res[17] = q[23];
	res[18] = q[13];
	res[19] = q[0];
	res[20] = q[25];
	res[21] = q[16];
	res[22] = q[27];
	res[23] = q[26];
	res[24] = q[31];
	res[25] = q[3];
	res[26] = q[15];
	res[27] = q[24];
	res[28] = q[11];
	res[29] = q[19];
	// Non-leaf function
	Compute (0, 7, 86, 58, 2, 128, 0){
		acquire(7, anc, 53, nb);
	nq0[0] = q[30];
	nq0[1] = q[31];
	nq0[2] = q[5];
	nq0[3] = anc[5];
	nq0[4] = q[26];
	nq0[5] = q[16];
	nq0[6] = q[27];
	nq0[7] = q[0];
	nq0[8] = q[13];
	nq0[9] = q[28];
	nq0[10] = q[14];
	nq0[11] = q[10];
	nq0[12] = q[9];
	nq0[13] = anc[1];
	nq0[14] = q[25];
	nq0[15] = q[23];
	nq0[16] = q[15];
	nq0[17] = q[20];
	nq0[18] = q[4];
	nq1[0] = q[19];
	nq1[1] = q[24];
	nq1[2] = q[29];
	nq1[3] = anc[4];
	nq1[4] = anc[2];
	nq1[5] = q[21];
	nq1[6] = q[17];
	nq1[7] = q[12];
	nq1[8] = q[8];
	nq1[9] = q[22];
	nq1[10] = q[3];
	nq1[11] = q[7];
	nq1[12] = q[1];
	nq1[13] = anc[0];
	nq1[14] = q[6];
	nq1[15] = q[2];
	nq1[16] = q[18];
	nq1[17] = q[11];
	nq1[18] = anc[6];
		CNOT( q[20], q[29] );
		CNOT( anc[5], q[8] );
		CNOT( anc[6], q[28] );
		CNOT( q[2], q[5] );
		Toffoli( q[26], anc[3], anc[5] );
		Toffoli( anc[4], q[1], anc[6] );
		CNOT( q[16], anc[6] );
		Toffoli( q[18], q[8], anc[2] );
		Toffoli( q[2], q[20], q[7] );
		CNOT( q[27], q[2] );
		CNOT( q[14], q[12] );
		CNOT( q[15], q[1] );
		Toffoli( anc[1], q[10], q[14] );
		Toffoli( anc[3], q[19], q[27] );
		CNOT( q[8], q[4] );
		CNOT( q[29], q[12] );
		func9(nq0, 19);
		CNOT( q[20], q[31] );
		Toffoli( anc[0], q[16], anc[5] );
		CNOT( q[2], q[21] );
		func10(nq1, 19);
		CNOT( q[30], q[12] );
		CNOT( anc[6], q[12] );
		Toffoli( q[2], q[7], q[11] );
		CNOT( q[7], q[10] );
		Toffoli( q[19], q[22], q[7] );
		Toffoli( q[30], q[10], q[11] );
		CNOT( anc[0], anc[2] );
		Toffoli( q[8], q[17], q[15] );
		Toffoli( q[19], q[12], q[0] );
	}
	Store {
		CNOT( anc[5], res[0] );
		CNOT( q[10], res[1] );
		CNOT( q[16], res[2] );
		CNOT( q[9], res[3] );
		CNOT( q[15], res[4] );
		CNOT( q[17], res[5] );
		CNOT( q[8], res[6] );
		CNOT( q[11], res[7] );
		CNOT( q[12], res[8] );
		CNOT( anc[2], res[9] );
		CNOT( q[5], res[10] );
		CNOT( q[3], res[11] );
		CNOT( q[7], res[12] );
		CNOT( q[23], res[13] );
		CNOT( anc[2], res[14] );
		CNOT( q[29], res[15] );
		CNOT( q[1], res[16] );
		CNOT( q[13], res[17] );
		CNOT( anc[4], res[18] );
		CNOT( anc[0], res[19] );
		CNOT( q[6], res[20] );
		CNOT( q[14], res[21] );
		CNOT( q[26], res[22] );
		CNOT( q[21], res[23] );
		CNOT( q[2], res[24] );
		CNOT( q[0], res[25] );
		CNOT( q[27], res[26] );
		CNOT( q[28], res[27] );
		CNOT( q[19], res[28] );
		CNOT( q[25], res[29] );
	}
	Uncompute(res, 0, anc, 7, 86, 58){
		Toffoli( q[19], q[12], q[0] );
		Toffoli( q[8], q[17], q[15] );
		CNOT( anc[0], anc[2] );
		Toffoli( q[30], q[10], q[11] );
		Toffoli( q[19], q[22], q[7] );
		CNOT( q[7], q[10] );
		Toffoli( q[2], q[7], q[11] );
		CNOT( anc[6], q[12] );
		CNOT( q[30], q[12] );
		func10R(nq1, 19);
		CNOT( q[2], q[21] );
		Toffoli( anc[0], q[16], anc[5] );
		CNOT( q[20], q[31] );
		func9R(nq0, 19);
		CNOT( q[29], q[12] );
		CNOT( q[8], q[4] );
		Toffoli( anc[3], q[19], q[27] );
		Toffoli( anc[1], q[10], q[14] );
		CNOT( q[15], q[1] );
		CNOT( q[14], q[12] );
		CNOT( q[27], q[2] );
		Toffoli( q[2], q[20], q[7] );
		Toffoli( q[18], q[8], anc[2] );
		CNOT( q[16], anc[6] );
		Toffoli( anc[4], q[1], anc[6] );
		Toffoli( q[26], anc[3], anc[5] );
		CNOT( q[2], q[5] );
		CNOT( anc[6], q[28] );
		CNOT( anc[5], q[8] );
		CNOT( q[20], q[29] );
	} Free(anc, 7) {}
}
// Function 2 with degree 2
// nq: 32, na: 7, ng: 28
void func2R(qbit **q, int n) {
printf("func2R\n");
fflush(stderr);
	qbit *anc[7]; // ancilla
	qbit *nb[53]; // interacting bits
	qbit *res[30];
	qbit *nq0[19];
	qbit *nq1[19];
	nb[0] = q[18];
	nb[1] = q[8];
	nb[2] = q[29];
	nb[3] = q[12];
	nb[4] = q[12];
	nb[5] = q[19];
	nb[6] = q[22];
	nb[7] = q[7];
	nb[8] = q[2];
	nb[9] = q[20];
	nb[10] = q[7];
	nb[11] = q[2];
	nb[12] = q[7];
	nb[13] = q[11];
	nb[14] = q[14];
	nb[15] = q[12];
	nb[16] = q[2];
	nb[17] = q[21];
	nb[18] = q[16];
	nb[19] = q[20];
	nb[20] = q[29];
	nb[21] = q[16];
	nb[22] = q[8];
	nb[23] = q[4];
	nb[24] = q[19];
	nb[25] = q[12];
	nb[26] = q[0];
	nb[27] = q[15];
	nb[28] = q[1];
	nb[29] = q[19];
	nb[30] = q[27];
	nb[31] = q[2];
	nb[32] = q[5];
	nb[33] = q[10];
	nb[34] = q[14];
	nb[35] = q[1];
	nb[36] = q[20];
	nb[37] = q[31];
	nb[38] = q[26];
	nb[39] = q[30];
	nb[40] = q[10];
	nb[41] = q[11];
	nb[42] = q[8];
	nb[43] = q[8];
	nb[44] = q[17];
	nb[45] = q[15];
	nb[46] = q[27];
	nb[47] = q[2];
	nb[48] = q[28];
	nb[49] = q[30];
	nb[50] = q[12];
	nb[51] = q[7];
	nb[52] = q[10];
	res[0] = q[6];
	res[1] = q[14];
	res[2] = q[7];
	res[3] = q[21];
	res[4] = q[20];
	res[5] = q[8];
	res[6] = q[28];
	res[7] = q[10];
	res[8] = q[29];
	res[9] = q[4];
	res[10] = q[2];
	res[11] = q[1];
	res[12] = q[17];
	res[13] = q[12];
	res[14] = q[30];
	res[15] = q[9];
	res[16] = q[18];
	res[17] = q[23];
	res[18] = q[13];
	res[19] = q[0];
	res[20] = q[25];
	res[21] = q[16];
	res[22] = q[27];
	res[23] = q[26];
	res[24] = q[31];
	res[25] = q[3];
	res[26] = q[15];
	res[27] = q[24];
	res[28] = q[11];
	res[29] = q[19];
	// Non-leaf function
	_computeModule(0, 7, 86, 58, 2, 128, 0);
	acquire(7, anc, 53, nb);
	nq0[0] = q[30];
	nq0[1] = q[31];
	nq0[2] = q[5];
	nq0[3] = anc[5];
	nq0[4] = q[26];
	nq0[5] = q[16];
	nq0[6] = q[27];
	nq0[7] = q[0];
	nq0[8] = q[13];
	nq0[9] = q[28];
	nq0[10] = q[14];
	nq0[11] = q[10];
	nq0[12] = q[9];
	nq0[13] = anc[1];
	nq0[14] = q[25];
	nq0[15] = q[23];
	nq0[16] = q[15];
	nq0[17] = q[20];
	nq0[18] = q[4];
	nq1[0] = q[19];
	nq1[1] = q[24];
	nq1[2] = q[29];
	nq1[3] = anc[4];
	nq1[4] = anc[2];
	nq1[5] = q[21];
	nq1[6] = q[17];
	nq1[7] = q[12];
	nq1[8] = q[8];
	nq1[9] = q[22];
	nq1[10] = q[3];
	nq1[11] = q[7];
	nq1[12] = q[1];
	nq1[13] = anc[0];
	nq1[14] = q[6];
	nq1[15] = q[2];
	nq1[16] = q[18];
	nq1[17] = q[11];
	nq1[18] = anc[6];
	Recompute(res, 0, anc, 7, 86, 58){
		CNOT( q[20], q[29] );
		CNOT( anc[5], q[8] );
		CNOT( anc[6], q[28] );
		CNOT( q[2], q[5] );
		Toffoli( q[26], anc[3], anc[5] );
		Toffoli( anc[4], q[1], anc[6] );
		CNOT( q[16], anc[6] );
		Toffoli( q[18], q[8], anc[2] );
		Toffoli( q[2], q[20], q[7] );
		CNOT( q[27], q[2] );
		CNOT( q[14], q[12] );
		CNOT( q[15], q[1] );
		Toffoli( anc[1], q[10], q[14] );
		Toffoli( anc[3], q[19], q[27] );
		CNOT( q[8], q[4] );
		CNOT( q[29], q[12] );
		func9(nq0, 19);
		CNOT( q[20], q[31] );
		Toffoli( anc[0], q[16], anc[5] );
		CNOT( q[2], q[21] );
		func10(nq1, 19);
		CNOT( q[30], q[12] );
		CNOT( anc[6], q[12] );
		Toffoli( q[2], q[7], q[11] );
		CNOT( q[7], q[10] );
		Toffoli( q[19], q[22], q[7] );
		Toffoli( q[30], q[10], q[11] );
		CNOT( anc[0], anc[2] );
		Toffoli( q[8], q[17], q[15] );
		Toffoli( q[19], q[12], q[0] );
	}
	Restore {
		CNOT( anc[5], res[0] );
		CNOT( q[10], res[1] );
		CNOT( q[16], res[2] );
		CNOT( q[9], res[3] );
		CNOT( q[15], res[4] );
		CNOT( q[17], res[5] );
		CNOT( q[8], res[6] );
		CNOT( q[11], res[7] );
		CNOT( q[12], res[8] );
		CNOT( anc[2], res[9] );
		CNOT( q[5], res[10] );
		CNOT( q[3], res[11] );
		CNOT( q[7], res[12] );
		CNOT( q[23], res[13] );
		CNOT( anc[2], res[14] );
		CNOT( q[29], res[15] );
		CNOT( q[1], res[16] );
		CNOT( q[13], res[17] );
		CNOT( anc[4], res[18] );
		CNOT( anc[0], res[19] );
		CNOT( q[6], res[20] );
		CNOT( q[14], res[21] );
		CNOT( q[26], res[22] );
		CNOT( q[21], res[23] );
		CNOT( q[2], res[24] );
		CNOT( q[0], res[25] );
		CNOT( q[27], res[26] );
		CNOT( q[28], res[27] );
		CNOT( q[19], res[28] );
		CNOT( q[25], res[29] );
	}
	Unrecompute {
		Toffoli( q[19], q[12], q[0] );
		Toffoli( q[8], q[17], q[15] );
		CNOT( anc[0], anc[2] );
		Toffoli( q[30], q[10], q[11] );
		Toffoli( q[19], q[22], q[7] );
		CNOT( q[7], q[10] );
		Toffoli( q[2], q[7], q[11] );
		CNOT( anc[6], q[12] );
		CNOT( q[30], q[12] );
		func10R(nq1, 19);
		CNOT( q[2], q[21] );
		Toffoli( anc[0], q[16], anc[5] );
		CNOT( q[20], q[31] );
		func9R(nq0, 19);
		CNOT( q[29], q[12] );
		CNOT( q[8], q[4] );
		Toffoli( anc[3], q[19], q[27] );
		Toffoli( anc[1], q[10], q[14] );
		CNOT( q[15], q[1] );
		CNOT( q[14], q[12] );
		CNOT( q[27], q[2] );
		Toffoli( q[2], q[20], q[7] );
		Toffoli( q[18], q[8], anc[2] );
		CNOT( q[16], anc[6] );
		Toffoli( anc[4], q[1], anc[6] );
		Toffoli( q[26], anc[3], anc[5] );
		CNOT( q[2], q[5] );
		CNOT( anc[6], q[28] );
		CNOT( anc[5], q[8] );
		CNOT( q[20], q[29] );
	} Refree(anc, 7) {}
}
// Function 1 with degree 4
// nq: 32, na: 16, ng: 10
void func1(qbit **q, int n) {
printf("func1\n");
fflush(stderr);
	qbit *anc[16]; // ancilla
	qbit *nb[17]; // interacting bits
	qbit *res[16];
	qbit *nq0[12];
	qbit *nq1[12];
	qbit *nq2[12];
	qbit *nq3[12];
	nb[0] = q[5];
	nb[1] = q[30];
	nb[2] = q[7];
	nb[3] = q[18];
	nb[4] = q[13];
	nb[5] = q[18];
	nb[6] = q[29];
	nb[7] = q[28];
	nb[8] = q[0];
	nb[9] = q[21];
	nb[10] = q[10];
	nb[11] = q[24];
	nb[12] = q[29];
	nb[13] = q[12];
	nb[14] = q[3];
	nb[15] = q[12];
	nb[16] = q[7];
	res[0] = q[14];
	res[1] = q[0];
	res[2] = q[4];
	res[3] = q[7];
	res[4] = q[12];
	res[5] = q[26];
	res[6] = q[3];
	res[7] = q[19];
	res[8] = q[10];
	res[9] = q[1];
	res[10] = q[2];
	res[11] = q[5];
	res[12] = q[18];
	res[13] = q[13];
	res[14] = q[27];
	res[15] = q[31];
	// Non-leaf function
	Compute (0, 16, 36, 26, 4, 128, 0){
		acquire(16, anc, 17, nb);
	nq0[0] = q[25];
	nq0[1] = q[0];
	nq0[2] = q[6];
	nq0[3] = q[18];
	nq0[4] = q[31];
	nq0[5] = anc[8];
	nq0[6] = q[15];
	nq0[7] = q[11];
	nq0[8] = q[9];
	nq0[9] = anc[1];
	nq0[10] = q[28];
	nq0[11] = q[20];
	nq1[0] = q[13];
	nq1[1] = q[27];
	nq1[2] = anc[15];
	nq1[3] = anc[6];
	nq1[4] = q[7];
	nq1[5] = anc[9];
	nq1[6] = q[22];
	nq1[7] = q[26];
	nq1[8] = q[12];
	nq1[9] = q[30];
	nq1[10] = anc[4];
	nq1[11] = q[2];
	nq2[0] = q[3];
	nq2[1] = q[17];
	nq2[2] = q[5];
	nq2[3] = q[29];
	nq2[4] = anc[3];
	nq2[5] = q[10];
	nq2[6] = q[19];
	nq2[7] = anc[13];
	nq2[8] = anc[2];
	nq2[9] = anc[10];
	nq2[10] = q[8];
	nq2[11] = q[16];
	nq3[0] = anc[7];
	nq3[1] = q[14];
	nq3[2] = anc[12];
	nq3[3] = q[1];
	nq3[4] = anc[11];
	nq3[5] = q[21];
	nq3[6] = anc[0];
	nq3[7] = q[23];
	nq3[8] = anc[14];
	nq3[9] = anc[5];
	nq3[10] = q[24];
	nq3[11] = q[4];
		CNOT( q[12], q[3] );
		CNOT( anc[11], anc[1] );
		func7(nq2, 12);
		func8(nq3, 12);
		Toffoli( anc[10], q[18], q[13] );
		func6(nq1, 12);
		CNOT( q[21], q[10] );
		Toffoli( anc[10], q[18], q[29] );
		Toffoli( anc[2], q[24], q[29] );
		CNOT( anc[14], anc[4] );
		Toffoli( q[28], anc[8], q[0] );
		func5(nq0, 12);
		Toffoli( q[5], q[30], q[7] );
		CNOT( q[12], q[7] );
	}
	Store {
		CNOT( q[15], res[0] );
		CNOT( q[31], res[1] );
		CNOT( q[7], res[2] );
		CNOT( anc[1], res[3] );
		CNOT( anc[11], res[4] );
		CNOT( q[28], res[5] );
		CNOT( q[13], res[6] );
		CNOT( q[16], res[7] );
		CNOT( q[11], res[8] );
		CNOT( q[14], res[9] );
		CNOT( q[25], res[10] );
		CNOT( q[3], res[11] );
		CNOT( q[12], res[12] );
		CNOT( anc[9], res[13] );
		CNOT( q[5], res[14] );
		CNOT( q[22], res[15] );
	}
	Uncompute(res, 0, anc, 16, 36, 26){
		CNOT( q[12], q[7] );
		Toffoli( q[5], q[30], q[7] );
		func5R(nq0, 12);
		Toffoli( q[28], anc[8], q[0] );
		CNOT( anc[14], anc[4] );
		Toffoli( anc[2], q[24], q[29] );
		Toffoli( anc[10], q[18], q[29] );
		CNOT( q[21], q[10] );
		func6R(nq1, 12);
		Toffoli( anc[10], q[18], q[13] );
		func8R(nq3, 12);
		func7R(nq2, 12);
		CNOT( anc[11], anc[1] );
		CNOT( q[12], q[3] );
	} Free(anc, 16) {}
}
// Function 1 with degree 4
// nq: 32, na: 16, ng: 10
void func1R(qbit **q, int n) {
printf("func1R\n");
fflush(stderr);
	qbit *anc[16]; // ancilla
	qbit *nb[17]; // interacting bits
	qbit *res[16];
	qbit *nq0[12];
	qbit *nq1[12];
	qbit *nq2[12];
	qbit *nq3[12];
	nb[0] = q[5];
	nb[1] = q[30];
	nb[2] = q[7];
	nb[3] = q[18];
	nb[4] = q[13];
	nb[5] = q[18];
	nb[6] = q[29];
	nb[7] = q[28];
	nb[8] = q[0];
	nb[9] = q[21];
	nb[10] = q[10];
	nb[11] = q[24];
	nb[12] = q[29];
	nb[13] = q[12];
	nb[14] = q[3];
	nb[15] = q[12];
	nb[16] = q[7];
	res[0] = q[14];
	res[1] = q[0];
	res[2] = q[4];
	res[3] = q[7];
	res[4] = q[12];
	res[5] = q[26];
	res[6] = q[3];
	res[7] = q[19];
	res[8] = q[10];
	res[9] = q[1];
	res[10] = q[2];
	res[11] = q[5];
	res[12] = q[18];
	res[13] = q[13];
	res[14] = q[27];
	res[15] = q[31];
	// Non-leaf function
	_computeModule(0, 16, 36, 26, 4, 128, 0);
	acquire(16, anc, 17, nb);
	nq0[0] = q[25];
	nq0[1] = q[0];
	nq0[2] = q[6];
	nq0[3] = q[18];
	nq0[4] = q[31];
	nq0[5] = anc[8];
	nq0[6] = q[15];
	nq0[7] = q[11];
	nq0[8] = q[9];
	nq0[9] = anc[1];
	nq0[10] = q[28];
	nq0[11] = q[20];
	nq1[0] = q[13];
	nq1[1] = q[27];
	nq1[2] = anc[15];
	nq1[3] = anc[6];
	nq1[4] = q[7];
	nq1[5] = anc[9];
	nq1[6] = q[22];
	nq1[7] = q[26];
	nq1[8] = q[12];
	nq1[9] = q[30];
	nq1[10] = anc[4];
	nq1[11] = q[2];
	nq2[0] = q[3];
	nq2[1] = q[17];
	nq2[2] = q[5];
	nq2[3] = q[29];
	nq2[4] = anc[3];
	nq2[5] = q[10];
	nq2[6] = q[19];
	nq2[7] = anc[13];
	nq2[8] = anc[2];
	nq2[9] = anc[10];
	nq2[10] = q[8];
	nq2[11] = q[16];
	nq3[0] = anc[7];
	nq3[1] = q[14];
	nq3[2] = anc[12];
	nq3[3] = q[1];
	nq3[4] = anc[11];
	nq3[5] = q[21];
	nq3[6] = anc[0];
	nq3[7] = q[23];
	nq3[8] = anc[14];
	nq3[9] = anc[5];
	nq3[10] = q[24];
	nq3[11] = q[4];
	Recompute(res, 0, anc, 16, 36, 26){
		CNOT( q[12], q[3] );
		CNOT( anc[11], anc[1] );
		func7(nq2, 12);
		func8(nq3, 12);
		Toffoli( anc[10], q[18], q[13] );
		func6(nq1, 12);
		CNOT( q[21], q[10] );
		Toffoli( anc[10], q[18], q[29] );
		Toffoli( anc[2], q[24], q[29] );
		CNOT( anc[14], anc[4] );
		Toffoli( q[28], anc[8], q[0] );
		func5(nq0, 12);
		Toffoli( q[5], q[30], q[7] );
		CNOT( q[12], q[7] );
	}
	Restore {
		CNOT( q[15], res[0] );
		CNOT( q[31], res[1] );
		CNOT( q[7], res[2] );
		CNOT( anc[1], res[3] );
		CNOT( anc[11], res[4] );
		CNOT( q[28], res[5] );
		CNOT( q[13], res[6] );
		CNOT( q[16], res[7] );
		CNOT( q[11], res[8] );
		CNOT( q[14], res[9] );
		CNOT( q[25], res[10] );
		CNOT( q[3], res[11] );
		CNOT( q[12], res[12] );
		CNOT( anc[9], res[13] );
		CNOT( q[5], res[14] );
		CNOT( q[22], res[15] );
	}
	Unrecompute {
		CNOT( q[12], q[7] );
		Toffoli( q[5], q[30], q[7] );
		func5R(nq0, 12);
		Toffoli( q[28], anc[8], q[0] );
		CNOT( anc[14], anc[4] );
		Toffoli( anc[2], q[24], q[29] );
		Toffoli( anc[10], q[18], q[29] );
		CNOT( q[21], q[10] );
		func6R(nq1, 12);
		Toffoli( anc[10], q[18], q[13] );
		func8R(nq3, 12);
		func7R(nq2, 12);
		CNOT( anc[11], anc[1] );
		CNOT( q[12], q[3] );
	} Refree(anc, 16) {}
}
// main function
int main() {
	qbit *new[128];
	acquire(128, new, 0, NULL);
	// Intialize inputs
	X (new[45]);
	X (new[124]);
	X (new[89]);
	X (new[99]);
	X (new[39]);
	X (new[77]);
	X (new[51]);
	X (new[69]);
	X (new[11]);
	X (new[63]);
	X (new[122]);
	X (new[120]);
	X (new[12]);
	X (new[83]);
	X (new[84]);
	X (new[100]);
	X (new[110]);
	X (new[6]);
	X (new[94]);
	X (new[53]);
	X (new[78]);
	X (new[49]);
	X (new[104]);
	X (new[73]);
	X (new[46]);
	X (new[24]);
	X (new[125]);
	X (new[55]);
	X (new[18]);
	X (new[119]);
	X (new[8]);
	X (new[65]);
	X (new[4]);
	X (new[76]);
	X (new[1]);
	X (new[59]);
	X (new[74]);
	X (new[66]);
	X (new[67]);
	X (new[107]);
	X (new[34]);
	X (new[38]);
	X (new[44]);
	X (new[3]);
	X (new[60]);
	X (new[127]);
	X (new[64]);
	X (new[9]);
	X (new[58]);
	X (new[50]);
	X (new[5]);
	X (new[121]);
	X (new[25]);
	X (new[42]);
	X (new[32]);
	X (new[35]);
	X (new[47]);
	X (new[21]);
	X (new[116]);
	X (new[43]);
	X (new[61]);
	X (new[33]);
	X (new[82]);
	X (new[126]);
	X (new[22]);
	X (new[20]);
	X (new[98]);
	X (new[2]);
	X (new[101]);
	X (new[96]);
	// Start computation
	qbit *nq0[32];
	qbit *nq1[32];
	qbit *nq2[32];
	qbit *nq3[32];
	nq0[0] = new[6];
	nq0[1] = new[104];
	nq0[2] = new[58];
	nq0[3] = new[24];
	nq0[4] = new[113];
	nq0[5] = new[54];
	nq0[6] = new[121];
	nq0[7] = new[100];
	nq0[8] = new[33];
	nq0[9] = new[40];
	nq0[10] = new[43];
	nq0[11] = new[46];
	nq0[12] = new[13];
	nq0[13] = new[25];
	nq0[14] = new[112];
	nq0[15] = new[50];
	nq0[16] = new[12];
	nq0[17] = new[60];
	nq0[18] = new[123];
	nq0[19] = new[30];
	nq0[20] = new[14];
	nq0[21] = new[0];
	nq0[22] = new[56];
	nq0[23] = new[92];
	nq0[24] = new[20];
	nq0[25] = new[17];
	nq0[26] = new[82];
	nq0[27] = new[118];
	nq0[28] = new[125];
	nq0[29] = new[36];
	nq0[30] = new[80];
	nq0[31] = new[5];
	nq1[0] = new[7];
	nq1[1] = new[16];
	nq1[2] = new[122];
	nq1[3] = new[64];
	nq1[4] = new[53];
	nq1[5] = new[57];
	nq1[6] = new[83];
	nq1[7] = new[35];
	nq1[8] = new[23];
	nq1[9] = new[15];
	nq1[10] = new[98];
	nq1[11] = new[52];
	nq1[12] = new[99];
	nq1[13] = new[76];
	nq1[14] = new[8];
	nq1[15] = new[106];
	nq1[16] = new[74];
	nq1[17] = new[87];
	nq1[18] = new[49];
	nq1[19] = new[96];
	nq1[20] = new[71];
	nq1[21] = new[32];
	nq1[22] = new[117];
	nq1[23] = new[84];
	nq1[24] = new[95];
	nq1[25] = new[28];
	nq1[26] = new[55];
	nq1[27] = new[107];
	nq1[28] = new[101];
	nq1[29] = new[2];
	nq1[30] = new[48];
	nq1[31] = new[88];
	nq2[0] = new[66];
	nq2[1] = new[47];
	nq2[2] = new[102];
	nq2[3] = new[44];
	nq2[4] = new[1];
	nq2[5] = new[34];
	nq2[6] = new[39];
	nq2[7] = new[10];
	nq2[8] = new[72];
	nq2[9] = new[63];
	nq2[10] = new[22];
	nq2[11] = new[59];
	nq2[12] = new[103];
	nq2[13] = new[65];
	nq2[14] = new[61];
	nq2[15] = new[11];
	nq2[16] = new[70];
	nq2[17] = new[124];
	nq2[18] = new[86];
	nq2[19] = new[126];
	nq2[20] = new[114];
	nq2[21] = new[91];
	nq2[22] = new[75];
	nq2[23] = new[115];
	nq2[24] = new[127];
	nq2[25] = new[69];
	nq2[26] = new[18];
	nq2[27] = new[67];
	nq2[28] = new[94];
	nq2[29] = new[41];
	nq2[30] = new[21];
	nq2[31] = new[37];
	nq3[0] = new[77];
	nq3[1] = new[38];
	nq3[2] = new[29];
	nq3[3] = new[85];
	nq3[4] = new[89];
	nq3[5] = new[19];
	nq3[6] = new[62];
	nq3[7] = new[97];
	nq3[8] = new[90];
	nq3[9] = new[108];
	nq3[10] = new[81];
	nq3[11] = new[42];
	nq3[12] = new[3];
	nq3[13] = new[9];
	nq3[14] = new[51];
	nq3[15] = new[120];
	nq3[16] = new[111];
	nq3[17] = new[105];
	nq3[18] = new[45];
	nq3[19] = new[31];
	nq3[20] = new[109];
	nq3[21] = new[110];
	nq3[22] = new[26];
	nq3[23] = new[68];
	nq3[24] = new[78];
	nq3[25] = new[73];
	nq3[26] = new[4];
	nq3[27] = new[79];
	nq3[28] = new[93];
	nq3[29] = new[119];
	nq3[30] = new[27];
	nq3[31] = new[116];
	for (int i = 0; i < LOOP; i++) {
		func1(nq0, 32);
		func2(nq1, 32);
		func3(nq2, 32);
		func4(nq3, 32);
	}
	return 0;
}
