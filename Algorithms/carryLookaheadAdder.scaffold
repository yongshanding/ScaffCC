#include <stdlib.h>
//#include <stdbool.h>
#include <math.h>
#include "qalloc.h"

//void acquire(int n, qbit **addr) {
//	qbit *new = (qbit *)malloc(sizeof(qbit)*n);
//	*addr = new;
//}
//
//void release(qbit **out, int n1, qbit **anc, int n2);

//void computeCarry(qbit **a, qbit **b, qbit **res, int i) {
//	qbit *all_anc[3];
//	acquire(3, all_anc);
//	qbit **carry = &all_anc[0];
//	qbit **anc = &all_anc[1];
//	qbit **anc2 = &all_anc[2];
//	//qbit *carry[1];
//	//acquire(1, carry);
//	//qbit *anc[1];
//	//acquire(1, anc);
//	//qbit *anc2[1];
//	//acquire(1, anc2);
//	Toffoli(b[i-1], carry[0], anc[0]); 
//	Toffoli(b[i-1], a[i-1], anc[0]); 
//	Toffoli(a[i-1], carry[0], anc[0]); 
//	CNOT(a[i], anc2[0]);
//	CNOT(b[i], anc2[0]);
//	CNOT(anc2[0], carry[0]);
//	CNOT(carry[0], res[i]);
//	all_anc[0] = carry[0];
//	all_anc[0] = anc[0];
//	all_anc[0] = anc2[0];
//	release(&res[i], 1, all_anc, 3);
//}
//
//void carryRippleAdder(qbit **a, qbit **b, qbit **res, int n) {
//	CNOT(a[0], b[0]);
//	CNOT(b[0], res[0]);
//	for (int i = 1; i < n; i++) {
//		computeCarry(a, b, res, i);
//	}
//	
//}

void carryRippleHelper(qbit **a, qbit ** b, qbit **res, qbit **carry, int i) {
	qbit *anc[1];
	acquire(1, anc);
	Toffoli(b[i-1], carry[0], anc[0]); 
	Toffoli(b[i-1], a[i-1], anc[0]); 
	Toffoli(a[i-1], carry[0], anc[0]); 
	CNOT(anc[0], carry[0]);
	CNOT(carry[0], anc[0]);
	CNOT(anc[0], carry[0]);
	CNOT(a[i], res[i]);
	CNOT(b[i], res[i]);
	CNOT(carry[0], res[i]);
	qbit *out[2];
	out[0] = carry[0];
	out[1] = res[i];
	release(out, 2, anc, 1);
}

void carryRipple(qbit **a, qbit **b, qbit **res, int flag, int adderSize) {
	qbit *carry[1];
	acquire(1, carry);
	if (flag == 1) {
		X(carry[0]);
	}
	CNOT(a[0], res[0]);
	CNOT(b[0], res[0]);
	CNOT(carry[0], res[0]);
	for (int i = 1; i < adderSize; i++) {
		carryRippleHelper(a, b, res, carry, i);
	}
	CNOT(carry[0], res[adderSize]);
	release(res, 8, carry, 1); // adderSize = 8
}

void lookaheadHelper(qbit **carry, qbit **IR, qbit **res, int i, int adderSize, int imSpacing) {
	qbit *temp[1];
	acquire(1, temp);
	for (int j = 0; j < adderSize; j++) {
		Toffoli(carry[0], IR[i * imSpacing + j], res[i * adderSize + j]);
		X(carry[0]);
		Toffoli(carry[0], IR[i * imSpacing + adderSize + 1 + j], res[i * adderSize + j]);
		X(carry[0]);
	}
	Toffoli(carry[0], IR[i * imSpacing + adderSize], temp[0]);
	X(carry[0]);
	Toffoli(carry[0], IR[i * imSpacing + 2*adderSize + 1], temp[0]);
	X(carry[0]);
	CNOT(carry[0], temp[0]);
	CNOT(temp[0], carry[0]);
	CNOT(carry[0], temp[0]);
	qbit *out[9];//1+adderSize
	out[0] = carry[0];
	for (int k = 1; k < 9; k++) {
		out[k] = res[i * adderSize + k];
	}
	release(out, 9, temp, 1); //1+adderSize = 9
}

void carryLookaheadAdder(qbit **a, qbit **b, qbit **res, int n) {
	int adderSize = 8;//(int)sqrt((double)n);
	int imSpacing = 2*(adderSize+1);
	int numQ = 191;//3 * n - 1;//3 * adderSize * adderSize - 1 
	qbit *all[191];
	acquire(191, all);
	qbit **result = &all[0];
	qbit **a0b0 = &all[adderSize*(adderSize-1)];
	qbit **IR = &all[adderSize*adderSize + 1];
	qbit **aa = &a[adderSize];// size: adderSize - 1
	qbit **bb = &b[adderSize];
	qbit **carry = &a0b0[adderSize];
	for (int i = 0; i < adderSize - 1; i++) {
		carryRipple(&aa[i * adderSize], &bb[i * adderSize], &result[2*i*(adderSize+1)], 0, adderSize);
		carryRipple(&aa[i * adderSize], &bb[i * adderSize], &result[(2*i+1)*(adderSize+1)], 1, adderSize);
	}
	for (int i = 0; i < adderSize - 1; i++) {
		lookaheadHelper(carry, IR, result, i, adderSize, imSpacing);
	}
}

int main() {
	int n = 64;
	qbit *new[3*n];
	acquire(3*n, new);
	qbit **a = &new[0];
	qbit **b = &new[n];
	qbit **res = &new[2*n];
	//qbit *b[n];
	//acquire(n, b);
	//qbit *res[n];
	//acquire(n, res);
	carryLookaheadAdder(a,b,res,n);
	return 0;
	
}
