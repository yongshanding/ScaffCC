#include <stdlib.h>
#include "qalloc.h"

#define N 16
//void acquire(int n, qbit **addr) {
//	qbit *new = (qbit *)malloc(sizeof(qbit)*n);
//	*addr = new;
//}
//
//void release(qbit **out, int n1, qbit **anc, int n2);

void computeCarry(qbit **a, qbit **b, qbit **res, qbit **carry, int i) {
	qbit *all_anc[2];
	qbit *d[4];
	d[0] = a[i];
	d[1] = a[i-1];
	d[2] = b[i];
	d[3] = b[i-1];
	acquire(2, all_anc, 4, d);
	qbit **anc = &all_anc[0];
	qbit **anc2 = &all_anc[1];
	//qbit *carry[1];
	//acquire(1, carry);
	//qbit *anc[1];
	//acquire(1, anc);
	//qbit *anc2[1];
	//acquire(1, anc2);
	Toffoli(b[i-1], carry[0], anc[0]); 
	Toffoli(b[i-1], a[i-1], anc[0]); 
	Toffoli(a[i-1], carry[0], anc[0]); 
	CNOT(a[i], anc2[0]);
	CNOT(b[i], anc2[0]);
	CNOT(anc2[0], carry[0]);
	//CNOT(carry[0], res[i]);
	//all_anc[0] = carry[0];
	//all_anc[1] = anc[0];
	//all_anc[2] = anc2[0];
	release(carry, 1, all_anc, 2, NULL);
}

void carryRippleAdder(qbit **a, qbit **b, qbit **res, int n) {
	qbit *carry[1];
	qbit *d[2*n];
	for (int i = 0; i < 2*n; i++) {
		if (i < n) {
			d[i] = a[i];
		} else {
			d[i] = b[i];
		}
	}
	acquire(1, carry, 2*N, d);
	CNOT(a[0], res[0]);
	CNOT(b[0], res[0]);
	for (int i = 1; i < n; i++) {
		computeCarry(a, b, res, carry, i);
		CNOT(a[i], res[i]);
		CNOT(b[i], res[i]);
		CNOT(carry[0], res[i]);
	}
	
}

int main() {
	int n = N;
	qbit *new[3*n];
	acquire(3*n, new, 0, NULL);
	qbit **a = &new[0];
	qbit **b = &new[n];
	qbit **res = &new[2*n];
	//qbit *b[n];
	//acquire(n, b);
	//qbit *res[n];
	//acquire(n, res);
	carryRippleAdder(a,b,res,n);
	return 0;
	
}
